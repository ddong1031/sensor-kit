package com.sensoro.libbleserver.ble.proto;// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgNode_1v1_m32.proto

public final class MsgNode1V1M5 {
  private MsgNode1V1M5() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code Activtion}
   */
  public enum Activtion
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ABP = 0;</code>
     */
    ABP(0, 0),
    /**
     * <code>OTA = 1;</code>
     */
    OTA(1, 1),
    ;

    /**
     * <code>ABP = 0;</code>
     */
    public static final int ABP_VALUE = 0;
    /**
     * <code>OTA = 1;</code>
     */
    public static final int OTA_VALUE = 1;


    public final int getNumber() { return value; }

    public static Activtion valueOf(int value) {
      switch (value) {
        case 0: return ABP;
        case 1: return OTA;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Activtion>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Activtion>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Activtion>() {
            public Activtion findValueByNumber(int number) {
              return Activtion.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MsgNode1V1M5.getDescriptor().getEnumTypes().get(0);
    }

    private static final Activtion[] VALUES = values();

    public static Activtion valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Activtion(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Activtion)
  }

  /**
   * Protobuf enum {@code ClassType}
   */
  public enum ClassType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CLASS_A = 0;</code>
     */
    CLASS_A(0, 0),
    /**
     * <code>CLASS_B = 1;</code>
     */
    CLASS_B(1, 1),
    /**
     * <code>CLASS_C = 2;</code>
     */
    CLASS_C(2, 2),
    ;

    /**
     * <code>CLASS_A = 0;</code>
     */
    public static final int CLASS_A_VALUE = 0;
    /**
     * <code>CLASS_B = 1;</code>
     */
    public static final int CLASS_B_VALUE = 1;
    /**
     * <code>CLASS_C = 2;</code>
     */
    public static final int CLASS_C_VALUE = 2;


    public final int getNumber() { return value; }

    public static ClassType valueOf(int value) {
      switch (value) {
        case 0: return CLASS_A;
        case 1: return CLASS_B;
        case 2: return CLASS_C;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ClassType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ClassType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ClassType>() {
            public ClassType findValueByNumber(int number) {
              return ClassType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MsgNode1V1M5.getDescriptor().getEnumTypes().get(1);
    }

    private static final ClassType[] VALUES = values();

    public static ClassType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ClassType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ClassType)
  }

  /**
   * Protobuf enum {@code SensorError}
   */
  public enum SensorError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SENSOR_ERR_NONE = 0;</code>
     */
    SENSOR_ERR_NONE(0, 0),
    /**
     * <code>SENSOR_ERR_NO_DATA = 1;</code>
     */
    SENSOR_ERR_NO_DATA(1, 1),
    /**
     * <code>SENSOR_ERR_CRC = 2;</code>
     */
    SENSOR_ERR_CRC(2, 2),
    /**
     * <code>SENSOR_ERR_DATA = 3;</code>
     */
    SENSOR_ERR_DATA(3, 3),
    /**
     * <code>SENSOR_ERR_FAULT = 4;</code>
     */
    SENSOR_ERR_FAULT(4, 4),
    /**
     * <code>SENSOR_ERR_ALARM = 5;</code>
     */
    SENSOR_ERR_ALARM(5, 5),
    /**
     * <code>SENSOR_ERR_ALARM_HIGH = 6;</code>
     */
    SENSOR_ERR_ALARM_HIGH(6, 6),
    /**
     * <code>SENSOR_ERR_ALARM_LOW = 7;</code>
     */
    SENSOR_ERR_ALARM_LOW(7, 7),
    /**
     * <code>SENSOR_ERR_UNKNOWN = 127;</code>
     */
    SENSOR_ERR_UNKNOWN(8, 127),
    ;

    /**
     * <code>SENSOR_ERR_NONE = 0;</code>
     */
    public static final int SENSOR_ERR_NONE_VALUE = 0;
    /**
     * <code>SENSOR_ERR_NO_DATA = 1;</code>
     */
    public static final int SENSOR_ERR_NO_DATA_VALUE = 1;
    /**
     * <code>SENSOR_ERR_CRC = 2;</code>
     */
    public static final int SENSOR_ERR_CRC_VALUE = 2;
    /**
     * <code>SENSOR_ERR_DATA = 3;</code>
     */
    public static final int SENSOR_ERR_DATA_VALUE = 3;
    /**
     * <code>SENSOR_ERR_FAULT = 4;</code>
     */
    public static final int SENSOR_ERR_FAULT_VALUE = 4;
    /**
     * <code>SENSOR_ERR_ALARM = 5;</code>
     */
    public static final int SENSOR_ERR_ALARM_VALUE = 5;
    /**
     * <code>SENSOR_ERR_ALARM_HIGH = 6;</code>
     */
    public static final int SENSOR_ERR_ALARM_HIGH_VALUE = 6;
    /**
     * <code>SENSOR_ERR_ALARM_LOW = 7;</code>
     */
    public static final int SENSOR_ERR_ALARM_LOW_VALUE = 7;
    /**
     * <code>SENSOR_ERR_UNKNOWN = 127;</code>
     */
    public static final int SENSOR_ERR_UNKNOWN_VALUE = 127;


    public final int getNumber() { return value; }

    public static SensorError valueOf(int value) {
      switch (value) {
        case 0: return SENSOR_ERR_NONE;
        case 1: return SENSOR_ERR_NO_DATA;
        case 2: return SENSOR_ERR_CRC;
        case 3: return SENSOR_ERR_DATA;
        case 4: return SENSOR_ERR_FAULT;
        case 5: return SENSOR_ERR_ALARM;
        case 6: return SENSOR_ERR_ALARM_HIGH;
        case 7: return SENSOR_ERR_ALARM_LOW;
        case 127: return SENSOR_ERR_UNKNOWN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SensorError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SensorError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SensorError>() {
            public SensorError findValueByNumber(int number) {
              return SensorError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MsgNode1V1M5.getDescriptor().getEnumTypes().get(2);
    }

    private static final SensorError[] VALUES = values();

    public static SensorError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private SensorError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SensorError)
  }

  /**
   * Protobuf enum {@code SensorType}
   */
  public enum SensorType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SENSOR_TYPE_TEMP = 0;</code>
     */
    SENSOR_TYPE_TEMP(0, 0),
    /**
     * <code>SENSOR_TYPE_HUMI = 1;</code>
     */
    SENSOR_TYPE_HUMI(1, 1),
    /**
     * <code>SENSOR_TYPE_LIGHT = 2;</code>
     */
    SENSOR_TYPE_LIGHT(2, 2),
    /**
     * <code>SENSOR_TYPE_GPS = 3;</code>
     */
    SENSOR_TYPE_GPS(3, 3),
    /**
     * <code>SENSOR_TYPE_ANGLE = 4;</code>
     */
    SENSOR_TYPE_ANGLE(4, 4),
    /**
     * <code>SENSOR_TYPE_PM2_5 = 5;</code>
     */
    SENSOR_TYPE_PM2_5(5, 5),
    /**
     * <code>SENSOR_TYPE_PM10 = 6;</code>
     */
    SENSOR_TYPE_PM10(6, 6),
    /**
     * <code>SENSOR_TYPE_LEAK = 7;</code>
     */
    SENSOR_TYPE_LEAK(7, 7),
    /**
     * <code>SENSOR_TYPE_CO = 8;</code>
     */
    SENSOR_TYPE_CO(8, 8),
    /**
     * <code>SENSOR_TYPE_CO2 = 9;</code>
     */
    SENSOR_TYPE_CO2(9, 9),
    /**
     * <code>SENSOR_TYPE_NO2 = 10;</code>
     */
    SENSOR_TYPE_NO2(10, 10),
    /**
     * <code>SENSOR_TYPE_CH4 = 11;</code>
     */
    SENSOR_TYPE_CH4(11, 11),
    /**
     * <code>SENSOR_TYPE_LPG = 12;</code>
     */
    SENSOR_TYPE_LPG(12, 12),
    /**
     * <code>SENSOR_TYPE_FLAME = 13;</code>
     */
    SENSOR_TYPE_FLAME(13, 13),
    /**
     * <code>SENSOR_TYPE_ARTIFICIAL_GAS = 14;</code>
     */
    SENSOR_TYPE_ARTIFICIAL_GAS(14, 14),
    /**
     * <code>SENSOR_TYPE_WATER_GAGE = 15;</code>
     */
    SENSOR_TYPE_WATER_GAGE(15, 15),
    /**
     * <code>SENSOR_TYPE_TRACKER = 16;</code>
     */
    SENSOR_TYPE_TRACKER(16, 16),
    ;

    /**
     * <code>SENSOR_TYPE_TEMP = 0;</code>
     */
    public static final int SENSOR_TYPE_TEMP_VALUE = 0;
    /**
     * <code>SENSOR_TYPE_HUMI = 1;</code>
     */
    public static final int SENSOR_TYPE_HUMI_VALUE = 1;
    /**
     * <code>SENSOR_TYPE_LIGHT = 2;</code>
     */
    public static final int SENSOR_TYPE_LIGHT_VALUE = 2;
    /**
     * <code>SENSOR_TYPE_GPS = 3;</code>
     */
    public static final int SENSOR_TYPE_GPS_VALUE = 3;
    /**
     * <code>SENSOR_TYPE_ANGLE = 4;</code>
     */
    public static final int SENSOR_TYPE_ANGLE_VALUE = 4;
    /**
     * <code>SENSOR_TYPE_PM2_5 = 5;</code>
     */
    public static final int SENSOR_TYPE_PM2_5_VALUE = 5;
    /**
     * <code>SENSOR_TYPE_PM10 = 6;</code>
     */
    public static final int SENSOR_TYPE_PM10_VALUE = 6;
    /**
     * <code>SENSOR_TYPE_LEAK = 7;</code>
     */
    public static final int SENSOR_TYPE_LEAK_VALUE = 7;
    /**
     * <code>SENSOR_TYPE_CO = 8;</code>
     */
    public static final int SENSOR_TYPE_CO_VALUE = 8;
    /**
     * <code>SENSOR_TYPE_CO2 = 9;</code>
     */
    public static final int SENSOR_TYPE_CO2_VALUE = 9;
    /**
     * <code>SENSOR_TYPE_NO2 = 10;</code>
     */
    public static final int SENSOR_TYPE_NO2_VALUE = 10;
    /**
     * <code>SENSOR_TYPE_CH4 = 11;</code>
     */
    public static final int SENSOR_TYPE_CH4_VALUE = 11;
    /**
     * <code>SENSOR_TYPE_LPG = 12;</code>
     */
    public static final int SENSOR_TYPE_LPG_VALUE = 12;
    /**
     * <code>SENSOR_TYPE_FLAME = 13;</code>
     */
    public static final int SENSOR_TYPE_FLAME_VALUE = 13;
    /**
     * <code>SENSOR_TYPE_ARTIFICIAL_GAS = 14;</code>
     */
    public static final int SENSOR_TYPE_ARTIFICIAL_GAS_VALUE = 14;
    /**
     * <code>SENSOR_TYPE_WATER_GAGE = 15;</code>
     */
    public static final int SENSOR_TYPE_WATER_GAGE_VALUE = 15;
    /**
     * <code>SENSOR_TYPE_TRACKER = 16;</code>
     */
    public static final int SENSOR_TYPE_TRACKER_VALUE = 16;


    public final int getNumber() { return value; }

    public static SensorType valueOf(int value) {
      switch (value) {
        case 0: return SENSOR_TYPE_TEMP;
        case 1: return SENSOR_TYPE_HUMI;
        case 2: return SENSOR_TYPE_LIGHT;
        case 3: return SENSOR_TYPE_GPS;
        case 4: return SENSOR_TYPE_ANGLE;
        case 5: return SENSOR_TYPE_PM2_5;
        case 6: return SENSOR_TYPE_PM10;
        case 7: return SENSOR_TYPE_LEAK;
        case 8: return SENSOR_TYPE_CO;
        case 9: return SENSOR_TYPE_CO2;
        case 10: return SENSOR_TYPE_NO2;
        case 11: return SENSOR_TYPE_CH4;
        case 12: return SENSOR_TYPE_LPG;
        case 13: return SENSOR_TYPE_FLAME;
        case 14: return SENSOR_TYPE_ARTIFICIAL_GAS;
        case 15: return SENSOR_TYPE_WATER_GAGE;
        case 16: return SENSOR_TYPE_TRACKER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SensorType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SensorType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SensorType>() {
            public SensorType findValueByNumber(int number) {
              return SensorType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MsgNode1V1M5.getDescriptor().getEnumTypes().get(3);
    }

    private static final SensorType[] VALUES = values();

    public static SensorType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private SensorType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SensorType)
  }

  /**
   * Protobuf enum {@code SensorStatus}
   */
  public enum SensorStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SENSORO_STATUS_NONE = 0;</code>
     */
    SENSORO_STATUS_NONE(0, 0),
    /**
     * <code>SENSORO_STATUS_SELF_INSPECTION = 1;</code>
     */
    SENSORO_STATUS_SELF_INSPECTION(1, 1),
    /**
     * <code>SENSORO_STATUS_ALARM = 2;</code>
     */
    SENSORO_STATUS_ALARM(2, 2),
    /**
     * <code>SENSORO_STATUS_IMPACT = 3;</code>
     */
    SENSORO_STATUS_IMPACT(3, 3),
    /**
     * <code>SENSORO_STATUS_DISCHARGE = 4;</code>
     */
    SENSORO_STATUS_DISCHARGE(4, 4),
    /**
     * <code>SENSORO_STATUS_DISCHARGE_AND_IMPACT = 5;</code>
     */
    SENSORO_STATUS_DISCHARGE_AND_IMPACT(5, 5),
    /**
     * <code>SENSORO_STATUS_MOVED = 6;</code>
     */
    SENSORO_STATUS_MOVED(6, 6),
    ;

    /**
     * <code>SENSORO_STATUS_NONE = 0;</code>
     */
    public static final int SENSORO_STATUS_NONE_VALUE = 0;
    /**
     * <code>SENSORO_STATUS_SELF_INSPECTION = 1;</code>
     */
    public static final int SENSORO_STATUS_SELF_INSPECTION_VALUE = 1;
    /**
     * <code>SENSORO_STATUS_ALARM = 2;</code>
     */
    public static final int SENSORO_STATUS_ALARM_VALUE = 2;
    /**
     * <code>SENSORO_STATUS_IMPACT = 3;</code>
     */
    public static final int SENSORO_STATUS_IMPACT_VALUE = 3;
    /**
     * <code>SENSORO_STATUS_DISCHARGE = 4;</code>
     */
    public static final int SENSORO_STATUS_DISCHARGE_VALUE = 4;
    /**
     * <code>SENSORO_STATUS_DISCHARGE_AND_IMPACT = 5;</code>
     */
    public static final int SENSORO_STATUS_DISCHARGE_AND_IMPACT_VALUE = 5;
    /**
     * <code>SENSORO_STATUS_MOVED = 6;</code>
     */
    public static final int SENSORO_STATUS_MOVED_VALUE = 6;


    public final int getNumber() { return value; }

    public static SensorStatus valueOf(int value) {
      switch (value) {
        case 0: return SENSORO_STATUS_NONE;
        case 1: return SENSORO_STATUS_SELF_INSPECTION;
        case 2: return SENSORO_STATUS_ALARM;
        case 3: return SENSORO_STATUS_IMPACT;
        case 4: return SENSORO_STATUS_DISCHARGE;
        case 5: return SENSORO_STATUS_DISCHARGE_AND_IMPACT;
        case 6: return SENSORO_STATUS_MOVED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SensorStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SensorStatus>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SensorStatus>() {
            public SensorStatus findValueByNumber(int number) {
              return SensorStatus.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MsgNode1V1M5.getDescriptor().getEnumTypes().get(4);
    }

    private static final SensorStatus[] VALUES = values();

    public static SensorStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private SensorStatus(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SensorStatus)
  }

  /**
   * Protobuf enum {@code AppCmd}
   */
  public enum AppCmd
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>APP_CMD_NONE = 0;</code>
     */
    APP_CMD_NONE(0, 0),
    /**
     * <code>APP_CMD_RESET = 1;</code>
     *
     * <pre>
     * 重启指令
     * </pre>
     */
    APP_CMD_RESET(1, 1),
    /**
     * <code>APP_CMD_FAC_RESET = 2;</code>
     *
     * <pre>
     * 恢复出厂设置指令
     * </pre>
     */
    APP_CMD_FAC_RESET(2, 2),
    /**
     * <code>APP_CMD_DFU = 3;</code>
     *
     * <pre>
     * 进入 DFU 模式指令
     * </pre>
     */
    APP_CMD_DFU(3, 3),
    /**
     * <code>APP_CMD_DATA_QUERY = 10;</code>
     *
     * <pre>
     * 数据查询指令
     * </pre>
     */
    APP_CMD_DATA_QUERY(4, 10),
    /**
     * <code>APP_CMD_REBOOT = 11;</code>
     *
     * <pre>
     * 重启指令
     * </pre>
     */
    APP_CMD_REBOOT(5, 11),
    /**
     * <code>APP_CMD_SELF_TEST = 12;</code>
     *
     * <pre>
     * 自检指令
     * </pre>
     */
    APP_CMD_SELF_TEST(6, 12),
    /**
     * <code>APP_CMD_LONG_MUTE = 13;</code>
     *
     * <pre>
     * 长消音指令
     * </pre>
     */
    APP_CMD_LONG_MUTE(7, 13),
    /**
     * <code>APP_CMD_MUTE = 14;</code>
     *
     * <pre>
     * 短消音指令
     * </pre>
     */
    APP_CMD_MUTE(8, 14),
    /**
     * <code>APP_CMD_SWITCH_OPENING = 15;</code>
     *
     * <pre>
     * 开闸指令
     * </pre>
     */
    APP_CMD_SWITCH_OPENING(9, 15),
    /**
     * <code>APP_CMD_SWITCH_CLOSING = 16;</code>
     *
     * <pre>
     * 合闸指令
     * </pre>
     */
    APP_CMD_SWITCH_CLOSING(10, 16),
    /**
     * <code>APP_CMD_VALVE_CLOSING = 17;</code>
     *
     * <pre>
     * 阀门闭合指令
     * </pre>
     */
    APP_CMD_VALVE_CLOSING(11, 17),
    /**
     * <code>APP_CMD_TIMING_MUTE = 20;</code>
     *
     * <pre>
     * 定时消音指令(复用为遥控器报警屏蔽)
     * </pre>
     */
    APP_CMD_TIMING_MUTE(12, 20),
    /**
     * <code>APP_CMD_ALARM_TRIGGER = 21;</code>
     *
     * <pre>
     * 触发报警指令
     * </pre>
     */
    APP_CMD_ALARM_TRIGGER(13, 21),
    /**
     * <code>APP_CMD_REMOTE_CONTROL_PAIR = 22;</code>
     *
     * <pre>
     * 遥控器配对指令
     * </pre>
     */
    APP_CMD_REMOTE_CONTROL_PAIR(14, 22),
    /**
     * <code>APP_CMD_CHANNEL_SEARCH = 23;</code>
     *
     * <pre>
     * 触发扫频指令
     * </pre>
     */
    APP_CMD_CHANNEL_SEARCH(15, 23),
    ;

    /**
     * <code>APP_CMD_NONE = 0;</code>
     */
    public static final int APP_CMD_NONE_VALUE = 0;
    /**
     * <code>APP_CMD_RESET = 1;</code>
     *
     * <pre>
     * 重启指令
     * </pre>
     */
    public static final int APP_CMD_RESET_VALUE = 1;
    /**
     * <code>APP_CMD_FAC_RESET = 2;</code>
     *
     * <pre>
     * 恢复出厂设置指令
     * </pre>
     */
    public static final int APP_CMD_FAC_RESET_VALUE = 2;
    /**
     * <code>APP_CMD_DFU = 3;</code>
     *
     * <pre>
     * 进入 DFU 模式指令
     * </pre>
     */
    public static final int APP_CMD_DFU_VALUE = 3;
    /**
     * <code>APP_CMD_DATA_QUERY = 10;</code>
     *
     * <pre>
     * 数据查询指令
     * </pre>
     */
    public static final int APP_CMD_DATA_QUERY_VALUE = 10;
    /**
     * <code>APP_CMD_REBOOT = 11;</code>
     *
     * <pre>
     * 重启指令
     * </pre>
     */
    public static final int APP_CMD_REBOOT_VALUE = 11;
    /**
     * <code>APP_CMD_SELF_TEST = 12;</code>
     *
     * <pre>
     * 自检指令
     * </pre>
     */
    public static final int APP_CMD_SELF_TEST_VALUE = 12;
    /**
     * <code>APP_CMD_LONG_MUTE = 13;</code>
     *
     * <pre>
     * 长消音指令
     * </pre>
     */
    public static final int APP_CMD_LONG_MUTE_VALUE = 13;
    /**
     * <code>APP_CMD_MUTE = 14;</code>
     *
     * <pre>
     * 短消音指令
     * </pre>
     */
    public static final int APP_CMD_MUTE_VALUE = 14;
    /**
     * <code>APP_CMD_SWITCH_OPENING = 15;</code>
     *
     * <pre>
     * 开闸指令
     * </pre>
     */
    public static final int APP_CMD_SWITCH_OPENING_VALUE = 15;
    /**
     * <code>APP_CMD_SWITCH_CLOSING = 16;</code>
     *
     * <pre>
     * 合闸指令
     * </pre>
     */
    public static final int APP_CMD_SWITCH_CLOSING_VALUE = 16;
    /**
     * <code>APP_CMD_VALVE_CLOSING = 17;</code>
     *
     * <pre>
     * 阀门闭合指令
     * </pre>
     */
    public static final int APP_CMD_VALVE_CLOSING_VALUE = 17;
    /**
     * <code>APP_CMD_TIMING_MUTE = 20;</code>
     *
     * <pre>
     * 定时消音指令(复用为遥控器报警屏蔽)
     * </pre>
     */
    public static final int APP_CMD_TIMING_MUTE_VALUE = 20;
    /**
     * <code>APP_CMD_ALARM_TRIGGER = 21;</code>
     *
     * <pre>
     * 触发报警指令
     * </pre>
     */
    public static final int APP_CMD_ALARM_TRIGGER_VALUE = 21;
    /**
     * <code>APP_CMD_REMOTE_CONTROL_PAIR = 22;</code>
     *
     * <pre>
     * 遥控器配对指令
     * </pre>
     */
    public static final int APP_CMD_REMOTE_CONTROL_PAIR_VALUE = 22;
    /**
     * <code>APP_CMD_CHANNEL_SEARCH = 23;</code>
     *
     * <pre>
     * 触发扫频指令
     * </pre>
     */
    public static final int APP_CMD_CHANNEL_SEARCH_VALUE = 23;


    public final int getNumber() { return value; }

    public static AppCmd valueOf(int value) {
      switch (value) {
        case 0: return APP_CMD_NONE;
        case 1: return APP_CMD_RESET;
        case 2: return APP_CMD_FAC_RESET;
        case 3: return APP_CMD_DFU;
        case 10: return APP_CMD_DATA_QUERY;
        case 11: return APP_CMD_REBOOT;
        case 12: return APP_CMD_SELF_TEST;
        case 13: return APP_CMD_LONG_MUTE;
        case 14: return APP_CMD_MUTE;
        case 15: return APP_CMD_SWITCH_OPENING;
        case 16: return APP_CMD_SWITCH_CLOSING;
        case 17: return APP_CMD_VALVE_CLOSING;
        case 20: return APP_CMD_TIMING_MUTE;
        case 21: return APP_CMD_ALARM_TRIGGER;
        case 22: return APP_CMD_REMOTE_CONTROL_PAIR;
        case 23: return APP_CMD_CHANNEL_SEARCH;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AppCmd>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<AppCmd>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AppCmd>() {
            public AppCmd findValueByNumber(int number) {
              return AppCmd.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MsgNode1V1M5.getDescriptor().getEnumTypes().get(5);
    }

    private static final AppCmd[] VALUES = values();

    public static AppCmd valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private AppCmd(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:AppCmd)
  }

  /**
   * Protobuf enum {@code NodeState}
   */
  public enum NodeState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NODE_STATE_UNKNOWN = 0;</code>
     */
    NODE_STATE_UNKNOWN(0, 0),
    /**
     * <code>NODE_STATE_STATIC = 1;</code>
     */
    NODE_STATE_STATIC(1, 1),
    /**
     * <code>NODE_STATE_MOVE = 2;</code>
     */
    NODE_STATE_MOVE(2, 2),
    ;

    /**
     * <code>NODE_STATE_UNKNOWN = 0;</code>
     */
    public static final int NODE_STATE_UNKNOWN_VALUE = 0;
    /**
     * <code>NODE_STATE_STATIC = 1;</code>
     */
    public static final int NODE_STATE_STATIC_VALUE = 1;
    /**
     * <code>NODE_STATE_MOVE = 2;</code>
     */
    public static final int NODE_STATE_MOVE_VALUE = 2;


    public final int getNumber() { return value; }

    public static NodeState valueOf(int value) {
      switch (value) {
        case 0: return NODE_STATE_UNKNOWN;
        case 1: return NODE_STATE_STATIC;
        case 2: return NODE_STATE_MOVE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<NodeState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<NodeState>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<NodeState>() {
            public NodeState findValueByNumber(int number) {
              return NodeState.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MsgNode1V1M5.getDescriptor().getEnumTypes().get(6);
    }

    private static final NodeState[] VALUES = values();

    public static NodeState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private NodeState(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:NodeState)
  }

  /**
   * Protobuf enum {@code NodeAlarm}
   */
  public enum NodeAlarm
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NODE_ALARM_NONE = 0;</code>
     */
    NODE_ALARM_NONE(0, 0),
    /**
     * <code>NODE_ALARM_STATIC = 1;</code>
     */
    NODE_ALARM_STATIC(1, 1),
    /**
     * <code>NODE_ALARM_MOVE = 2;</code>
     */
    NODE_ALARM_MOVE(2, 2),
    /**
     * <code>NODE_ALARM_COLLISION = 3;</code>
     */
    NODE_ALARM_COLLISION(3, 3),
    /**
     * <code>NODE_ALARM_ROLL = 4;</code>
     */
    NODE_ALARM_ROLL(4, 4),
    /**
     * <code>NODE_ALARM_INVERTED = 5;</code>
     */
    NODE_ALARM_INVERTED(5, 5),
    /**
     * <code>NODE_ALARM_FALL = 6;</code>
     */
    NODE_ALARM_FALL(6, 6),
    ;

    /**
     * <code>NODE_ALARM_NONE = 0;</code>
     */
    public static final int NODE_ALARM_NONE_VALUE = 0;
    /**
     * <code>NODE_ALARM_STATIC = 1;</code>
     */
    public static final int NODE_ALARM_STATIC_VALUE = 1;
    /**
     * <code>NODE_ALARM_MOVE = 2;</code>
     */
    public static final int NODE_ALARM_MOVE_VALUE = 2;
    /**
     * <code>NODE_ALARM_COLLISION = 3;</code>
     */
    public static final int NODE_ALARM_COLLISION_VALUE = 3;
    /**
     * <code>NODE_ALARM_ROLL = 4;</code>
     */
    public static final int NODE_ALARM_ROLL_VALUE = 4;
    /**
     * <code>NODE_ALARM_INVERTED = 5;</code>
     */
    public static final int NODE_ALARM_INVERTED_VALUE = 5;
    /**
     * <code>NODE_ALARM_FALL = 6;</code>
     */
    public static final int NODE_ALARM_FALL_VALUE = 6;


    public final int getNumber() { return value; }

    public static NodeAlarm valueOf(int value) {
      switch (value) {
        case 0: return NODE_ALARM_NONE;
        case 1: return NODE_ALARM_STATIC;
        case 2: return NODE_ALARM_MOVE;
        case 3: return NODE_ALARM_COLLISION;
        case 4: return NODE_ALARM_ROLL;
        case 5: return NODE_ALARM_INVERTED;
        case 6: return NODE_ALARM_FALL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<NodeAlarm>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<NodeAlarm>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<NodeAlarm>() {
            public NodeAlarm findValueByNumber(int number) {
              return NodeAlarm.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MsgNode1V1M5.getDescriptor().getEnumTypes().get(7);
    }

    private static final NodeAlarm[] VALUES = values();

    public static NodeAlarm valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private NodeAlarm(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:NodeAlarm)
  }

  /**
   * Protobuf enum {@code SmokeCtrl}
   */
  public enum SmokeCtrl
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SMOKE_CTRL_NONE = 0;</code>
     */
    SMOKE_CTRL_NONE(0, 0),
    /**
     * <code>SMOKE_ERASURE = 1;</code>
     */
    SMOKE_ERASURE(1, 1),
    /**
     * <code>SMOKE_INSPECTION_TEST = 2;</code>
     */
    SMOKE_INSPECTION_TEST(2, 2),
    /**
     * <code>SMOKE_INSPECTION_OVER = 3;</code>
     */
    SMOKE_INSPECTION_OVER(3, 3),
    /**
     * <code>SMOKE_ERASURE_LONE = 4;</code>
     */
    SMOKE_ERASURE_LONE(4, 4),
    ;

    /**
     * <code>SMOKE_CTRL_NONE = 0;</code>
     */
    public static final int SMOKE_CTRL_NONE_VALUE = 0;
    /**
     * <code>SMOKE_ERASURE = 1;</code>
     */
    public static final int SMOKE_ERASURE_VALUE = 1;
    /**
     * <code>SMOKE_INSPECTION_TEST = 2;</code>
     */
    public static final int SMOKE_INSPECTION_TEST_VALUE = 2;
    /**
     * <code>SMOKE_INSPECTION_OVER = 3;</code>
     */
    public static final int SMOKE_INSPECTION_OVER_VALUE = 3;
    /**
     * <code>SMOKE_ERASURE_LONE = 4;</code>
     */
    public static final int SMOKE_ERASURE_LONE_VALUE = 4;


    public final int getNumber() { return value; }

    public static SmokeCtrl valueOf(int value) {
      switch (value) {
        case 0: return SMOKE_CTRL_NONE;
        case 1: return SMOKE_ERASURE;
        case 2: return SMOKE_INSPECTION_TEST;
        case 3: return SMOKE_INSPECTION_OVER;
        case 4: return SMOKE_ERASURE_LONE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SmokeCtrl>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SmokeCtrl>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SmokeCtrl>() {
            public SmokeCtrl findValueByNumber(int number) {
              return SmokeCtrl.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MsgNode1V1M5.getDescriptor().getEnumTypes().get(8);
    }

    private static final SmokeCtrl[] VALUES = values();

    public static SmokeCtrl valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private SmokeCtrl(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SmokeCtrl)
  }

  /**
   * Protobuf enum {@code TrackerCtrl}
   */
  public enum TrackerCtrl
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TRACKER_Ctrl = 0;</code>
     */
    TRACKER_Ctrl(0, 0),
    /**
     * <code>TRACKER_BOOT = 1;</code>
     */
    TRACKER_BOOT(1, 1),
    /**
     * <code>TRACKER_SHUTDOWN = 2;</code>
     */
    TRACKER_SHUTDOWN(2, 2),
    /**
     * <code>TRACKER_CALL_START = 3;</code>
     */
    TRACKER_CALL_START(3, 3),
    /**
     * <code>TRACKER_CALL_END = 4;</code>
     */
    TRACKER_CALL_END(4, 4),
    /**
     * <code>TRACKER_EMERGENCE_START = 5;</code>
     */
    TRACKER_EMERGENCE_START(5, 5),
    /**
     * <code>TRACKER_EMERGENCE_END = 6;</code>
     */
    TRACKER_EMERGENCE_END(6, 6),
    ;

    /**
     * <code>TRACKER_Ctrl = 0;</code>
     */
    public static final int TRACKER_Ctrl_VALUE = 0;
    /**
     * <code>TRACKER_BOOT = 1;</code>
     */
    public static final int TRACKER_BOOT_VALUE = 1;
    /**
     * <code>TRACKER_SHUTDOWN = 2;</code>
     */
    public static final int TRACKER_SHUTDOWN_VALUE = 2;
    /**
     * <code>TRACKER_CALL_START = 3;</code>
     */
    public static final int TRACKER_CALL_START_VALUE = 3;
    /**
     * <code>TRACKER_CALL_END = 4;</code>
     */
    public static final int TRACKER_CALL_END_VALUE = 4;
    /**
     * <code>TRACKER_EMERGENCE_START = 5;</code>
     */
    public static final int TRACKER_EMERGENCE_START_VALUE = 5;
    /**
     * <code>TRACKER_EMERGENCE_END = 6;</code>
     */
    public static final int TRACKER_EMERGENCE_END_VALUE = 6;


    public final int getNumber() { return value; }

    public static TrackerCtrl valueOf(int value) {
      switch (value) {
        case 0: return TRACKER_Ctrl;
        case 1: return TRACKER_BOOT;
        case 2: return TRACKER_SHUTDOWN;
        case 3: return TRACKER_CALL_START;
        case 4: return TRACKER_CALL_END;
        case 5: return TRACKER_EMERGENCE_START;
        case 6: return TRACKER_EMERGENCE_END;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TrackerCtrl>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<TrackerCtrl>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TrackerCtrl>() {
            public TrackerCtrl findValueByNumber(int number) {
              return TrackerCtrl.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MsgNode1V1M5.getDescriptor().getEnumTypes().get(9);
    }

    private static final TrackerCtrl[] VALUES = values();

    public static TrackerCtrl valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private TrackerCtrl(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:TrackerCtrl)
  }

  public interface ChannelOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint32 frequency = 1;
    /**
     * <code>required uint32 frequency = 1;</code>
     */
    boolean hasFrequency();
    /**
     * <code>required uint32 frequency = 1;</code>
     */
    int getFrequency();

    // optional uint32 rx1Frequency = 2;
    /**
     * <code>optional uint32 rx1Frequency = 2;</code>
     */
    boolean hasRx1Frequency();
    /**
     * <code>optional uint32 rx1Frequency = 2;</code>
     */
    int getRx1Frequency();
  }
  /**
   * Protobuf type {@code Channel}
   */
  public static final class Channel extends
      com.google.protobuf.GeneratedMessage
      implements ChannelOrBuilder {
    // Use Channel.newBuilder() to construct.
    private Channel(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Channel(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Channel defaultInstance;
    public static Channel getDefaultInstance() {
      return defaultInstance;
    }

    public Channel getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Channel(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              frequency_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              rx1Frequency_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_Channel_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_Channel_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Channel.class, Builder.class);
    }

    public static com.google.protobuf.Parser<Channel> PARSER =
        new com.google.protobuf.AbstractParser<Channel>() {
      public Channel parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Channel(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<Channel> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 frequency = 1;
    public static final int FREQUENCY_FIELD_NUMBER = 1;
    private int frequency_;
    /**
     * <code>required uint32 frequency = 1;</code>
     */
    public boolean hasFrequency() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 frequency = 1;</code>
     */
    public int getFrequency() {
      return frequency_;
    }

    // optional uint32 rx1Frequency = 2;
    public static final int RX1FREQUENCY_FIELD_NUMBER = 2;
    private int rx1Frequency_;
    /**
     * <code>optional uint32 rx1Frequency = 2;</code>
     */
    public boolean hasRx1Frequency() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 rx1Frequency = 2;</code>
     */
    public int getRx1Frequency() {
      return rx1Frequency_;
    }

    private void initFields() {
      frequency_ = 0;
      rx1Frequency_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasFrequency()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, frequency_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, rx1Frequency_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, frequency_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, rx1Frequency_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static Channel parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Channel parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Channel parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Channel parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Channel parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Channel parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static Channel parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static Channel parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static Channel parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Channel parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Channel prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Channel}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements ChannelOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_Channel_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_Channel_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Channel.class, Builder.class);
      }

      // Construct using MsgNode1V1M32.Channel.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        frequency_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        rx1Frequency_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_Channel_descriptor;
      }

      public Channel getDefaultInstanceForType() {
        return Channel.getDefaultInstance();
      }

      public Channel build() {
        Channel result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Channel buildPartial() {
        Channel result = new Channel(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.frequency_ = frequency_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.rx1Frequency_ = rx1Frequency_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Channel) {
          return mergeFrom((Channel)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Channel other) {
        if (other == Channel.getDefaultInstance()) return this;
        if (other.hasFrequency()) {
          setFrequency(other.getFrequency());
        }
        if (other.hasRx1Frequency()) {
          setRx1Frequency(other.getRx1Frequency());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasFrequency()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Channel parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Channel) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 frequency = 1;
      private int frequency_ ;
      /**
       * <code>required uint32 frequency = 1;</code>
       */
      public boolean hasFrequency() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 frequency = 1;</code>
       */
      public int getFrequency() {
        return frequency_;
      }
      /**
       * <code>required uint32 frequency = 1;</code>
       */
      public Builder setFrequency(int value) {
        bitField0_ |= 0x00000001;
        frequency_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 frequency = 1;</code>
       */
      public Builder clearFrequency() {
        bitField0_ = (bitField0_ & ~0x00000001);
        frequency_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 rx1Frequency = 2;
      private int rx1Frequency_ ;
      /**
       * <code>optional uint32 rx1Frequency = 2;</code>
       */
      public boolean hasRx1Frequency() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 rx1Frequency = 2;</code>
       */
      public int getRx1Frequency() {
        return rx1Frequency_;
      }
      /**
       * <code>optional uint32 rx1Frequency = 2;</code>
       */
      public Builder setRx1Frequency(int value) {
        bitField0_ |= 0x00000002;
        rx1Frequency_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rx1Frequency = 2;</code>
       */
      public Builder clearRx1Frequency() {
        bitField0_ = (bitField0_ & ~0x00000002);
        rx1Frequency_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Channel)
    }

    static {
      defaultInstance = new Channel(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Channel)
  }

  public interface LpwanParamOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional bytes devEui = 1;
    /**
     * <code>optional bytes devEui = 1;</code>
     */
    boolean hasDevEui();
    /**
     * <code>optional bytes devEui = 1;</code>
     */
    com.google.protobuf.ByteString getDevEui();

    // optional bytes appEui = 2;
    /**
     * <code>optional bytes appEui = 2;</code>
     */
    boolean hasAppEui();
    /**
     * <code>optional bytes appEui = 2;</code>
     */
    com.google.protobuf.ByteString getAppEui();

    // optional bytes appKey = 3;
    /**
     * <code>optional bytes appKey = 3;</code>
     */
    boolean hasAppKey();
    /**
     * <code>optional bytes appKey = 3;</code>
     */
    com.google.protobuf.ByteString getAppKey();

    // optional bytes appSkey = 4;
    /**
     * <code>optional bytes appSkey = 4;</code>
     */
    boolean hasAppSkey();
    /**
     * <code>optional bytes appSkey = 4;</code>
     */
    com.google.protobuf.ByteString getAppSkey();

    // optional bytes nwkSkey = 5;
    /**
     * <code>optional bytes nwkSkey = 5;</code>
     */
    boolean hasNwkSkey();
    /**
     * <code>optional bytes nwkSkey = 5;</code>
     */
    com.google.protobuf.ByteString getNwkSkey();

    // optional uint32 devAddr = 6;
    /**
     * <code>optional uint32 devAddr = 6;</code>
     */
    boolean hasDevAddr();
    /**
     * <code>optional uint32 devAddr = 6;</code>
     */
    int getDevAddr();

    // optional uint32 datarate = 7;
    /**
     * <code>optional uint32 datarate = 7;</code>
     */
    boolean hasDatarate();
    /**
     * <code>optional uint32 datarate = 7;</code>
     */
    int getDatarate();

    // optional sint32 txPower = 8;
    /**
     * <code>optional sint32 txPower = 8;</code>
     */
    boolean hasTxPower();
    /**
     * <code>optional sint32 txPower = 8;</code>
     */
    int getTxPower();

    // optional uint32 adr = 9;
    /**
     * <code>optional uint32 adr = 9;</code>
     */
    boolean hasAdr();
    /**
     * <code>optional uint32 adr = 9;</code>
     */
    int getAdr();

    // optional .Activtion activition = 10;
    /**
     * <code>optional .Activtion activition = 10;</code>
     */
    boolean hasActivition();
    /**
     * <code>optional .Activtion activition = 10;</code>
     */
    Activtion getActivition();

    // optional .ClassType classType = 11;
    /**
     * <code>optional .ClassType classType = 11;</code>
     */
    boolean hasClassType();
    /**
     * <code>optional .ClassType classType = 11;</code>
     */
    ClassType getClassType();

    // optional uint32 delay = 12;
    /**
     * <code>optional uint32 delay = 12;</code>
     */
    boolean hasDelay();
    /**
     * <code>optional uint32 delay = 12;</code>
     */
    int getDelay();

    // repeated uint32 channelMask = 13;
    /**
     * <code>repeated uint32 channelMask = 13;</code>
     */
    java.util.List<Integer> getChannelMaskList();
    /**
     * <code>repeated uint32 channelMask = 13;</code>
     */
    int getChannelMaskCount();
    /**
     * <code>repeated uint32 channelMask = 13;</code>
     */
    int getChannelMask(int index);

    // optional uint32 maxEIRP = 14;
    /**
     * <code>optional uint32 maxEIRP = 14;</code>
     */
    boolean hasMaxEIRP();
    /**
     * <code>optional uint32 maxEIRP = 14;</code>
     */
    int getMaxEIRP();

    // optional uint32 sglStatus = 15;
    /**
     * <code>optional uint32 sglStatus = 15;</code>
     */
    boolean hasSglStatus();
    /**
     * <code>optional uint32 sglStatus = 15;</code>
     */
    int getSglStatus();

    // optional uint32 sglFrequency = 16;
    /**
     * <code>optional uint32 sglFrequency = 16;</code>
     */
    boolean hasSglFrequency();
    /**
     * <code>optional uint32 sglFrequency = 16;</code>
     */
    int getSglFrequency();

    // optional uint32 sglDatarate = 17;
    /**
     * <code>optional uint32 sglDatarate = 17;</code>
     */
    boolean hasSglDatarate();
    /**
     * <code>optional uint32 sglDatarate = 17;</code>
     */
    int getSglDatarate();

    // optional uint32 lbtStatus = 18;
    /**
     * <code>optional uint32 lbtStatus = 18;</code>
     */
    boolean hasLbtStatus();
    /**
     * <code>optional uint32 lbtStatus = 18;</code>
     */
    int getLbtStatus();

    // optional sint32 lbtThreshold = 19;
    /**
     * <code>optional sint32 lbtThreshold = 19;</code>
     */
    boolean hasLbtThreshold();
    /**
     * <code>optional sint32 lbtThreshold = 19;</code>
     */
    int getLbtThreshold();

    // repeated .Channel channels = 20;
    /**
     * <code>repeated .Channel channels = 20;</code>
     */
    java.util.List<Channel>
        getChannelsList();
    /**
     * <code>repeated .Channel channels = 20;</code>
     */
    Channel getChannels(int index);
    /**
     * <code>repeated .Channel channels = 20;</code>
     */
    int getChannelsCount();
    /**
     * <code>repeated .Channel channels = 20;</code>
     */
    java.util.List<? extends ChannelOrBuilder>
        getChannelsOrBuilderList();
    /**
     * <code>repeated .Channel channels = 20;</code>
     */
    ChannelOrBuilder getChannelsOrBuilder(
            int index);

    // optional uint32 rx2Frequency = 21;
    /**
     * <code>optional uint32 rx2Frequency = 21;</code>
     */
    boolean hasRx2Frequency();
    /**
     * <code>optional uint32 rx2Frequency = 21;</code>
     */
    int getRx2Frequency();

    // optional uint32 rx2Datarate = 22;
    /**
     * <code>optional uint32 rx2Datarate = 22;</code>
     */
    boolean hasRx2Datarate();
    /**
     * <code>optional uint32 rx2Datarate = 22;</code>
     */
    int getRx2Datarate();
  }
  /**
   * Protobuf type {@code LpwanParam}
   */
  public static final class LpwanParam extends
      com.google.protobuf.GeneratedMessage
      implements LpwanParamOrBuilder {
    // Use LpwanParam.newBuilder() to construct.
    private LpwanParam(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LpwanParam(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LpwanParam defaultInstance;
    public static LpwanParam getDefaultInstance() {
      return defaultInstance;
    }

    public LpwanParam getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LpwanParam(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              devEui_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              appEui_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              appKey_ = input.readBytes();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              appSkey_ = input.readBytes();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              nwkSkey_ = input.readBytes();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              devAddr_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              datarate_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              txPower_ = input.readSInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              adr_ = input.readUInt32();
              break;
            }
            case 80: {
              int rawValue = input.readEnum();
              Activtion value = Activtion.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(10, rawValue);
              } else {
                bitField0_ |= 0x00000200;
                activition_ = value;
              }
              break;
            }
            case 88: {
              int rawValue = input.readEnum();
              ClassType value = ClassType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(11, rawValue);
              } else {
                bitField0_ |= 0x00000400;
                classType_ = value;
              }
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              delay_ = input.readUInt32();
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                channelMask_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              channelMask_.add(input.readUInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                channelMask_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                channelMask_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              bitField0_ |= 0x00001000;
              maxEIRP_ = input.readUInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00002000;
              sglStatus_ = input.readUInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00004000;
              sglFrequency_ = input.readUInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00008000;
              sglDatarate_ = input.readUInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00010000;
              lbtStatus_ = input.readUInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00020000;
              lbtThreshold_ = input.readSInt32();
              break;
            }
            case 162: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                channels_ = new java.util.ArrayList<Channel>();
                mutable_bitField0_ |= 0x00080000;
              }
              channels_.add(input.readMessage(Channel.PARSER, extensionRegistry));
              break;
            }
            case 168: {
              bitField0_ |= 0x00040000;
              rx2Frequency_ = input.readUInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00080000;
              rx2Datarate_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          channelMask_ = java.util.Collections.unmodifiableList(channelMask_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          channels_ = java.util.Collections.unmodifiableList(channels_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_LpwanParam_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_LpwanParam_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              LpwanParam.class, Builder.class);
    }

    public static com.google.protobuf.Parser<LpwanParam> PARSER =
        new com.google.protobuf.AbstractParser<LpwanParam>() {
      public LpwanParam parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LpwanParam(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<LpwanParam> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional bytes devEui = 1;
    public static final int DEVEUI_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString devEui_;
    /**
     * <code>optional bytes devEui = 1;</code>
     */
    public boolean hasDevEui() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bytes devEui = 1;</code>
     */
    public com.google.protobuf.ByteString getDevEui() {
      return devEui_;
    }

    // optional bytes appEui = 2;
    public static final int APPEUI_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString appEui_;
    /**
     * <code>optional bytes appEui = 2;</code>
     */
    public boolean hasAppEui() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bytes appEui = 2;</code>
     */
    public com.google.protobuf.ByteString getAppEui() {
      return appEui_;
    }

    // optional bytes appKey = 3;
    public static final int APPKEY_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString appKey_;
    /**
     * <code>optional bytes appKey = 3;</code>
     */
    public boolean hasAppKey() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bytes appKey = 3;</code>
     */
    public com.google.protobuf.ByteString getAppKey() {
      return appKey_;
    }

    // optional bytes appSkey = 4;
    public static final int APPSKEY_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString appSkey_;
    /**
     * <code>optional bytes appSkey = 4;</code>
     */
    public boolean hasAppSkey() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bytes appSkey = 4;</code>
     */
    public com.google.protobuf.ByteString getAppSkey() {
      return appSkey_;
    }

    // optional bytes nwkSkey = 5;
    public static final int NWKSKEY_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString nwkSkey_;
    /**
     * <code>optional bytes nwkSkey = 5;</code>
     */
    public boolean hasNwkSkey() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bytes nwkSkey = 5;</code>
     */
    public com.google.protobuf.ByteString getNwkSkey() {
      return nwkSkey_;
    }

    // optional uint32 devAddr = 6;
    public static final int DEVADDR_FIELD_NUMBER = 6;
    private int devAddr_;
    /**
     * <code>optional uint32 devAddr = 6;</code>
     */
    public boolean hasDevAddr() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 devAddr = 6;</code>
     */
    public int getDevAddr() {
      return devAddr_;
    }

    // optional uint32 datarate = 7;
    public static final int DATARATE_FIELD_NUMBER = 7;
    private int datarate_;
    /**
     * <code>optional uint32 datarate = 7;</code>
     */
    public boolean hasDatarate() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 datarate = 7;</code>
     */
    public int getDatarate() {
      return datarate_;
    }

    // optional sint32 txPower = 8;
    public static final int TXPOWER_FIELD_NUMBER = 8;
    private int txPower_;
    /**
     * <code>optional sint32 txPower = 8;</code>
     */
    public boolean hasTxPower() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional sint32 txPower = 8;</code>
     */
    public int getTxPower() {
      return txPower_;
    }

    // optional uint32 adr = 9;
    public static final int ADR_FIELD_NUMBER = 9;
    private int adr_;
    /**
     * <code>optional uint32 adr = 9;</code>
     */
    public boolean hasAdr() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 adr = 9;</code>
     */
    public int getAdr() {
      return adr_;
    }

    // optional .Activtion activition = 10;
    public static final int ACTIVITION_FIELD_NUMBER = 10;
    private Activtion activition_;
    /**
     * <code>optional .Activtion activition = 10;</code>
     */
    public boolean hasActivition() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .Activtion activition = 10;</code>
     */
    public Activtion getActivition() {
      return activition_;
    }

    // optional .ClassType classType = 11;
    public static final int CLASSTYPE_FIELD_NUMBER = 11;
    private ClassType classType_;
    /**
     * <code>optional .ClassType classType = 11;</code>
     */
    public boolean hasClassType() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .ClassType classType = 11;</code>
     */
    public ClassType getClassType() {
      return classType_;
    }

    // optional uint32 delay = 12;
    public static final int DELAY_FIELD_NUMBER = 12;
    private int delay_;
    /**
     * <code>optional uint32 delay = 12;</code>
     */
    public boolean hasDelay() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 delay = 12;</code>
     */
    public int getDelay() {
      return delay_;
    }

    // repeated uint32 channelMask = 13;
    public static final int CHANNELMASK_FIELD_NUMBER = 13;
    private java.util.List<Integer> channelMask_;
    /**
     * <code>repeated uint32 channelMask = 13;</code>
     */
    public java.util.List<Integer>
        getChannelMaskList() {
      return channelMask_;
    }
    /**
     * <code>repeated uint32 channelMask = 13;</code>
     */
    public int getChannelMaskCount() {
      return channelMask_.size();
    }
    /**
     * <code>repeated uint32 channelMask = 13;</code>
     */
    public int getChannelMask(int index) {
      return channelMask_.get(index);
    }

    // optional uint32 maxEIRP = 14;
    public static final int MAXEIRP_FIELD_NUMBER = 14;
    private int maxEIRP_;
    /**
     * <code>optional uint32 maxEIRP = 14;</code>
     */
    public boolean hasMaxEIRP() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint32 maxEIRP = 14;</code>
     */
    public int getMaxEIRP() {
      return maxEIRP_;
    }

    // optional uint32 sglStatus = 15;
    public static final int SGLSTATUS_FIELD_NUMBER = 15;
    private int sglStatus_;
    /**
     * <code>optional uint32 sglStatus = 15;</code>
     */
    public boolean hasSglStatus() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional uint32 sglStatus = 15;</code>
     */
    public int getSglStatus() {
      return sglStatus_;
    }

    // optional uint32 sglFrequency = 16;
    public static final int SGLFREQUENCY_FIELD_NUMBER = 16;
    private int sglFrequency_;
    /**
     * <code>optional uint32 sglFrequency = 16;</code>
     */
    public boolean hasSglFrequency() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional uint32 sglFrequency = 16;</code>
     */
    public int getSglFrequency() {
      return sglFrequency_;
    }

    // optional uint32 sglDatarate = 17;
    public static final int SGLDATARATE_FIELD_NUMBER = 17;
    private int sglDatarate_;
    /**
     * <code>optional uint32 sglDatarate = 17;</code>
     */
    public boolean hasSglDatarate() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional uint32 sglDatarate = 17;</code>
     */
    public int getSglDatarate() {
      return sglDatarate_;
    }

    // optional uint32 lbtStatus = 18;
    public static final int LBTSTATUS_FIELD_NUMBER = 18;
    private int lbtStatus_;
    /**
     * <code>optional uint32 lbtStatus = 18;</code>
     */
    public boolean hasLbtStatus() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional uint32 lbtStatus = 18;</code>
     */
    public int getLbtStatus() {
      return lbtStatus_;
    }

    // optional sint32 lbtThreshold = 19;
    public static final int LBTTHRESHOLD_FIELD_NUMBER = 19;
    private int lbtThreshold_;
    /**
     * <code>optional sint32 lbtThreshold = 19;</code>
     */
    public boolean hasLbtThreshold() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional sint32 lbtThreshold = 19;</code>
     */
    public int getLbtThreshold() {
      return lbtThreshold_;
    }

    // repeated .Channel channels = 20;
    public static final int CHANNELS_FIELD_NUMBER = 20;
    private java.util.List<Channel> channels_;
    /**
     * <code>repeated .Channel channels = 20;</code>
     */
    public java.util.List<Channel> getChannelsList() {
      return channels_;
    }
    /**
     * <code>repeated .Channel channels = 20;</code>
     */
    public java.util.List<? extends ChannelOrBuilder>
        getChannelsOrBuilderList() {
      return channels_;
    }
    /**
     * <code>repeated .Channel channels = 20;</code>
     */
    public int getChannelsCount() {
      return channels_.size();
    }
    /**
     * <code>repeated .Channel channels = 20;</code>
     */
    public Channel getChannels(int index) {
      return channels_.get(index);
    }
    /**
     * <code>repeated .Channel channels = 20;</code>
     */
    public ChannelOrBuilder getChannelsOrBuilder(
        int index) {
      return channels_.get(index);
    }

    // optional uint32 rx2Frequency = 21;
    public static final int RX2FREQUENCY_FIELD_NUMBER = 21;
    private int rx2Frequency_;
    /**
     * <code>optional uint32 rx2Frequency = 21;</code>
     */
    public boolean hasRx2Frequency() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional uint32 rx2Frequency = 21;</code>
     */
    public int getRx2Frequency() {
      return rx2Frequency_;
    }

    // optional uint32 rx2Datarate = 22;
    public static final int RX2DATARATE_FIELD_NUMBER = 22;
    private int rx2Datarate_;
    /**
     * <code>optional uint32 rx2Datarate = 22;</code>
     */
    public boolean hasRx2Datarate() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional uint32 rx2Datarate = 22;</code>
     */
    public int getRx2Datarate() {
      return rx2Datarate_;
    }

    private void initFields() {
      devEui_ = com.google.protobuf.ByteString.EMPTY;
      appEui_ = com.google.protobuf.ByteString.EMPTY;
      appKey_ = com.google.protobuf.ByteString.EMPTY;
      appSkey_ = com.google.protobuf.ByteString.EMPTY;
      nwkSkey_ = com.google.protobuf.ByteString.EMPTY;
      devAddr_ = 0;
      datarate_ = 0;
      txPower_ = 0;
      adr_ = 0;
      activition_ = Activtion.ABP;
      classType_ = ClassType.CLASS_A;
      delay_ = 0;
      channelMask_ = java.util.Collections.emptyList();
      maxEIRP_ = 0;
      sglStatus_ = 0;
      sglFrequency_ = 0;
      sglDatarate_ = 0;
      lbtStatus_ = 0;
      lbtThreshold_ = 0;
      channels_ = java.util.Collections.emptyList();
      rx2Frequency_ = 0;
      rx2Datarate_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getChannelsCount(); i++) {
        if (!getChannels(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, devEui_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, appEui_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, appKey_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, appSkey_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, nwkSkey_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, devAddr_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, datarate_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeSInt32(8, txPower_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, adr_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeEnum(10, activition_.getNumber());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeEnum(11, classType_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(12, delay_);
      }
      for (int i = 0; i < channelMask_.size(); i++) {
        output.writeUInt32(13, channelMask_.get(i));
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(14, maxEIRP_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeUInt32(15, sglStatus_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeUInt32(16, sglFrequency_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeUInt32(17, sglDatarate_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeUInt32(18, lbtStatus_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeSInt32(19, lbtThreshold_);
      }
      for (int i = 0; i < channels_.size(); i++) {
        output.writeMessage(20, channels_.get(i));
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeUInt32(21, rx2Frequency_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeUInt32(22, rx2Datarate_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, devEui_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, appEui_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, appKey_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, appSkey_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, nwkSkey_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, devAddr_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, datarate_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(8, txPower_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, adr_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(10, activition_.getNumber());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(11, classType_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, delay_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < channelMask_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(channelMask_.get(i));
        }
        size += dataSize;
        size += 1 * getChannelMaskList().size();
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(14, maxEIRP_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(15, sglStatus_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(16, sglFrequency_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(17, sglDatarate_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(18, lbtStatus_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(19, lbtThreshold_);
      }
      for (int i = 0; i < channels_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, channels_.get(i));
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(21, rx2Frequency_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(22, rx2Datarate_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static LpwanParam parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static LpwanParam parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static LpwanParam parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static LpwanParam parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static LpwanParam parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static LpwanParam parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static LpwanParam parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static LpwanParam parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static LpwanParam parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static LpwanParam parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(LpwanParam prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code LpwanParam}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements LpwanParamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_LpwanParam_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_LpwanParam_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                LpwanParam.class, Builder.class);
      }

      // Construct using MsgNode1V1M32.LpwanParam.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getChannelsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        devEui_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        appEui_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        appKey_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        appSkey_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        nwkSkey_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        devAddr_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        datarate_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        txPower_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        adr_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        activition_ = Activtion.ABP;
        bitField0_ = (bitField0_ & ~0x00000200);
        classType_ = ClassType.CLASS_A;
        bitField0_ = (bitField0_ & ~0x00000400);
        delay_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        channelMask_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        maxEIRP_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        sglStatus_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        sglFrequency_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        sglDatarate_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        lbtStatus_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        lbtThreshold_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        if (channelsBuilder_ == null) {
          channels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00080000);
        } else {
          channelsBuilder_.clear();
        }
        rx2Frequency_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        rx2Datarate_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_LpwanParam_descriptor;
      }

      public LpwanParam getDefaultInstanceForType() {
        return LpwanParam.getDefaultInstance();
      }

      public LpwanParam build() {
        LpwanParam result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public LpwanParam buildPartial() {
        LpwanParam result = new LpwanParam(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.devEui_ = devEui_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.appEui_ = appEui_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.appKey_ = appKey_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.appSkey_ = appSkey_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.nwkSkey_ = nwkSkey_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.devAddr_ = devAddr_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.datarate_ = datarate_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.txPower_ = txPower_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.adr_ = adr_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.activition_ = activition_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.classType_ = classType_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.delay_ = delay_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          channelMask_ = java.util.Collections.unmodifiableList(channelMask_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.channelMask_ = channelMask_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.maxEIRP_ = maxEIRP_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.sglStatus_ = sglStatus_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.sglFrequency_ = sglFrequency_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.sglDatarate_ = sglDatarate_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.lbtStatus_ = lbtStatus_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.lbtThreshold_ = lbtThreshold_;
        if (channelsBuilder_ == null) {
          if (((bitField0_ & 0x00080000) == 0x00080000)) {
            channels_ = java.util.Collections.unmodifiableList(channels_);
            bitField0_ = (bitField0_ & ~0x00080000);
          }
          result.channels_ = channels_;
        } else {
          result.channels_ = channelsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.rx2Frequency_ = rx2Frequency_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.rx2Datarate_ = rx2Datarate_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof LpwanParam) {
          return mergeFrom((LpwanParam)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(LpwanParam other) {
        if (other == LpwanParam.getDefaultInstance()) return this;
        if (other.hasDevEui()) {
          setDevEui(other.getDevEui());
        }
        if (other.hasAppEui()) {
          setAppEui(other.getAppEui());
        }
        if (other.hasAppKey()) {
          setAppKey(other.getAppKey());
        }
        if (other.hasAppSkey()) {
          setAppSkey(other.getAppSkey());
        }
        if (other.hasNwkSkey()) {
          setNwkSkey(other.getNwkSkey());
        }
        if (other.hasDevAddr()) {
          setDevAddr(other.getDevAddr());
        }
        if (other.hasDatarate()) {
          setDatarate(other.getDatarate());
        }
        if (other.hasTxPower()) {
          setTxPower(other.getTxPower());
        }
        if (other.hasAdr()) {
          setAdr(other.getAdr());
        }
        if (other.hasActivition()) {
          setActivition(other.getActivition());
        }
        if (other.hasClassType()) {
          setClassType(other.getClassType());
        }
        if (other.hasDelay()) {
          setDelay(other.getDelay());
        }
        if (!other.channelMask_.isEmpty()) {
          if (channelMask_.isEmpty()) {
            channelMask_ = other.channelMask_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureChannelMaskIsMutable();
            channelMask_.addAll(other.channelMask_);
          }
          onChanged();
        }
        if (other.hasMaxEIRP()) {
          setMaxEIRP(other.getMaxEIRP());
        }
        if (other.hasSglStatus()) {
          setSglStatus(other.getSglStatus());
        }
        if (other.hasSglFrequency()) {
          setSglFrequency(other.getSglFrequency());
        }
        if (other.hasSglDatarate()) {
          setSglDatarate(other.getSglDatarate());
        }
        if (other.hasLbtStatus()) {
          setLbtStatus(other.getLbtStatus());
        }
        if (other.hasLbtThreshold()) {
          setLbtThreshold(other.getLbtThreshold());
        }
        if (channelsBuilder_ == null) {
          if (!other.channels_.isEmpty()) {
            if (channels_.isEmpty()) {
              channels_ = other.channels_;
              bitField0_ = (bitField0_ & ~0x00080000);
            } else {
              ensureChannelsIsMutable();
              channels_.addAll(other.channels_);
            }
            onChanged();
          }
        } else {
          if (!other.channels_.isEmpty()) {
            if (channelsBuilder_.isEmpty()) {
              channelsBuilder_.dispose();
              channelsBuilder_ = null;
              channels_ = other.channels_;
              bitField0_ = (bitField0_ & ~0x00080000);
              channelsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getChannelsFieldBuilder() : null;
            } else {
              channelsBuilder_.addAllMessages(other.channels_);
            }
          }
        }
        if (other.hasRx2Frequency()) {
          setRx2Frequency(other.getRx2Frequency());
        }
        if (other.hasRx2Datarate()) {
          setRx2Datarate(other.getRx2Datarate());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getChannelsCount(); i++) {
          if (!getChannels(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        LpwanParam parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (LpwanParam) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bytes devEui = 1;
      private com.google.protobuf.ByteString devEui_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes devEui = 1;</code>
       */
      public boolean hasDevEui() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bytes devEui = 1;</code>
       */
      public com.google.protobuf.ByteString getDevEui() {
        return devEui_;
      }
      /**
       * <code>optional bytes devEui = 1;</code>
       */
      public Builder setDevEui(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        devEui_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes devEui = 1;</code>
       */
      public Builder clearDevEui() {
        bitField0_ = (bitField0_ & ~0x00000001);
        devEui_ = getDefaultInstance().getDevEui();
        onChanged();
        return this;
      }

      // optional bytes appEui = 2;
      private com.google.protobuf.ByteString appEui_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes appEui = 2;</code>
       */
      public boolean hasAppEui() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bytes appEui = 2;</code>
       */
      public com.google.protobuf.ByteString getAppEui() {
        return appEui_;
      }
      /**
       * <code>optional bytes appEui = 2;</code>
       */
      public Builder setAppEui(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        appEui_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes appEui = 2;</code>
       */
      public Builder clearAppEui() {
        bitField0_ = (bitField0_ & ~0x00000002);
        appEui_ = getDefaultInstance().getAppEui();
        onChanged();
        return this;
      }

      // optional bytes appKey = 3;
      private com.google.protobuf.ByteString appKey_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes appKey = 3;</code>
       */
      public boolean hasAppKey() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bytes appKey = 3;</code>
       */
      public com.google.protobuf.ByteString getAppKey() {
        return appKey_;
      }
      /**
       * <code>optional bytes appKey = 3;</code>
       */
      public Builder setAppKey(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        appKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes appKey = 3;</code>
       */
      public Builder clearAppKey() {
        bitField0_ = (bitField0_ & ~0x00000004);
        appKey_ = getDefaultInstance().getAppKey();
        onChanged();
        return this;
      }

      // optional bytes appSkey = 4;
      private com.google.protobuf.ByteString appSkey_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes appSkey = 4;</code>
       */
      public boolean hasAppSkey() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bytes appSkey = 4;</code>
       */
      public com.google.protobuf.ByteString getAppSkey() {
        return appSkey_;
      }
      /**
       * <code>optional bytes appSkey = 4;</code>
       */
      public Builder setAppSkey(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        appSkey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes appSkey = 4;</code>
       */
      public Builder clearAppSkey() {
        bitField0_ = (bitField0_ & ~0x00000008);
        appSkey_ = getDefaultInstance().getAppSkey();
        onChanged();
        return this;
      }

      // optional bytes nwkSkey = 5;
      private com.google.protobuf.ByteString nwkSkey_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes nwkSkey = 5;</code>
       */
      public boolean hasNwkSkey() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bytes nwkSkey = 5;</code>
       */
      public com.google.protobuf.ByteString getNwkSkey() {
        return nwkSkey_;
      }
      /**
       * <code>optional bytes nwkSkey = 5;</code>
       */
      public Builder setNwkSkey(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        nwkSkey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes nwkSkey = 5;</code>
       */
      public Builder clearNwkSkey() {
        bitField0_ = (bitField0_ & ~0x00000010);
        nwkSkey_ = getDefaultInstance().getNwkSkey();
        onChanged();
        return this;
      }

      // optional uint32 devAddr = 6;
      private int devAddr_ ;
      /**
       * <code>optional uint32 devAddr = 6;</code>
       */
      public boolean hasDevAddr() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 devAddr = 6;</code>
       */
      public int getDevAddr() {
        return devAddr_;
      }
      /**
       * <code>optional uint32 devAddr = 6;</code>
       */
      public Builder setDevAddr(int value) {
        bitField0_ |= 0x00000020;
        devAddr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 devAddr = 6;</code>
       */
      public Builder clearDevAddr() {
        bitField0_ = (bitField0_ & ~0x00000020);
        devAddr_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 datarate = 7;
      private int datarate_ ;
      /**
       * <code>optional uint32 datarate = 7;</code>
       */
      public boolean hasDatarate() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 datarate = 7;</code>
       */
      public int getDatarate() {
        return datarate_;
      }
      /**
       * <code>optional uint32 datarate = 7;</code>
       */
      public Builder setDatarate(int value) {
        bitField0_ |= 0x00000040;
        datarate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 datarate = 7;</code>
       */
      public Builder clearDatarate() {
        bitField0_ = (bitField0_ & ~0x00000040);
        datarate_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 txPower = 8;
      private int txPower_ ;
      /**
       * <code>optional sint32 txPower = 8;</code>
       */
      public boolean hasTxPower() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional sint32 txPower = 8;</code>
       */
      public int getTxPower() {
        return txPower_;
      }
      /**
       * <code>optional sint32 txPower = 8;</code>
       */
      public Builder setTxPower(int value) {
        bitField0_ |= 0x00000080;
        txPower_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 txPower = 8;</code>
       */
      public Builder clearTxPower() {
        bitField0_ = (bitField0_ & ~0x00000080);
        txPower_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 adr = 9;
      private int adr_ ;
      /**
       * <code>optional uint32 adr = 9;</code>
       */
      public boolean hasAdr() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 adr = 9;</code>
       */
      public int getAdr() {
        return adr_;
      }
      /**
       * <code>optional uint32 adr = 9;</code>
       */
      public Builder setAdr(int value) {
        bitField0_ |= 0x00000100;
        adr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 adr = 9;</code>
       */
      public Builder clearAdr() {
        bitField0_ = (bitField0_ & ~0x00000100);
        adr_ = 0;
        onChanged();
        return this;
      }

      // optional .Activtion activition = 10;
      private Activtion activition_ = Activtion.ABP;
      /**
       * <code>optional .Activtion activition = 10;</code>
       */
      public boolean hasActivition() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .Activtion activition = 10;</code>
       */
      public Activtion getActivition() {
        return activition_;
      }
      /**
       * <code>optional .Activtion activition = 10;</code>
       */
      public Builder setActivition(Activtion value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000200;
        activition_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .Activtion activition = 10;</code>
       */
      public Builder clearActivition() {
        bitField0_ = (bitField0_ & ~0x00000200);
        activition_ = Activtion.ABP;
        onChanged();
        return this;
      }

      // optional .ClassType classType = 11;
      private ClassType classType_ = ClassType.CLASS_A;
      /**
       * <code>optional .ClassType classType = 11;</code>
       */
      public boolean hasClassType() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .ClassType classType = 11;</code>
       */
      public ClassType getClassType() {
        return classType_;
      }
      /**
       * <code>optional .ClassType classType = 11;</code>
       */
      public Builder setClassType(ClassType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000400;
        classType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .ClassType classType = 11;</code>
       */
      public Builder clearClassType() {
        bitField0_ = (bitField0_ & ~0x00000400);
        classType_ = ClassType.CLASS_A;
        onChanged();
        return this;
      }

      // optional uint32 delay = 12;
      private int delay_ ;
      /**
       * <code>optional uint32 delay = 12;</code>
       */
      public boolean hasDelay() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 delay = 12;</code>
       */
      public int getDelay() {
        return delay_;
      }
      /**
       * <code>optional uint32 delay = 12;</code>
       */
      public Builder setDelay(int value) {
        bitField0_ |= 0x00000800;
        delay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 delay = 12;</code>
       */
      public Builder clearDelay() {
        bitField0_ = (bitField0_ & ~0x00000800);
        delay_ = 0;
        onChanged();
        return this;
      }

      // repeated uint32 channelMask = 13;
      private java.util.List<Integer> channelMask_ = java.util.Collections.emptyList();
      private void ensureChannelMaskIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          channelMask_ = new java.util.ArrayList<Integer>(channelMask_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated uint32 channelMask = 13;</code>
       */
      public java.util.List<Integer>
          getChannelMaskList() {
        return java.util.Collections.unmodifiableList(channelMask_);
      }
      /**
       * <code>repeated uint32 channelMask = 13;</code>
       */
      public int getChannelMaskCount() {
        return channelMask_.size();
      }
      /**
       * <code>repeated uint32 channelMask = 13;</code>
       */
      public int getChannelMask(int index) {
        return channelMask_.get(index);
      }
      /**
       * <code>repeated uint32 channelMask = 13;</code>
       */
      public Builder setChannelMask(
          int index, int value) {
        ensureChannelMaskIsMutable();
        channelMask_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 channelMask = 13;</code>
       */
      public Builder addChannelMask(int value) {
        ensureChannelMaskIsMutable();
        channelMask_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 channelMask = 13;</code>
       */
      public Builder addAllChannelMask(
          Iterable<? extends Integer> values) {
        ensureChannelMaskIsMutable();
        super.addAll(values, channelMask_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 channelMask = 13;</code>
       */
      public Builder clearChannelMask() {
        channelMask_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // optional uint32 maxEIRP = 14;
      private int maxEIRP_ ;
      /**
       * <code>optional uint32 maxEIRP = 14;</code>
       */
      public boolean hasMaxEIRP() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional uint32 maxEIRP = 14;</code>
       */
      public int getMaxEIRP() {
        return maxEIRP_;
      }
      /**
       * <code>optional uint32 maxEIRP = 14;</code>
       */
      public Builder setMaxEIRP(int value) {
        bitField0_ |= 0x00002000;
        maxEIRP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxEIRP = 14;</code>
       */
      public Builder clearMaxEIRP() {
        bitField0_ = (bitField0_ & ~0x00002000);
        maxEIRP_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 sglStatus = 15;
      private int sglStatus_ ;
      /**
       * <code>optional uint32 sglStatus = 15;</code>
       */
      public boolean hasSglStatus() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional uint32 sglStatus = 15;</code>
       */
      public int getSglStatus() {
        return sglStatus_;
      }
      /**
       * <code>optional uint32 sglStatus = 15;</code>
       */
      public Builder setSglStatus(int value) {
        bitField0_ |= 0x00004000;
        sglStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 sglStatus = 15;</code>
       */
      public Builder clearSglStatus() {
        bitField0_ = (bitField0_ & ~0x00004000);
        sglStatus_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 sglFrequency = 16;
      private int sglFrequency_ ;
      /**
       * <code>optional uint32 sglFrequency = 16;</code>
       */
      public boolean hasSglFrequency() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional uint32 sglFrequency = 16;</code>
       */
      public int getSglFrequency() {
        return sglFrequency_;
      }
      /**
       * <code>optional uint32 sglFrequency = 16;</code>
       */
      public Builder setSglFrequency(int value) {
        bitField0_ |= 0x00008000;
        sglFrequency_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 sglFrequency = 16;</code>
       */
      public Builder clearSglFrequency() {
        bitField0_ = (bitField0_ & ~0x00008000);
        sglFrequency_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 sglDatarate = 17;
      private int sglDatarate_ ;
      /**
       * <code>optional uint32 sglDatarate = 17;</code>
       */
      public boolean hasSglDatarate() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional uint32 sglDatarate = 17;</code>
       */
      public int getSglDatarate() {
        return sglDatarate_;
      }
      /**
       * <code>optional uint32 sglDatarate = 17;</code>
       */
      public Builder setSglDatarate(int value) {
        bitField0_ |= 0x00010000;
        sglDatarate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 sglDatarate = 17;</code>
       */
      public Builder clearSglDatarate() {
        bitField0_ = (bitField0_ & ~0x00010000);
        sglDatarate_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 lbtStatus = 18;
      private int lbtStatus_ ;
      /**
       * <code>optional uint32 lbtStatus = 18;</code>
       */
      public boolean hasLbtStatus() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional uint32 lbtStatus = 18;</code>
       */
      public int getLbtStatus() {
        return lbtStatus_;
      }
      /**
       * <code>optional uint32 lbtStatus = 18;</code>
       */
      public Builder setLbtStatus(int value) {
        bitField0_ |= 0x00020000;
        lbtStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 lbtStatus = 18;</code>
       */
      public Builder clearLbtStatus() {
        bitField0_ = (bitField0_ & ~0x00020000);
        lbtStatus_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 lbtThreshold = 19;
      private int lbtThreshold_ ;
      /**
       * <code>optional sint32 lbtThreshold = 19;</code>
       */
      public boolean hasLbtThreshold() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional sint32 lbtThreshold = 19;</code>
       */
      public int getLbtThreshold() {
        return lbtThreshold_;
      }
      /**
       * <code>optional sint32 lbtThreshold = 19;</code>
       */
      public Builder setLbtThreshold(int value) {
        bitField0_ |= 0x00040000;
        lbtThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 lbtThreshold = 19;</code>
       */
      public Builder clearLbtThreshold() {
        bitField0_ = (bitField0_ & ~0x00040000);
        lbtThreshold_ = 0;
        onChanged();
        return this;
      }

      // repeated .Channel channels = 20;
      private java.util.List<Channel> channels_ =
        java.util.Collections.emptyList();
      private void ensureChannelsIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          channels_ = new java.util.ArrayList<Channel>(channels_);
          bitField0_ |= 0x00080000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          Channel, Channel.Builder, ChannelOrBuilder> channelsBuilder_;

      /**
       * <code>repeated .Channel channels = 20;</code>
       */
      public java.util.List<Channel> getChannelsList() {
        if (channelsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(channels_);
        } else {
          return channelsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Channel channels = 20;</code>
       */
      public int getChannelsCount() {
        if (channelsBuilder_ == null) {
          return channels_.size();
        } else {
          return channelsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Channel channels = 20;</code>
       */
      public Channel getChannels(int index) {
        if (channelsBuilder_ == null) {
          return channels_.get(index);
        } else {
          return channelsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Channel channels = 20;</code>
       */
      public Builder setChannels(
          int index, Channel value) {
        if (channelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChannelsIsMutable();
          channels_.set(index, value);
          onChanged();
        } else {
          channelsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Channel channels = 20;</code>
       */
      public Builder setChannels(
          int index, Channel.Builder builderForValue) {
        if (channelsBuilder_ == null) {
          ensureChannelsIsMutable();
          channels_.set(index, builderForValue.build());
          onChanged();
        } else {
          channelsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Channel channels = 20;</code>
       */
      public Builder addChannels(Channel value) {
        if (channelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChannelsIsMutable();
          channels_.add(value);
          onChanged();
        } else {
          channelsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Channel channels = 20;</code>
       */
      public Builder addChannels(
          int index, Channel value) {
        if (channelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChannelsIsMutable();
          channels_.add(index, value);
          onChanged();
        } else {
          channelsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Channel channels = 20;</code>
       */
      public Builder addChannels(
          Channel.Builder builderForValue) {
        if (channelsBuilder_ == null) {
          ensureChannelsIsMutable();
          channels_.add(builderForValue.build());
          onChanged();
        } else {
          channelsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Channel channels = 20;</code>
       */
      public Builder addChannels(
          int index, Channel.Builder builderForValue) {
        if (channelsBuilder_ == null) {
          ensureChannelsIsMutable();
          channels_.add(index, builderForValue.build());
          onChanged();
        } else {
          channelsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Channel channels = 20;</code>
       */
      public Builder addAllChannels(
          Iterable<? extends Channel> values) {
        if (channelsBuilder_ == null) {
          ensureChannelsIsMutable();
          super.addAll(values, channels_);
          onChanged();
        } else {
          channelsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Channel channels = 20;</code>
       */
      public Builder clearChannels() {
        if (channelsBuilder_ == null) {
          channels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00080000);
          onChanged();
        } else {
          channelsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Channel channels = 20;</code>
       */
      public Builder removeChannels(int index) {
        if (channelsBuilder_ == null) {
          ensureChannelsIsMutable();
          channels_.remove(index);
          onChanged();
        } else {
          channelsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Channel channels = 20;</code>
       */
      public Channel.Builder getChannelsBuilder(
          int index) {
        return getChannelsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Channel channels = 20;</code>
       */
      public ChannelOrBuilder getChannelsOrBuilder(
          int index) {
        if (channelsBuilder_ == null) {
          return channels_.get(index);  } else {
          return channelsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Channel channels = 20;</code>
       */
      public java.util.List<? extends ChannelOrBuilder>
           getChannelsOrBuilderList() {
        if (channelsBuilder_ != null) {
          return channelsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(channels_);
        }
      }
      /**
       * <code>repeated .Channel channels = 20;</code>
       */
      public Channel.Builder addChannelsBuilder() {
        return getChannelsFieldBuilder().addBuilder(
            Channel.getDefaultInstance());
      }
      /**
       * <code>repeated .Channel channels = 20;</code>
       */
      public Channel.Builder addChannelsBuilder(
          int index) {
        return getChannelsFieldBuilder().addBuilder(
            index, Channel.getDefaultInstance());
      }
      /**
       * <code>repeated .Channel channels = 20;</code>
       */
      public java.util.List<Channel.Builder>
           getChannelsBuilderList() {
        return getChannelsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          Channel, Channel.Builder, ChannelOrBuilder>
          getChannelsFieldBuilder() {
        if (channelsBuilder_ == null) {
          channelsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              Channel, Channel.Builder, ChannelOrBuilder>(
                  channels_,
                  ((bitField0_ & 0x00080000) == 0x00080000),
                  getParentForChildren(),
                  isClean());
          channels_ = null;
        }
        return channelsBuilder_;
      }

      // optional uint32 rx2Frequency = 21;
      private int rx2Frequency_ ;
      /**
       * <code>optional uint32 rx2Frequency = 21;</code>
       */
      public boolean hasRx2Frequency() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional uint32 rx2Frequency = 21;</code>
       */
      public int getRx2Frequency() {
        return rx2Frequency_;
      }
      /**
       * <code>optional uint32 rx2Frequency = 21;</code>
       */
      public Builder setRx2Frequency(int value) {
        bitField0_ |= 0x00100000;
        rx2Frequency_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rx2Frequency = 21;</code>
       */
      public Builder clearRx2Frequency() {
        bitField0_ = (bitField0_ & ~0x00100000);
        rx2Frequency_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 rx2Datarate = 22;
      private int rx2Datarate_ ;
      /**
       * <code>optional uint32 rx2Datarate = 22;</code>
       */
      public boolean hasRx2Datarate() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional uint32 rx2Datarate = 22;</code>
       */
      public int getRx2Datarate() {
        return rx2Datarate_;
      }
      /**
       * <code>optional uint32 rx2Datarate = 22;</code>
       */
      public Builder setRx2Datarate(int value) {
        bitField0_ |= 0x00200000;
        rx2Datarate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rx2Datarate = 22;</code>
       */
      public Builder clearRx2Datarate() {
        bitField0_ = (bitField0_ & ~0x00200000);
        rx2Datarate_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:LpwanParam)
    }

    static {
      defaultInstance = new LpwanParam(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:LpwanParam)
  }

  public interface BleParamOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional float bleInterval = 1;
    /**
     * <code>optional float bleInterval = 1;</code>
     */
    boolean hasBleInterval();
    /**
     * <code>optional float bleInterval = 1;</code>
     */
    float getBleInterval();

    // optional sint32 bleTxp = 2;
    /**
     * <code>optional sint32 bleTxp = 2;</code>
     */
    boolean hasBleTxp();
    /**
     * <code>optional sint32 bleTxp = 2;</code>
     */
    int getBleTxp();

    // optional uint32 bleOnTime = 3;
    /**
     * <code>optional uint32 bleOnTime = 3;</code>
     */
    boolean hasBleOnTime();
    /**
     * <code>optional uint32 bleOnTime = 3;</code>
     */
    int getBleOnTime();

    // optional uint32 bleOffTime = 4;
    /**
     * <code>optional uint32 bleOffTime = 4;</code>
     */
    boolean hasBleOffTime();
    /**
     * <code>optional uint32 bleOffTime = 4;</code>
     */
    int getBleOffTime();

    // optional uint32 bleOnOff = 5;
    /**
     * <code>optional uint32 bleOnOff = 5;</code>
     */
    boolean hasBleOnOff();
    /**
     * <code>optional uint32 bleOnOff = 5;</code>
     */
    int getBleOnOff();
  }
  /**
   * Protobuf type {@code BleParam}
   */
  public static final class BleParam extends
      com.google.protobuf.GeneratedMessage
      implements BleParamOrBuilder {
    // Use BleParam.newBuilder() to construct.
    private BleParam(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BleParam(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BleParam defaultInstance;
    public static BleParam getDefaultInstance() {
      return defaultInstance;
    }

    public BleParam getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BleParam(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              bleInterval_ = input.readFloat();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              bleTxp_ = input.readSInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              bleOnTime_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              bleOffTime_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              bleOnOff_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_BleParam_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_BleParam_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              BleParam.class, Builder.class);
    }

    public static com.google.protobuf.Parser<BleParam> PARSER =
        new com.google.protobuf.AbstractParser<BleParam>() {
      public BleParam parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BleParam(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<BleParam> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional float bleInterval = 1;
    public static final int BLEINTERVAL_FIELD_NUMBER = 1;
    private float bleInterval_;
    /**
     * <code>optional float bleInterval = 1;</code>
     */
    public boolean hasBleInterval() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float bleInterval = 1;</code>
     */
    public float getBleInterval() {
      return bleInterval_;
    }

    // optional sint32 bleTxp = 2;
    public static final int BLETXP_FIELD_NUMBER = 2;
    private int bleTxp_;
    /**
     * <code>optional sint32 bleTxp = 2;</code>
     */
    public boolean hasBleTxp() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 bleTxp = 2;</code>
     */
    public int getBleTxp() {
      return bleTxp_;
    }

    // optional uint32 bleOnTime = 3;
    public static final int BLEONTIME_FIELD_NUMBER = 3;
    private int bleOnTime_;
    /**
     * <code>optional uint32 bleOnTime = 3;</code>
     */
    public boolean hasBleOnTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 bleOnTime = 3;</code>
     */
    public int getBleOnTime() {
      return bleOnTime_;
    }

    // optional uint32 bleOffTime = 4;
    public static final int BLEOFFTIME_FIELD_NUMBER = 4;
    private int bleOffTime_;
    /**
     * <code>optional uint32 bleOffTime = 4;</code>
     */
    public boolean hasBleOffTime() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 bleOffTime = 4;</code>
     */
    public int getBleOffTime() {
      return bleOffTime_;
    }

    // optional uint32 bleOnOff = 5;
    public static final int BLEONOFF_FIELD_NUMBER = 5;
    private int bleOnOff_;
    /**
     * <code>optional uint32 bleOnOff = 5;</code>
     */
    public boolean hasBleOnOff() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 bleOnOff = 5;</code>
     */
    public int getBleOnOff() {
      return bleOnOff_;
    }

    private void initFields() {
      bleInterval_ = 0F;
      bleTxp_ = 0;
      bleOnTime_ = 0;
      bleOffTime_ = 0;
      bleOnOff_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, bleInterval_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, bleTxp_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, bleOnTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, bleOffTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, bleOnOff_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, bleInterval_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, bleTxp_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, bleOnTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, bleOffTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, bleOnOff_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static BleParam parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static BleParam parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static BleParam parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static BleParam parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static BleParam parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static BleParam parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static BleParam parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static BleParam parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static BleParam parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static BleParam parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(BleParam prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code BleParam}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements BleParamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_BleParam_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_BleParam_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                BleParam.class, Builder.class);
      }

      // Construct using MsgNode1V1M32.BleParam.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bleInterval_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        bleTxp_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        bleOnTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        bleOffTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        bleOnOff_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_BleParam_descriptor;
      }

      public BleParam getDefaultInstanceForType() {
        return BleParam.getDefaultInstance();
      }

      public BleParam build() {
        BleParam result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public BleParam buildPartial() {
        BleParam result = new BleParam(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bleInterval_ = bleInterval_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.bleTxp_ = bleTxp_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.bleOnTime_ = bleOnTime_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.bleOffTime_ = bleOffTime_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.bleOnOff_ = bleOnOff_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof BleParam) {
          return mergeFrom((BleParam)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(BleParam other) {
        if (other == BleParam.getDefaultInstance()) return this;
        if (other.hasBleInterval()) {
          setBleInterval(other.getBleInterval());
        }
        if (other.hasBleTxp()) {
          setBleTxp(other.getBleTxp());
        }
        if (other.hasBleOnTime()) {
          setBleOnTime(other.getBleOnTime());
        }
        if (other.hasBleOffTime()) {
          setBleOffTime(other.getBleOffTime());
        }
        if (other.hasBleOnOff()) {
          setBleOnOff(other.getBleOnOff());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        BleParam parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (BleParam) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional float bleInterval = 1;
      private float bleInterval_ ;
      /**
       * <code>optional float bleInterval = 1;</code>
       */
      public boolean hasBleInterval() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float bleInterval = 1;</code>
       */
      public float getBleInterval() {
        return bleInterval_;
      }
      /**
       * <code>optional float bleInterval = 1;</code>
       */
      public Builder setBleInterval(float value) {
        bitField0_ |= 0x00000001;
        bleInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float bleInterval = 1;</code>
       */
      public Builder clearBleInterval() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bleInterval_ = 0F;
        onChanged();
        return this;
      }

      // optional sint32 bleTxp = 2;
      private int bleTxp_ ;
      /**
       * <code>optional sint32 bleTxp = 2;</code>
       */
      public boolean hasBleTxp() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional sint32 bleTxp = 2;</code>
       */
      public int getBleTxp() {
        return bleTxp_;
      }
      /**
       * <code>optional sint32 bleTxp = 2;</code>
       */
      public Builder setBleTxp(int value) {
        bitField0_ |= 0x00000002;
        bleTxp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 bleTxp = 2;</code>
       */
      public Builder clearBleTxp() {
        bitField0_ = (bitField0_ & ~0x00000002);
        bleTxp_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 bleOnTime = 3;
      private int bleOnTime_ ;
      /**
       * <code>optional uint32 bleOnTime = 3;</code>
       */
      public boolean hasBleOnTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 bleOnTime = 3;</code>
       */
      public int getBleOnTime() {
        return bleOnTime_;
      }
      /**
       * <code>optional uint32 bleOnTime = 3;</code>
       */
      public Builder setBleOnTime(int value) {
        bitField0_ |= 0x00000004;
        bleOnTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bleOnTime = 3;</code>
       */
      public Builder clearBleOnTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        bleOnTime_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 bleOffTime = 4;
      private int bleOffTime_ ;
      /**
       * <code>optional uint32 bleOffTime = 4;</code>
       */
      public boolean hasBleOffTime() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 bleOffTime = 4;</code>
       */
      public int getBleOffTime() {
        return bleOffTime_;
      }
      /**
       * <code>optional uint32 bleOffTime = 4;</code>
       */
      public Builder setBleOffTime(int value) {
        bitField0_ |= 0x00000008;
        bleOffTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bleOffTime = 4;</code>
       */
      public Builder clearBleOffTime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        bleOffTime_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 bleOnOff = 5;
      private int bleOnOff_ ;
      /**
       * <code>optional uint32 bleOnOff = 5;</code>
       */
      public boolean hasBleOnOff() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 bleOnOff = 5;</code>
       */
      public int getBleOnOff() {
        return bleOnOff_;
      }
      /**
       * <code>optional uint32 bleOnOff = 5;</code>
       */
      public Builder setBleOnOff(int value) {
        bitField0_ |= 0x00000010;
        bleOnOff_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bleOnOff = 5;</code>
       */
      public Builder clearBleOnOff() {
        bitField0_ = (bitField0_ & ~0x00000010);
        bleOnOff_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:BleParam)
    }

    static {
      defaultInstance = new BleParam(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:BleParam)
  }

  public interface SensorDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .SensorType type = 9;
    /**
     * <code>optional .SensorType type = 9;</code>
     *
     * <pre>
     * 类型
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional .SensorType type = 9;</code>
     *
     * <pre>
     * 类型
     * </pre>
     */
    SensorType getType();

    // optional float data = 1;
    /**
     * <code>optional float data = 1;</code>
     *
     * <pre>
     * 数据
     * </pre>
     */
    boolean hasData();
    /**
     * <code>optional float data = 1;</code>
     *
     * <pre>
     * 数据
     * </pre>
     */
    float getData();

    // optional float alarmHigh = 2;
    /**
     * <code>optional float alarmHigh = 2;</code>
     *
     * <pre>
     * 高阈值
     * </pre>
     */
    boolean hasAlarmHigh();
    /**
     * <code>optional float alarmHigh = 2;</code>
     *
     * <pre>
     * 高阈值
     * </pre>
     */
    float getAlarmHigh();

    // optional float alarmLow = 3;
    /**
     * <code>optional float alarmLow = 3;</code>
     *
     * <pre>
     * 低阈值
     * </pre>
     */
    boolean hasAlarmLow();
    /**
     * <code>optional float alarmLow = 3;</code>
     *
     * <pre>
     * 低阈值
     * </pre>
     */
    float getAlarmLow();

    // optional uint32 calibration = 4;
    /**
     * <code>optional uint32 calibration = 4;</code>
     *
     * <pre>
     * 校准
     * </pre>
     */
    boolean hasCalibration();
    /**
     * <code>optional uint32 calibration = 4;</code>
     *
     * <pre>
     * 校准
     * </pre>
     */
    int getCalibration();

    // optional .SensorError error = 5;
    /**
     * <code>optional .SensorError error = 5;</code>
     *
     * <pre>
     * 错误码
     * </pre>
     */
    boolean hasError();
    /**
     * <code>optional .SensorError error = 5;</code>
     *
     * <pre>
     * 错误码
     * </pre>
     */
    SensorError getError();

    // optional uint32 status = 6;
    /**
     * <code>optional uint32 status = 6;</code>
     *
     * <pre>
     * 状态
     * </pre>
     */
    boolean hasStatus();
    /**
     * <code>optional uint32 status = 6;</code>
     *
     * <pre>
     * 状态
     * </pre>
     */
    int getStatus();

    // optional float alarmStepHigh = 7;
    /**
     * <code>optional float alarmStepHigh = 7;</code>
     *
     * <pre>
     * 高阈值步进
     * </pre>
     */
    boolean hasAlarmStepHigh();
    /**
     * <code>optional float alarmStepHigh = 7;</code>
     *
     * <pre>
     * 高阈值步进
     * </pre>
     */
    float getAlarmStepHigh();

    // optional float alarmStepLow = 8;
    /**
     * <code>optional float alarmStepLow = 8;</code>
     *
     * <pre>
     * 低阈值步进
     * </pre>
     */
    boolean hasAlarmStepLow();
    /**
     * <code>optional float alarmStepLow = 8;</code>
     *
     * <pre>
     * 低阈值步进
     * </pre>
     */
    float getAlarmStepLow();

    // optional float fluctuationRange = 10;
    /**
     * <code>optional float fluctuationRange = 10;</code>
     *
     * <pre>
     * 波动范围
     * </pre>
     */
    boolean hasFluctuationRange();
    /**
     * <code>optional float fluctuationRange = 10;</code>
     *
     * <pre>
     * 波动范围
     * </pre>
     */
    float getFluctuationRange();
  }
  /**
   * Protobuf type {@code SensorData}
   */
  public static final class SensorData extends
      com.google.protobuf.GeneratedMessage
      implements SensorDataOrBuilder {
    // Use SensorData.newBuilder() to construct.
    private SensorData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SensorData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SensorData defaultInstance;
    public static SensorData getDefaultInstance() {
      return defaultInstance;
    }

    public SensorData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SensorData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000002;
              data_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000004;
              alarmHigh_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000008;
              alarmLow_ = input.readFloat();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000010;
              calibration_ = input.readUInt32();
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              SensorError value = SensorError.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                error_ = value;
              }
              break;
            }
            case 48: {
              bitField0_ |= 0x00000040;
              status_ = input.readUInt32();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000080;
              alarmStepHigh_ = input.readFloat();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000100;
              alarmStepLow_ = input.readFloat();
              break;
            }
            case 72: {
              int rawValue = input.readEnum();
              SensorType value = SensorType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(9, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 85: {
              bitField0_ |= 0x00000200;
              fluctuationRange_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_SensorData_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_SensorData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SensorData.class, Builder.class);
    }

    public static com.google.protobuf.Parser<SensorData> PARSER =
        new com.google.protobuf.AbstractParser<SensorData>() {
      public SensorData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SensorData(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<SensorData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .SensorType type = 9;
    public static final int TYPE_FIELD_NUMBER = 9;
    private SensorType type_;
    /**
     * <code>optional .SensorType type = 9;</code>
     *
     * <pre>
     * 类型
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .SensorType type = 9;</code>
     *
     * <pre>
     * 类型
     * </pre>
     */
    public SensorType getType() {
      return type_;
    }

    // optional float data = 1;
    public static final int DATA_FIELD_NUMBER = 1;
    private float data_;
    /**
     * <code>optional float data = 1;</code>
     *
     * <pre>
     * 数据
     * </pre>
     */
    public boolean hasData() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float data = 1;</code>
     *
     * <pre>
     * 数据
     * </pre>
     */
    public float getData() {
      return data_;
    }

    // optional float alarmHigh = 2;
    public static final int ALARMHIGH_FIELD_NUMBER = 2;
    private float alarmHigh_;
    /**
     * <code>optional float alarmHigh = 2;</code>
     *
     * <pre>
     * 高阈值
     * </pre>
     */
    public boolean hasAlarmHigh() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float alarmHigh = 2;</code>
     *
     * <pre>
     * 高阈值
     * </pre>
     */
    public float getAlarmHigh() {
      return alarmHigh_;
    }

    // optional float alarmLow = 3;
    public static final int ALARMLOW_FIELD_NUMBER = 3;
    private float alarmLow_;
    /**
     * <code>optional float alarmLow = 3;</code>
     *
     * <pre>
     * 低阈值
     * </pre>
     */
    public boolean hasAlarmLow() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float alarmLow = 3;</code>
     *
     * <pre>
     * 低阈值
     * </pre>
     */
    public float getAlarmLow() {
      return alarmLow_;
    }

    // optional uint32 calibration = 4;
    public static final int CALIBRATION_FIELD_NUMBER = 4;
    private int calibration_;
    /**
     * <code>optional uint32 calibration = 4;</code>
     *
     * <pre>
     * 校准
     * </pre>
     */
    public boolean hasCalibration() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 calibration = 4;</code>
     *
     * <pre>
     * 校准
     * </pre>
     */
    public int getCalibration() {
      return calibration_;
    }

    // optional .SensorError error = 5;
    public static final int ERROR_FIELD_NUMBER = 5;
    private SensorError error_;
    /**
     * <code>optional .SensorError error = 5;</code>
     *
     * <pre>
     * 错误码
     * </pre>
     */
    public boolean hasError() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .SensorError error = 5;</code>
     *
     * <pre>
     * 错误码
     * </pre>
     */
    public SensorError getError() {
      return error_;
    }

    // optional uint32 status = 6;
    public static final int STATUS_FIELD_NUMBER = 6;
    private int status_;
    /**
     * <code>optional uint32 status = 6;</code>
     *
     * <pre>
     * 状态
     * </pre>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 status = 6;</code>
     *
     * <pre>
     * 状态
     * </pre>
     */
    public int getStatus() {
      return status_;
    }

    // optional float alarmStepHigh = 7;
    public static final int ALARMSTEPHIGH_FIELD_NUMBER = 7;
    private float alarmStepHigh_;
    /**
     * <code>optional float alarmStepHigh = 7;</code>
     *
     * <pre>
     * 高阈值步进
     * </pre>
     */
    public boolean hasAlarmStepHigh() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float alarmStepHigh = 7;</code>
     *
     * <pre>
     * 高阈值步进
     * </pre>
     */
    public float getAlarmStepHigh() {
      return alarmStepHigh_;
    }

    // optional float alarmStepLow = 8;
    public static final int ALARMSTEPLOW_FIELD_NUMBER = 8;
    private float alarmStepLow_;
    /**
     * <code>optional float alarmStepLow = 8;</code>
     *
     * <pre>
     * 低阈值步进
     * </pre>
     */
    public boolean hasAlarmStepLow() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float alarmStepLow = 8;</code>
     *
     * <pre>
     * 低阈值步进
     * </pre>
     */
    public float getAlarmStepLow() {
      return alarmStepLow_;
    }

    // optional float fluctuationRange = 10;
    public static final int FLUCTUATIONRANGE_FIELD_NUMBER = 10;
    private float fluctuationRange_;
    /**
     * <code>optional float fluctuationRange = 10;</code>
     *
     * <pre>
     * 波动范围
     * </pre>
     */
    public boolean hasFluctuationRange() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional float fluctuationRange = 10;</code>
     *
     * <pre>
     * 波动范围
     * </pre>
     */
    public float getFluctuationRange() {
      return fluctuationRange_;
    }

    private void initFields() {
      type_ = SensorType.SENSOR_TYPE_TEMP;
      data_ = 0F;
      alarmHigh_ = 0F;
      alarmLow_ = 0F;
      calibration_ = 0;
      error_ = SensorError.SENSOR_ERR_NONE;
      status_ = 0;
      alarmStepHigh_ = 0F;
      alarmStepLow_ = 0F;
      fluctuationRange_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(1, data_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(2, alarmHigh_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(3, alarmLow_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(4, calibration_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(5, error_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(6, status_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(7, alarmStepHigh_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(8, alarmStepLow_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(9, type_.getNumber());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(10, fluctuationRange_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, data_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, alarmHigh_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, alarmLow_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, calibration_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, error_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, status_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, alarmStepHigh_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, alarmStepLow_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, type_.getNumber());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, fluctuationRange_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static SensorData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SensorData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SensorData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SensorData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SensorData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SensorData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static SensorData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static SensorData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static SensorData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SensorData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SensorData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SensorData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements SensorDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_SensorData_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_SensorData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SensorData.class, Builder.class);
      }

      // Construct using MsgNode1V1M32.SensorData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = SensorType.SENSOR_TYPE_TEMP;
        bitField0_ = (bitField0_ & ~0x00000001);
        data_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        alarmHigh_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        alarmLow_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        calibration_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        error_ = SensorError.SENSOR_ERR_NONE;
        bitField0_ = (bitField0_ & ~0x00000020);
        status_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        alarmStepHigh_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        alarmStepLow_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        fluctuationRange_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_SensorData_descriptor;
      }

      public SensorData getDefaultInstanceForType() {
        return SensorData.getDefaultInstance();
      }

      public SensorData build() {
        SensorData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SensorData buildPartial() {
        SensorData result = new SensorData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.data_ = data_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.alarmHigh_ = alarmHigh_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.alarmLow_ = alarmLow_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.calibration_ = calibration_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.error_ = error_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.status_ = status_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.alarmStepHigh_ = alarmStepHigh_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.alarmStepLow_ = alarmStepLow_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.fluctuationRange_ = fluctuationRange_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SensorData) {
          return mergeFrom((SensorData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SensorData other) {
        if (other == SensorData.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasData()) {
          setData(other.getData());
        }
        if (other.hasAlarmHigh()) {
          setAlarmHigh(other.getAlarmHigh());
        }
        if (other.hasAlarmLow()) {
          setAlarmLow(other.getAlarmLow());
        }
        if (other.hasCalibration()) {
          setCalibration(other.getCalibration());
        }
        if (other.hasError()) {
          setError(other.getError());
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        if (other.hasAlarmStepHigh()) {
          setAlarmStepHigh(other.getAlarmStepHigh());
        }
        if (other.hasAlarmStepLow()) {
          setAlarmStepLow(other.getAlarmStepLow());
        }
        if (other.hasFluctuationRange()) {
          setFluctuationRange(other.getFluctuationRange());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SensorData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SensorData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .SensorType type = 9;
      private SensorType type_ = SensorType.SENSOR_TYPE_TEMP;
      /**
       * <code>optional .SensorType type = 9;</code>
       *
       * <pre>
       * 类型
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .SensorType type = 9;</code>
       *
       * <pre>
       * 类型
       * </pre>
       */
      public SensorType getType() {
        return type_;
      }
      /**
       * <code>optional .SensorType type = 9;</code>
       *
       * <pre>
       * 类型
       * </pre>
       */
      public Builder setType(SensorType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .SensorType type = 9;</code>
       *
       * <pre>
       * 类型
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = SensorType.SENSOR_TYPE_TEMP;
        onChanged();
        return this;
      }

      // optional float data = 1;
      private float data_ ;
      /**
       * <code>optional float data = 1;</code>
       *
       * <pre>
       * 数据
       * </pre>
       */
      public boolean hasData() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float data = 1;</code>
       *
       * <pre>
       * 数据
       * </pre>
       */
      public float getData() {
        return data_;
      }
      /**
       * <code>optional float data = 1;</code>
       *
       * <pre>
       * 数据
       * </pre>
       */
      public Builder setData(float value) {
        bitField0_ |= 0x00000002;
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float data = 1;</code>
       *
       * <pre>
       * 数据
       * </pre>
       */
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000002);
        data_ = 0F;
        onChanged();
        return this;
      }

      // optional float alarmHigh = 2;
      private float alarmHigh_ ;
      /**
       * <code>optional float alarmHigh = 2;</code>
       *
       * <pre>
       * 高阈值
       * </pre>
       */
      public boolean hasAlarmHigh() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float alarmHigh = 2;</code>
       *
       * <pre>
       * 高阈值
       * </pre>
       */
      public float getAlarmHigh() {
        return alarmHigh_;
      }
      /**
       * <code>optional float alarmHigh = 2;</code>
       *
       * <pre>
       * 高阈值
       * </pre>
       */
      public Builder setAlarmHigh(float value) {
        bitField0_ |= 0x00000004;
        alarmHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alarmHigh = 2;</code>
       *
       * <pre>
       * 高阈值
       * </pre>
       */
      public Builder clearAlarmHigh() {
        bitField0_ = (bitField0_ & ~0x00000004);
        alarmHigh_ = 0F;
        onChanged();
        return this;
      }

      // optional float alarmLow = 3;
      private float alarmLow_ ;
      /**
       * <code>optional float alarmLow = 3;</code>
       *
       * <pre>
       * 低阈值
       * </pre>
       */
      public boolean hasAlarmLow() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float alarmLow = 3;</code>
       *
       * <pre>
       * 低阈值
       * </pre>
       */
      public float getAlarmLow() {
        return alarmLow_;
      }
      /**
       * <code>optional float alarmLow = 3;</code>
       *
       * <pre>
       * 低阈值
       * </pre>
       */
      public Builder setAlarmLow(float value) {
        bitField0_ |= 0x00000008;
        alarmLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alarmLow = 3;</code>
       *
       * <pre>
       * 低阈值
       * </pre>
       */
      public Builder clearAlarmLow() {
        bitField0_ = (bitField0_ & ~0x00000008);
        alarmLow_ = 0F;
        onChanged();
        return this;
      }

      // optional uint32 calibration = 4;
      private int calibration_ ;
      /**
       * <code>optional uint32 calibration = 4;</code>
       *
       * <pre>
       * 校准
       * </pre>
       */
      public boolean hasCalibration() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 calibration = 4;</code>
       *
       * <pre>
       * 校准
       * </pre>
       */
      public int getCalibration() {
        return calibration_;
      }
      /**
       * <code>optional uint32 calibration = 4;</code>
       *
       * <pre>
       * 校准
       * </pre>
       */
      public Builder setCalibration(int value) {
        bitField0_ |= 0x00000010;
        calibration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 calibration = 4;</code>
       *
       * <pre>
       * 校准
       * </pre>
       */
      public Builder clearCalibration() {
        bitField0_ = (bitField0_ & ~0x00000010);
        calibration_ = 0;
        onChanged();
        return this;
      }

      // optional .SensorError error = 5;
      private SensorError error_ = SensorError.SENSOR_ERR_NONE;
      /**
       * <code>optional .SensorError error = 5;</code>
       *
       * <pre>
       * 错误码
       * </pre>
       */
      public boolean hasError() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .SensorError error = 5;</code>
       *
       * <pre>
       * 错误码
       * </pre>
       */
      public SensorError getError() {
        return error_;
      }
      /**
       * <code>optional .SensorError error = 5;</code>
       *
       * <pre>
       * 错误码
       * </pre>
       */
      public Builder setError(SensorError value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .SensorError error = 5;</code>
       *
       * <pre>
       * 错误码
       * </pre>
       */
      public Builder clearError() {
        bitField0_ = (bitField0_ & ~0x00000020);
        error_ = SensorError.SENSOR_ERR_NONE;
        onChanged();
        return this;
      }

      // optional uint32 status = 6;
      private int status_ ;
      /**
       * <code>optional uint32 status = 6;</code>
       *
       * <pre>
       * 状态
       * </pre>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 status = 6;</code>
       *
       * <pre>
       * 状态
       * </pre>
       */
      public int getStatus() {
        return status_;
      }
      /**
       * <code>optional uint32 status = 6;</code>
       *
       * <pre>
       * 状态
       * </pre>
       */
      public Builder setStatus(int value) {
        bitField0_ |= 0x00000040;
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 status = 6;</code>
       *
       * <pre>
       * 状态
       * </pre>
       */
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000040);
        status_ = 0;
        onChanged();
        return this;
      }

      // optional float alarmStepHigh = 7;
      private float alarmStepHigh_ ;
      /**
       * <code>optional float alarmStepHigh = 7;</code>
       *
       * <pre>
       * 高阈值步进
       * </pre>
       */
      public boolean hasAlarmStepHigh() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float alarmStepHigh = 7;</code>
       *
       * <pre>
       * 高阈值步进
       * </pre>
       */
      public float getAlarmStepHigh() {
        return alarmStepHigh_;
      }
      /**
       * <code>optional float alarmStepHigh = 7;</code>
       *
       * <pre>
       * 高阈值步进
       * </pre>
       */
      public Builder setAlarmStepHigh(float value) {
        bitField0_ |= 0x00000080;
        alarmStepHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alarmStepHigh = 7;</code>
       *
       * <pre>
       * 高阈值步进
       * </pre>
       */
      public Builder clearAlarmStepHigh() {
        bitField0_ = (bitField0_ & ~0x00000080);
        alarmStepHigh_ = 0F;
        onChanged();
        return this;
      }

      // optional float alarmStepLow = 8;
      private float alarmStepLow_ ;
      /**
       * <code>optional float alarmStepLow = 8;</code>
       *
       * <pre>
       * 低阈值步进
       * </pre>
       */
      public boolean hasAlarmStepLow() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional float alarmStepLow = 8;</code>
       *
       * <pre>
       * 低阈值步进
       * </pre>
       */
      public float getAlarmStepLow() {
        return alarmStepLow_;
      }
      /**
       * <code>optional float alarmStepLow = 8;</code>
       *
       * <pre>
       * 低阈值步进
       * </pre>
       */
      public Builder setAlarmStepLow(float value) {
        bitField0_ |= 0x00000100;
        alarmStepLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alarmStepLow = 8;</code>
       *
       * <pre>
       * 低阈值步进
       * </pre>
       */
      public Builder clearAlarmStepLow() {
        bitField0_ = (bitField0_ & ~0x00000100);
        alarmStepLow_ = 0F;
        onChanged();
        return this;
      }

      // optional float fluctuationRange = 10;
      private float fluctuationRange_ ;
      /**
       * <code>optional float fluctuationRange = 10;</code>
       *
       * <pre>
       * 波动范围
       * </pre>
       */
      public boolean hasFluctuationRange() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional float fluctuationRange = 10;</code>
       *
       * <pre>
       * 波动范围
       * </pre>
       */
      public float getFluctuationRange() {
        return fluctuationRange_;
      }
      /**
       * <code>optional float fluctuationRange = 10;</code>
       *
       * <pre>
       * 波动范围
       * </pre>
       */
      public Builder setFluctuationRange(float value) {
        bitField0_ |= 0x00000200;
        fluctuationRange_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float fluctuationRange = 10;</code>
       *
       * <pre>
       * 波动范围
       * </pre>
       */
      public Builder clearFluctuationRange() {
        bitField0_ = (bitField0_ & ~0x00000200);
        fluctuationRange_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SensorData)
    }

    static {
      defaultInstance = new SensorData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:SensorData)
  }

  public interface SensorDataIntOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .SensorType type = 1;
    /**
     * <code>optional .SensorType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>optional .SensorType type = 1;</code>
     */
    SensorType getType();

    // optional sint32 data = 2;
    /**
     * <code>optional sint32 data = 2;</code>
     */
    boolean hasData();
    /**
     * <code>optional sint32 data = 2;</code>
     */
    int getData();

    // optional sint32 alarmHigh = 3;
    /**
     * <code>optional sint32 alarmHigh = 3;</code>
     */
    boolean hasAlarmHigh();
    /**
     * <code>optional sint32 alarmHigh = 3;</code>
     */
    int getAlarmHigh();

    // optional sint32 alarmLow = 4;
    /**
     * <code>optional sint32 alarmLow = 4;</code>
     */
    boolean hasAlarmLow();
    /**
     * <code>optional sint32 alarmLow = 4;</code>
     */
    int getAlarmLow();

    // optional sint32 calibration = 5;
    /**
     * <code>optional sint32 calibration = 5;</code>
     */
    boolean hasCalibration();
    /**
     * <code>optional sint32 calibration = 5;</code>
     */
    int getCalibration();

    // optional .SensorError error = 6;
    /**
     * <code>optional .SensorError error = 6;</code>
     */
    boolean hasError();
    /**
     * <code>optional .SensorError error = 6;</code>
     */
    SensorError getError();

    // optional uint32 status = 7;
    /**
     * <code>optional uint32 status = 7;</code>
     */
    boolean hasStatus();
    /**
     * <code>optional uint32 status = 7;</code>
     */
    int getStatus();

    // optional sint32 alarmStepHigh = 8;
    /**
     * <code>optional sint32 alarmStepHigh = 8;</code>
     */
    boolean hasAlarmStepHigh();
    /**
     * <code>optional sint32 alarmStepHigh = 8;</code>
     */
    int getAlarmStepHigh();

    // optional sint32 alarmStepLow = 9;
    /**
     * <code>optional sint32 alarmStepLow = 9;</code>
     */
    boolean hasAlarmStepLow();
    /**
     * <code>optional sint32 alarmStepLow = 9;</code>
     */
    int getAlarmStepLow();
  }
  /**
   * Protobuf type {@code SensorDataInt}
   */
  public static final class SensorDataInt extends
      com.google.protobuf.GeneratedMessage
      implements SensorDataIntOrBuilder {
    // Use SensorDataInt.newBuilder() to construct.
    private SensorDataInt(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SensorDataInt(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SensorDataInt defaultInstance;
    public static SensorDataInt getDefaultInstance() {
      return defaultInstance;
    }

    public SensorDataInt getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SensorDataInt(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              SensorType value = SensorType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              data_ = input.readSInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              alarmHigh_ = input.readSInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              alarmLow_ = input.readSInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              calibration_ = input.readSInt32();
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              SensorError value = SensorError.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                error_ = value;
              }
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              status_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              alarmStepHigh_ = input.readSInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              alarmStepLow_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_SensorDataInt_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_SensorDataInt_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SensorDataInt.class, Builder.class);
    }

    public static com.google.protobuf.Parser<SensorDataInt> PARSER =
        new com.google.protobuf.AbstractParser<SensorDataInt>() {
      public SensorDataInt parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SensorDataInt(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<SensorDataInt> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .SensorType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private SensorType type_;
    /**
     * <code>optional .SensorType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .SensorType type = 1;</code>
     */
    public SensorType getType() {
      return type_;
    }

    // optional sint32 data = 2;
    public static final int DATA_FIELD_NUMBER = 2;
    private int data_;
    /**
     * <code>optional sint32 data = 2;</code>
     */
    public boolean hasData() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 data = 2;</code>
     */
    public int getData() {
      return data_;
    }

    // optional sint32 alarmHigh = 3;
    public static final int ALARMHIGH_FIELD_NUMBER = 3;
    private int alarmHigh_;
    /**
     * <code>optional sint32 alarmHigh = 3;</code>
     */
    public boolean hasAlarmHigh() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 alarmHigh = 3;</code>
     */
    public int getAlarmHigh() {
      return alarmHigh_;
    }

    // optional sint32 alarmLow = 4;
    public static final int ALARMLOW_FIELD_NUMBER = 4;
    private int alarmLow_;
    /**
     * <code>optional sint32 alarmLow = 4;</code>
     */
    public boolean hasAlarmLow() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional sint32 alarmLow = 4;</code>
     */
    public int getAlarmLow() {
      return alarmLow_;
    }

    // optional sint32 calibration = 5;
    public static final int CALIBRATION_FIELD_NUMBER = 5;
    private int calibration_;
    /**
     * <code>optional sint32 calibration = 5;</code>
     */
    public boolean hasCalibration() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 calibration = 5;</code>
     */
    public int getCalibration() {
      return calibration_;
    }

    // optional .SensorError error = 6;
    public static final int ERROR_FIELD_NUMBER = 6;
    private SensorError error_;
    /**
     * <code>optional .SensorError error = 6;</code>
     */
    public boolean hasError() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .SensorError error = 6;</code>
     */
    public SensorError getError() {
      return error_;
    }

    // optional uint32 status = 7;
    public static final int STATUS_FIELD_NUMBER = 7;
    private int status_;
    /**
     * <code>optional uint32 status = 7;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 status = 7;</code>
     */
    public int getStatus() {
      return status_;
    }

    // optional sint32 alarmStepHigh = 8;
    public static final int ALARMSTEPHIGH_FIELD_NUMBER = 8;
    private int alarmStepHigh_;
    /**
     * <code>optional sint32 alarmStepHigh = 8;</code>
     */
    public boolean hasAlarmStepHigh() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional sint32 alarmStepHigh = 8;</code>
     */
    public int getAlarmStepHigh() {
      return alarmStepHigh_;
    }

    // optional sint32 alarmStepLow = 9;
    public static final int ALARMSTEPLOW_FIELD_NUMBER = 9;
    private int alarmStepLow_;
    /**
     * <code>optional sint32 alarmStepLow = 9;</code>
     */
    public boolean hasAlarmStepLow() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional sint32 alarmStepLow = 9;</code>
     */
    public int getAlarmStepLow() {
      return alarmStepLow_;
    }

    private void initFields() {
      type_ = SensorType.SENSOR_TYPE_TEMP;
      data_ = 0;
      alarmHigh_ = 0;
      alarmLow_ = 0;
      calibration_ = 0;
      error_ = SensorError.SENSOR_ERR_NONE;
      status_ = 0;
      alarmStepHigh_ = 0;
      alarmStepLow_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, data_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, alarmHigh_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(4, alarmLow_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(5, calibration_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(6, error_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, status_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeSInt32(8, alarmStepHigh_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeSInt32(9, alarmStepLow_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, data_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, alarmHigh_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, alarmLow_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, calibration_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, error_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, status_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(8, alarmStepHigh_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(9, alarmStepLow_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static SensorDataInt parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SensorDataInt parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SensorDataInt parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SensorDataInt parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SensorDataInt parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SensorDataInt parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static SensorDataInt parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static SensorDataInt parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static SensorDataInt parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SensorDataInt parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SensorDataInt prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SensorDataInt}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements SensorDataIntOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_SensorDataInt_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_SensorDataInt_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SensorDataInt.class, Builder.class);
      }

      // Construct using MsgNode1V1M32.SensorDataInt.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = SensorType.SENSOR_TYPE_TEMP;
        bitField0_ = (bitField0_ & ~0x00000001);
        data_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        alarmHigh_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        alarmLow_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        calibration_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        error_ = SensorError.SENSOR_ERR_NONE;
        bitField0_ = (bitField0_ & ~0x00000020);
        status_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        alarmStepHigh_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        alarmStepLow_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_SensorDataInt_descriptor;
      }

      public SensorDataInt getDefaultInstanceForType() {
        return SensorDataInt.getDefaultInstance();
      }

      public SensorDataInt build() {
        SensorDataInt result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SensorDataInt buildPartial() {
        SensorDataInt result = new SensorDataInt(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.data_ = data_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.alarmHigh_ = alarmHigh_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.alarmLow_ = alarmLow_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.calibration_ = calibration_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.error_ = error_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.status_ = status_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.alarmStepHigh_ = alarmStepHigh_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.alarmStepLow_ = alarmStepLow_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SensorDataInt) {
          return mergeFrom((SensorDataInt)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SensorDataInt other) {
        if (other == SensorDataInt.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasData()) {
          setData(other.getData());
        }
        if (other.hasAlarmHigh()) {
          setAlarmHigh(other.getAlarmHigh());
        }
        if (other.hasAlarmLow()) {
          setAlarmLow(other.getAlarmLow());
        }
        if (other.hasCalibration()) {
          setCalibration(other.getCalibration());
        }
        if (other.hasError()) {
          setError(other.getError());
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        if (other.hasAlarmStepHigh()) {
          setAlarmStepHigh(other.getAlarmStepHigh());
        }
        if (other.hasAlarmStepLow()) {
          setAlarmStepLow(other.getAlarmStepLow());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SensorDataInt parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SensorDataInt) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .SensorType type = 1;
      private SensorType type_ = SensorType.SENSOR_TYPE_TEMP;
      /**
       * <code>optional .SensorType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .SensorType type = 1;</code>
       */
      public SensorType getType() {
        return type_;
      }
      /**
       * <code>optional .SensorType type = 1;</code>
       */
      public Builder setType(SensorType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .SensorType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = SensorType.SENSOR_TYPE_TEMP;
        onChanged();
        return this;
      }

      // optional sint32 data = 2;
      private int data_ ;
      /**
       * <code>optional sint32 data = 2;</code>
       */
      public boolean hasData() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional sint32 data = 2;</code>
       */
      public int getData() {
        return data_;
      }
      /**
       * <code>optional sint32 data = 2;</code>
       */
      public Builder setData(int value) {
        bitField0_ |= 0x00000002;
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 data = 2;</code>
       */
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000002);
        data_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 alarmHigh = 3;
      private int alarmHigh_ ;
      /**
       * <code>optional sint32 alarmHigh = 3;</code>
       */
      public boolean hasAlarmHigh() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sint32 alarmHigh = 3;</code>
       */
      public int getAlarmHigh() {
        return alarmHigh_;
      }
      /**
       * <code>optional sint32 alarmHigh = 3;</code>
       */
      public Builder setAlarmHigh(int value) {
        bitField0_ |= 0x00000004;
        alarmHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 alarmHigh = 3;</code>
       */
      public Builder clearAlarmHigh() {
        bitField0_ = (bitField0_ & ~0x00000004);
        alarmHigh_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 alarmLow = 4;
      private int alarmLow_ ;
      /**
       * <code>optional sint32 alarmLow = 4;</code>
       */
      public boolean hasAlarmLow() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional sint32 alarmLow = 4;</code>
       */
      public int getAlarmLow() {
        return alarmLow_;
      }
      /**
       * <code>optional sint32 alarmLow = 4;</code>
       */
      public Builder setAlarmLow(int value) {
        bitField0_ |= 0x00000008;
        alarmLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 alarmLow = 4;</code>
       */
      public Builder clearAlarmLow() {
        bitField0_ = (bitField0_ & ~0x00000008);
        alarmLow_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 calibration = 5;
      private int calibration_ ;
      /**
       * <code>optional sint32 calibration = 5;</code>
       */
      public boolean hasCalibration() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 calibration = 5;</code>
       */
      public int getCalibration() {
        return calibration_;
      }
      /**
       * <code>optional sint32 calibration = 5;</code>
       */
      public Builder setCalibration(int value) {
        bitField0_ |= 0x00000010;
        calibration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 calibration = 5;</code>
       */
      public Builder clearCalibration() {
        bitField0_ = (bitField0_ & ~0x00000010);
        calibration_ = 0;
        onChanged();
        return this;
      }

      // optional .SensorError error = 6;
      private SensorError error_ = SensorError.SENSOR_ERR_NONE;
      /**
       * <code>optional .SensorError error = 6;</code>
       */
      public boolean hasError() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .SensorError error = 6;</code>
       */
      public SensorError getError() {
        return error_;
      }
      /**
       * <code>optional .SensorError error = 6;</code>
       */
      public Builder setError(SensorError value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .SensorError error = 6;</code>
       */
      public Builder clearError() {
        bitField0_ = (bitField0_ & ~0x00000020);
        error_ = SensorError.SENSOR_ERR_NONE;
        onChanged();
        return this;
      }

      // optional uint32 status = 7;
      private int status_ ;
      /**
       * <code>optional uint32 status = 7;</code>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 status = 7;</code>
       */
      public int getStatus() {
        return status_;
      }
      /**
       * <code>optional uint32 status = 7;</code>
       */
      public Builder setStatus(int value) {
        bitField0_ |= 0x00000040;
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 status = 7;</code>
       */
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000040);
        status_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 alarmStepHigh = 8;
      private int alarmStepHigh_ ;
      /**
       * <code>optional sint32 alarmStepHigh = 8;</code>
       */
      public boolean hasAlarmStepHigh() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional sint32 alarmStepHigh = 8;</code>
       */
      public int getAlarmStepHigh() {
        return alarmStepHigh_;
      }
      /**
       * <code>optional sint32 alarmStepHigh = 8;</code>
       */
      public Builder setAlarmStepHigh(int value) {
        bitField0_ |= 0x00000080;
        alarmStepHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 alarmStepHigh = 8;</code>
       */
      public Builder clearAlarmStepHigh() {
        bitField0_ = (bitField0_ & ~0x00000080);
        alarmStepHigh_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 alarmStepLow = 9;
      private int alarmStepLow_ ;
      /**
       * <code>optional sint32 alarmStepLow = 9;</code>
       */
      public boolean hasAlarmStepLow() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional sint32 alarmStepLow = 9;</code>
       */
      public int getAlarmStepLow() {
        return alarmStepLow_;
      }
      /**
       * <code>optional sint32 alarmStepLow = 9;</code>
       */
      public Builder setAlarmStepLow(int value) {
        bitField0_ |= 0x00000100;
        alarmStepLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 alarmStepLow = 9;</code>
       */
      public Builder clearAlarmStepLow() {
        bitField0_ = (bitField0_ & ~0x00000100);
        alarmStepLow_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SensorDataInt)
    }

    static {
      defaultInstance = new SensorDataInt(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:SensorDataInt)
  }

  public interface SensorDataFloatOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .SensorType type = 1;
    /**
     * <code>optional .SensorType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>optional .SensorType type = 1;</code>
     */
    SensorType getType();

    // optional float data = 2;
    /**
     * <code>optional float data = 2;</code>
     */
    boolean hasData();
    /**
     * <code>optional float data = 2;</code>
     */
    float getData();

    // optional float alarmHigh = 3;
    /**
     * <code>optional float alarmHigh = 3;</code>
     */
    boolean hasAlarmHigh();
    /**
     * <code>optional float alarmHigh = 3;</code>
     */
    float getAlarmHigh();

    // optional float alarmLow = 4;
    /**
     * <code>optional float alarmLow = 4;</code>
     */
    boolean hasAlarmLow();
    /**
     * <code>optional float alarmLow = 4;</code>
     */
    float getAlarmLow();

    // optional sint32 calibration = 5;
    /**
     * <code>optional sint32 calibration = 5;</code>
     */
    boolean hasCalibration();
    /**
     * <code>optional sint32 calibration = 5;</code>
     */
    int getCalibration();

    // optional .SensorError error = 6;
    /**
     * <code>optional .SensorError error = 6;</code>
     */
    boolean hasError();
    /**
     * <code>optional .SensorError error = 6;</code>
     */
    SensorError getError();

    // optional uint32 status = 7;
    /**
     * <code>optional uint32 status = 7;</code>
     */
    boolean hasStatus();
    /**
     * <code>optional uint32 status = 7;</code>
     */
    int getStatus();

    // optional float alarmStepHigh = 8;
    /**
     * <code>optional float alarmStepHigh = 8;</code>
     */
    boolean hasAlarmStepHigh();
    /**
     * <code>optional float alarmStepHigh = 8;</code>
     */
    float getAlarmStepHigh();

    // optional float alarmStepLow = 9;
    /**
     * <code>optional float alarmStepLow = 9;</code>
     */
    boolean hasAlarmStepLow();
    /**
     * <code>optional float alarmStepLow = 9;</code>
     */
    float getAlarmStepLow();
  }
  /**
   * Protobuf type {@code SensorDataFloat}
   */
  public static final class SensorDataFloat extends
      com.google.protobuf.GeneratedMessage
      implements SensorDataFloatOrBuilder {
    // Use SensorDataFloat.newBuilder() to construct.
    private SensorDataFloat(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SensorDataFloat(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SensorDataFloat defaultInstance;
    public static SensorDataFloat getDefaultInstance() {
      return defaultInstance;
    }

    public SensorDataFloat getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SensorDataFloat(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              SensorType value = SensorType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              data_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              alarmHigh_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              alarmLow_ = input.readFloat();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              calibration_ = input.readSInt32();
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              SensorError value = SensorError.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                error_ = value;
              }
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              status_ = input.readUInt32();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              alarmStepHigh_ = input.readFloat();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              alarmStepLow_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_SensorDataFloat_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_SensorDataFloat_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SensorDataFloat.class, Builder.class);
    }

    public static com.google.protobuf.Parser<SensorDataFloat> PARSER =
        new com.google.protobuf.AbstractParser<SensorDataFloat>() {
      public SensorDataFloat parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SensorDataFloat(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<SensorDataFloat> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .SensorType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private SensorType type_;
    /**
     * <code>optional .SensorType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .SensorType type = 1;</code>
     */
    public SensorType getType() {
      return type_;
    }

    // optional float data = 2;
    public static final int DATA_FIELD_NUMBER = 2;
    private float data_;
    /**
     * <code>optional float data = 2;</code>
     */
    public boolean hasData() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float data = 2;</code>
     */
    public float getData() {
      return data_;
    }

    // optional float alarmHigh = 3;
    public static final int ALARMHIGH_FIELD_NUMBER = 3;
    private float alarmHigh_;
    /**
     * <code>optional float alarmHigh = 3;</code>
     */
    public boolean hasAlarmHigh() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float alarmHigh = 3;</code>
     */
    public float getAlarmHigh() {
      return alarmHigh_;
    }

    // optional float alarmLow = 4;
    public static final int ALARMLOW_FIELD_NUMBER = 4;
    private float alarmLow_;
    /**
     * <code>optional float alarmLow = 4;</code>
     */
    public boolean hasAlarmLow() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float alarmLow = 4;</code>
     */
    public float getAlarmLow() {
      return alarmLow_;
    }

    // optional sint32 calibration = 5;
    public static final int CALIBRATION_FIELD_NUMBER = 5;
    private int calibration_;
    /**
     * <code>optional sint32 calibration = 5;</code>
     */
    public boolean hasCalibration() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 calibration = 5;</code>
     */
    public int getCalibration() {
      return calibration_;
    }

    // optional .SensorError error = 6;
    public static final int ERROR_FIELD_NUMBER = 6;
    private SensorError error_;
    /**
     * <code>optional .SensorError error = 6;</code>
     */
    public boolean hasError() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .SensorError error = 6;</code>
     */
    public SensorError getError() {
      return error_;
    }

    // optional uint32 status = 7;
    public static final int STATUS_FIELD_NUMBER = 7;
    private int status_;
    /**
     * <code>optional uint32 status = 7;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 status = 7;</code>
     */
    public int getStatus() {
      return status_;
    }

    // optional float alarmStepHigh = 8;
    public static final int ALARMSTEPHIGH_FIELD_NUMBER = 8;
    private float alarmStepHigh_;
    /**
     * <code>optional float alarmStepHigh = 8;</code>
     */
    public boolean hasAlarmStepHigh() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float alarmStepHigh = 8;</code>
     */
    public float getAlarmStepHigh() {
      return alarmStepHigh_;
    }

    // optional float alarmStepLow = 9;
    public static final int ALARMSTEPLOW_FIELD_NUMBER = 9;
    private float alarmStepLow_;
    /**
     * <code>optional float alarmStepLow = 9;</code>
     */
    public boolean hasAlarmStepLow() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float alarmStepLow = 9;</code>
     */
    public float getAlarmStepLow() {
      return alarmStepLow_;
    }

    private void initFields() {
      type_ = SensorType.SENSOR_TYPE_TEMP;
      data_ = 0F;
      alarmHigh_ = 0F;
      alarmLow_ = 0F;
      calibration_ = 0;
      error_ = SensorError.SENSOR_ERR_NONE;
      status_ = 0;
      alarmStepHigh_ = 0F;
      alarmStepLow_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, data_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, alarmHigh_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, alarmLow_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(5, calibration_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(6, error_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, status_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, alarmStepHigh_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, alarmStepLow_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, data_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, alarmHigh_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, alarmLow_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, calibration_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, error_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, status_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, alarmStepHigh_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, alarmStepLow_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static SensorDataFloat parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SensorDataFloat parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SensorDataFloat parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SensorDataFloat parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SensorDataFloat parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SensorDataFloat parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static SensorDataFloat parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static SensorDataFloat parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static SensorDataFloat parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SensorDataFloat parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SensorDataFloat prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SensorDataFloat}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements SensorDataFloatOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_SensorDataFloat_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_SensorDataFloat_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SensorDataFloat.class, Builder.class);
      }

      // Construct using MsgNode1V1M32.SensorDataFloat.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = SensorType.SENSOR_TYPE_TEMP;
        bitField0_ = (bitField0_ & ~0x00000001);
        data_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        alarmHigh_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        alarmLow_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        calibration_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        error_ = SensorError.SENSOR_ERR_NONE;
        bitField0_ = (bitField0_ & ~0x00000020);
        status_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        alarmStepHigh_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        alarmStepLow_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_SensorDataFloat_descriptor;
      }

      public SensorDataFloat getDefaultInstanceForType() {
        return SensorDataFloat.getDefaultInstance();
      }

      public SensorDataFloat build() {
        SensorDataFloat result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SensorDataFloat buildPartial() {
        SensorDataFloat result = new SensorDataFloat(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.data_ = data_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.alarmHigh_ = alarmHigh_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.alarmLow_ = alarmLow_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.calibration_ = calibration_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.error_ = error_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.status_ = status_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.alarmStepHigh_ = alarmStepHigh_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.alarmStepLow_ = alarmStepLow_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SensorDataFloat) {
          return mergeFrom((SensorDataFloat)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SensorDataFloat other) {
        if (other == SensorDataFloat.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasData()) {
          setData(other.getData());
        }
        if (other.hasAlarmHigh()) {
          setAlarmHigh(other.getAlarmHigh());
        }
        if (other.hasAlarmLow()) {
          setAlarmLow(other.getAlarmLow());
        }
        if (other.hasCalibration()) {
          setCalibration(other.getCalibration());
        }
        if (other.hasError()) {
          setError(other.getError());
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        if (other.hasAlarmStepHigh()) {
          setAlarmStepHigh(other.getAlarmStepHigh());
        }
        if (other.hasAlarmStepLow()) {
          setAlarmStepLow(other.getAlarmStepLow());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SensorDataFloat parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SensorDataFloat) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .SensorType type = 1;
      private SensorType type_ = SensorType.SENSOR_TYPE_TEMP;
      /**
       * <code>optional .SensorType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .SensorType type = 1;</code>
       */
      public SensorType getType() {
        return type_;
      }
      /**
       * <code>optional .SensorType type = 1;</code>
       */
      public Builder setType(SensorType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .SensorType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = SensorType.SENSOR_TYPE_TEMP;
        onChanged();
        return this;
      }

      // optional float data = 2;
      private float data_ ;
      /**
       * <code>optional float data = 2;</code>
       */
      public boolean hasData() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float data = 2;</code>
       */
      public float getData() {
        return data_;
      }
      /**
       * <code>optional float data = 2;</code>
       */
      public Builder setData(float value) {
        bitField0_ |= 0x00000002;
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float data = 2;</code>
       */
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000002);
        data_ = 0F;
        onChanged();
        return this;
      }

      // optional float alarmHigh = 3;
      private float alarmHigh_ ;
      /**
       * <code>optional float alarmHigh = 3;</code>
       */
      public boolean hasAlarmHigh() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float alarmHigh = 3;</code>
       */
      public float getAlarmHigh() {
        return alarmHigh_;
      }
      /**
       * <code>optional float alarmHigh = 3;</code>
       */
      public Builder setAlarmHigh(float value) {
        bitField0_ |= 0x00000004;
        alarmHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alarmHigh = 3;</code>
       */
      public Builder clearAlarmHigh() {
        bitField0_ = (bitField0_ & ~0x00000004);
        alarmHigh_ = 0F;
        onChanged();
        return this;
      }

      // optional float alarmLow = 4;
      private float alarmLow_ ;
      /**
       * <code>optional float alarmLow = 4;</code>
       */
      public boolean hasAlarmLow() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float alarmLow = 4;</code>
       */
      public float getAlarmLow() {
        return alarmLow_;
      }
      /**
       * <code>optional float alarmLow = 4;</code>
       */
      public Builder setAlarmLow(float value) {
        bitField0_ |= 0x00000008;
        alarmLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alarmLow = 4;</code>
       */
      public Builder clearAlarmLow() {
        bitField0_ = (bitField0_ & ~0x00000008);
        alarmLow_ = 0F;
        onChanged();
        return this;
      }

      // optional sint32 calibration = 5;
      private int calibration_ ;
      /**
       * <code>optional sint32 calibration = 5;</code>
       */
      public boolean hasCalibration() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 calibration = 5;</code>
       */
      public int getCalibration() {
        return calibration_;
      }
      /**
       * <code>optional sint32 calibration = 5;</code>
       */
      public Builder setCalibration(int value) {
        bitField0_ |= 0x00000010;
        calibration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 calibration = 5;</code>
       */
      public Builder clearCalibration() {
        bitField0_ = (bitField0_ & ~0x00000010);
        calibration_ = 0;
        onChanged();
        return this;
      }

      // optional .SensorError error = 6;
      private SensorError error_ = SensorError.SENSOR_ERR_NONE;
      /**
       * <code>optional .SensorError error = 6;</code>
       */
      public boolean hasError() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .SensorError error = 6;</code>
       */
      public SensorError getError() {
        return error_;
      }
      /**
       * <code>optional .SensorError error = 6;</code>
       */
      public Builder setError(SensorError value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .SensorError error = 6;</code>
       */
      public Builder clearError() {
        bitField0_ = (bitField0_ & ~0x00000020);
        error_ = SensorError.SENSOR_ERR_NONE;
        onChanged();
        return this;
      }

      // optional uint32 status = 7;
      private int status_ ;
      /**
       * <code>optional uint32 status = 7;</code>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 status = 7;</code>
       */
      public int getStatus() {
        return status_;
      }
      /**
       * <code>optional uint32 status = 7;</code>
       */
      public Builder setStatus(int value) {
        bitField0_ |= 0x00000040;
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 status = 7;</code>
       */
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000040);
        status_ = 0;
        onChanged();
        return this;
      }

      // optional float alarmStepHigh = 8;
      private float alarmStepHigh_ ;
      /**
       * <code>optional float alarmStepHigh = 8;</code>
       */
      public boolean hasAlarmStepHigh() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float alarmStepHigh = 8;</code>
       */
      public float getAlarmStepHigh() {
        return alarmStepHigh_;
      }
      /**
       * <code>optional float alarmStepHigh = 8;</code>
       */
      public Builder setAlarmStepHigh(float value) {
        bitField0_ |= 0x00000080;
        alarmStepHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alarmStepHigh = 8;</code>
       */
      public Builder clearAlarmStepHigh() {
        bitField0_ = (bitField0_ & ~0x00000080);
        alarmStepHigh_ = 0F;
        onChanged();
        return this;
      }

      // optional float alarmStepLow = 9;
      private float alarmStepLow_ ;
      /**
       * <code>optional float alarmStepLow = 9;</code>
       */
      public boolean hasAlarmStepLow() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional float alarmStepLow = 9;</code>
       */
      public float getAlarmStepLow() {
        return alarmStepLow_;
      }
      /**
       * <code>optional float alarmStepLow = 9;</code>
       */
      public Builder setAlarmStepLow(float value) {
        bitField0_ |= 0x00000100;
        alarmStepLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alarmStepLow = 9;</code>
       */
      public Builder clearAlarmStepLow() {
        bitField0_ = (bitField0_ & ~0x00000100);
        alarmStepLow_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SensorDataFloat)
    }

    static {
      defaultInstance = new SensorDataFloat(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:SensorDataFloat)
  }

  public interface MultiSensorDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated float data = 1;
    /**
     * <code>repeated float data = 1;</code>
     */
    java.util.List<Float> getDataList();
    /**
     * <code>repeated float data = 1;</code>
     */
    int getDataCount();
    /**
     * <code>repeated float data = 1;</code>
     */
    float getData(int index);

    // optional float alarmHigh = 2;
    /**
     * <code>optional float alarmHigh = 2;</code>
     */
    boolean hasAlarmHigh();
    /**
     * <code>optional float alarmHigh = 2;</code>
     */
    float getAlarmHigh();

    // optional float alarmLow = 3;
    /**
     * <code>optional float alarmLow = 3;</code>
     */
    boolean hasAlarmLow();
    /**
     * <code>optional float alarmLow = 3;</code>
     */
    float getAlarmLow();

    // optional uint32 calibration = 4;
    /**
     * <code>optional uint32 calibration = 4;</code>
     */
    boolean hasCalibration();
    /**
     * <code>optional uint32 calibration = 4;</code>
     */
    int getCalibration();

    // optional .SensorError error = 5;
    /**
     * <code>optional .SensorError error = 5;</code>
     */
    boolean hasError();
    /**
     * <code>optional .SensorError error = 5;</code>
     */
    SensorError getError();

    // optional uint32 status = 6;
    /**
     * <code>optional uint32 status = 6;</code>
     */
    boolean hasStatus();
    /**
     * <code>optional uint32 status = 6;</code>
     */
    int getStatus();

    // optional float alarmStepHigh = 7;
    /**
     * <code>optional float alarmStepHigh = 7;</code>
     */
    boolean hasAlarmStepHigh();
    /**
     * <code>optional float alarmStepHigh = 7;</code>
     */
    float getAlarmStepHigh();

    // optional float alarmStepLow = 8;
    /**
     * <code>optional float alarmStepLow = 8;</code>
     */
    boolean hasAlarmStepLow();
    /**
     * <code>optional float alarmStepLow = 8;</code>
     */
    float getAlarmStepLow();
  }
  /**
   * Protobuf type {@code MultiSensorData}
   */
  public static final class MultiSensorData extends
      com.google.protobuf.GeneratedMessage
      implements MultiSensorDataOrBuilder {
    // Use MultiSensorData.newBuilder() to construct.
    private MultiSensorData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MultiSensorData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MultiSensorData defaultInstance;
    public static MultiSensorData getDefaultInstance() {
      return defaultInstance;
    }

    public MultiSensorData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MultiSensorData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                data_ = new java.util.ArrayList<Float>();
                mutable_bitField0_ |= 0x00000001;
              }
              data_.add(input.readFloat());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                data_ = new java.util.ArrayList<Float>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                data_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 21: {
              bitField0_ |= 0x00000001;
              alarmHigh_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000002;
              alarmLow_ = input.readFloat();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              calibration_ = input.readUInt32();
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              SensorError value = SensorError.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                error_ = value;
              }
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              status_ = input.readUInt32();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000020;
              alarmStepHigh_ = input.readFloat();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000040;
              alarmStepLow_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          data_ = java.util.Collections.unmodifiableList(data_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_MultiSensorData_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_MultiSensorData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              MultiSensorData.class, Builder.class);
    }

    public static com.google.protobuf.Parser<MultiSensorData> PARSER =
        new com.google.protobuf.AbstractParser<MultiSensorData>() {
      public MultiSensorData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MultiSensorData(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<MultiSensorData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated float data = 1;
    public static final int DATA_FIELD_NUMBER = 1;
    private java.util.List<Float> data_;
    /**
     * <code>repeated float data = 1;</code>
     */
    public java.util.List<Float>
        getDataList() {
      return data_;
    }
    /**
     * <code>repeated float data = 1;</code>
     */
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <code>repeated float data = 1;</code>
     */
    public float getData(int index) {
      return data_.get(index);
    }

    // optional float alarmHigh = 2;
    public static final int ALARMHIGH_FIELD_NUMBER = 2;
    private float alarmHigh_;
    /**
     * <code>optional float alarmHigh = 2;</code>
     */
    public boolean hasAlarmHigh() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float alarmHigh = 2;</code>
     */
    public float getAlarmHigh() {
      return alarmHigh_;
    }

    // optional float alarmLow = 3;
    public static final int ALARMLOW_FIELD_NUMBER = 3;
    private float alarmLow_;
    /**
     * <code>optional float alarmLow = 3;</code>
     */
    public boolean hasAlarmLow() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float alarmLow = 3;</code>
     */
    public float getAlarmLow() {
      return alarmLow_;
    }

    // optional uint32 calibration = 4;
    public static final int CALIBRATION_FIELD_NUMBER = 4;
    private int calibration_;
    /**
     * <code>optional uint32 calibration = 4;</code>
     */
    public boolean hasCalibration() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 calibration = 4;</code>
     */
    public int getCalibration() {
      return calibration_;
    }

    // optional .SensorError error = 5;
    public static final int ERROR_FIELD_NUMBER = 5;
    private SensorError error_;
    /**
     * <code>optional .SensorError error = 5;</code>
     */
    public boolean hasError() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .SensorError error = 5;</code>
     */
    public SensorError getError() {
      return error_;
    }

    // optional uint32 status = 6;
    public static final int STATUS_FIELD_NUMBER = 6;
    private int status_;
    /**
     * <code>optional uint32 status = 6;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 status = 6;</code>
     */
    public int getStatus() {
      return status_;
    }

    // optional float alarmStepHigh = 7;
    public static final int ALARMSTEPHIGH_FIELD_NUMBER = 7;
    private float alarmStepHigh_;
    /**
     * <code>optional float alarmStepHigh = 7;</code>
     */
    public boolean hasAlarmStepHigh() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float alarmStepHigh = 7;</code>
     */
    public float getAlarmStepHigh() {
      return alarmStepHigh_;
    }

    // optional float alarmStepLow = 8;
    public static final int ALARMSTEPLOW_FIELD_NUMBER = 8;
    private float alarmStepLow_;
    /**
     * <code>optional float alarmStepLow = 8;</code>
     */
    public boolean hasAlarmStepLow() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float alarmStepLow = 8;</code>
     */
    public float getAlarmStepLow() {
      return alarmStepLow_;
    }

    private void initFields() {
      data_ = java.util.Collections.emptyList();
      alarmHigh_ = 0F;
      alarmLow_ = 0F;
      calibration_ = 0;
      error_ = SensorError.SENSOR_ERR_NONE;
      status_ = 0;
      alarmStepHigh_ = 0F;
      alarmStepLow_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < data_.size(); i++) {
        output.writeFloat(1, data_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(2, alarmHigh_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(3, alarmLow_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(4, calibration_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(5, error_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(6, status_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(7, alarmStepHigh_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(8, alarmStepLow_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        dataSize = 4 * getDataList().size();
        size += dataSize;
        size += 1 * getDataList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, alarmHigh_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, alarmLow_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, calibration_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, error_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, status_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, alarmStepHigh_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, alarmStepLow_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static MultiSensorData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static MultiSensorData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static MultiSensorData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static MultiSensorData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static MultiSensorData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static MultiSensorData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static MultiSensorData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static MultiSensorData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static MultiSensorData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static MultiSensorData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(MultiSensorData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code MultiSensorData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements MultiSensorDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_MultiSensorData_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_MultiSensorData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                MultiSensorData.class, Builder.class);
      }

      // Construct using MsgNode1V1M32.MultiSensorData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        alarmHigh_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        alarmLow_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        calibration_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        error_ = SensorError.SENSOR_ERR_NONE;
        bitField0_ = (bitField0_ & ~0x00000010);
        status_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        alarmStepHigh_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        alarmStepLow_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_MultiSensorData_descriptor;
      }

      public MultiSensorData getDefaultInstanceForType() {
        return MultiSensorData.getDefaultInstance();
      }

      public MultiSensorData build() {
        MultiSensorData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public MultiSensorData buildPartial() {
        MultiSensorData result = new MultiSensorData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          data_ = java.util.Collections.unmodifiableList(data_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.data_ = data_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.alarmHigh_ = alarmHigh_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.alarmLow_ = alarmLow_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.calibration_ = calibration_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.error_ = error_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.status_ = status_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.alarmStepHigh_ = alarmStepHigh_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.alarmStepLow_ = alarmStepLow_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof MultiSensorData) {
          return mergeFrom((MultiSensorData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(MultiSensorData other) {
        if (other == MultiSensorData.getDefaultInstance()) return this;
        if (!other.data_.isEmpty()) {
          if (data_.isEmpty()) {
            data_ = other.data_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDataIsMutable();
            data_.addAll(other.data_);
          }
          onChanged();
        }
        if (other.hasAlarmHigh()) {
          setAlarmHigh(other.getAlarmHigh());
        }
        if (other.hasAlarmLow()) {
          setAlarmLow(other.getAlarmLow());
        }
        if (other.hasCalibration()) {
          setCalibration(other.getCalibration());
        }
        if (other.hasError()) {
          setError(other.getError());
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        if (other.hasAlarmStepHigh()) {
          setAlarmStepHigh(other.getAlarmStepHigh());
        }
        if (other.hasAlarmStepLow()) {
          setAlarmStepLow(other.getAlarmStepLow());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        MultiSensorData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (MultiSensorData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated float data = 1;
      private java.util.List<Float> data_ = java.util.Collections.emptyList();
      private void ensureDataIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          data_ = new java.util.ArrayList<Float>(data_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated float data = 1;</code>
       */
      public java.util.List<Float>
          getDataList() {
        return java.util.Collections.unmodifiableList(data_);
      }
      /**
       * <code>repeated float data = 1;</code>
       */
      public int getDataCount() {
        return data_.size();
      }
      /**
       * <code>repeated float data = 1;</code>
       */
      public float getData(int index) {
        return data_.get(index);
      }
      /**
       * <code>repeated float data = 1;</code>
       */
      public Builder setData(
          int index, float value) {
        ensureDataIsMutable();
        data_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float data = 1;</code>
       */
      public Builder addData(float value) {
        ensureDataIsMutable();
        data_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float data = 1;</code>
       */
      public Builder addAllData(
          Iterable<? extends Float> values) {
        ensureDataIsMutable();
        super.addAll(values, data_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float data = 1;</code>
       */
      public Builder clearData() {
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional float alarmHigh = 2;
      private float alarmHigh_ ;
      /**
       * <code>optional float alarmHigh = 2;</code>
       */
      public boolean hasAlarmHigh() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float alarmHigh = 2;</code>
       */
      public float getAlarmHigh() {
        return alarmHigh_;
      }
      /**
       * <code>optional float alarmHigh = 2;</code>
       */
      public Builder setAlarmHigh(float value) {
        bitField0_ |= 0x00000002;
        alarmHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alarmHigh = 2;</code>
       */
      public Builder clearAlarmHigh() {
        bitField0_ = (bitField0_ & ~0x00000002);
        alarmHigh_ = 0F;
        onChanged();
        return this;
      }

      // optional float alarmLow = 3;
      private float alarmLow_ ;
      /**
       * <code>optional float alarmLow = 3;</code>
       */
      public boolean hasAlarmLow() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float alarmLow = 3;</code>
       */
      public float getAlarmLow() {
        return alarmLow_;
      }
      /**
       * <code>optional float alarmLow = 3;</code>
       */
      public Builder setAlarmLow(float value) {
        bitField0_ |= 0x00000004;
        alarmLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alarmLow = 3;</code>
       */
      public Builder clearAlarmLow() {
        bitField0_ = (bitField0_ & ~0x00000004);
        alarmLow_ = 0F;
        onChanged();
        return this;
      }

      // optional uint32 calibration = 4;
      private int calibration_ ;
      /**
       * <code>optional uint32 calibration = 4;</code>
       */
      public boolean hasCalibration() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 calibration = 4;</code>
       */
      public int getCalibration() {
        return calibration_;
      }
      /**
       * <code>optional uint32 calibration = 4;</code>
       */
      public Builder setCalibration(int value) {
        bitField0_ |= 0x00000008;
        calibration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 calibration = 4;</code>
       */
      public Builder clearCalibration() {
        bitField0_ = (bitField0_ & ~0x00000008);
        calibration_ = 0;
        onChanged();
        return this;
      }

      // optional .SensorError error = 5;
      private SensorError error_ = SensorError.SENSOR_ERR_NONE;
      /**
       * <code>optional .SensorError error = 5;</code>
       */
      public boolean hasError() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .SensorError error = 5;</code>
       */
      public SensorError getError() {
        return error_;
      }
      /**
       * <code>optional .SensorError error = 5;</code>
       */
      public Builder setError(SensorError value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .SensorError error = 5;</code>
       */
      public Builder clearError() {
        bitField0_ = (bitField0_ & ~0x00000010);
        error_ = SensorError.SENSOR_ERR_NONE;
        onChanged();
        return this;
      }

      // optional uint32 status = 6;
      private int status_ ;
      /**
       * <code>optional uint32 status = 6;</code>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 status = 6;</code>
       */
      public int getStatus() {
        return status_;
      }
      /**
       * <code>optional uint32 status = 6;</code>
       */
      public Builder setStatus(int value) {
        bitField0_ |= 0x00000020;
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 status = 6;</code>
       */
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000020);
        status_ = 0;
        onChanged();
        return this;
      }

      // optional float alarmStepHigh = 7;
      private float alarmStepHigh_ ;
      /**
       * <code>optional float alarmStepHigh = 7;</code>
       */
      public boolean hasAlarmStepHigh() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float alarmStepHigh = 7;</code>
       */
      public float getAlarmStepHigh() {
        return alarmStepHigh_;
      }
      /**
       * <code>optional float alarmStepHigh = 7;</code>
       */
      public Builder setAlarmStepHigh(float value) {
        bitField0_ |= 0x00000040;
        alarmStepHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alarmStepHigh = 7;</code>
       */
      public Builder clearAlarmStepHigh() {
        bitField0_ = (bitField0_ & ~0x00000040);
        alarmStepHigh_ = 0F;
        onChanged();
        return this;
      }

      // optional float alarmStepLow = 8;
      private float alarmStepLow_ ;
      /**
       * <code>optional float alarmStepLow = 8;</code>
       */
      public boolean hasAlarmStepLow() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float alarmStepLow = 8;</code>
       */
      public float getAlarmStepLow() {
        return alarmStepLow_;
      }
      /**
       * <code>optional float alarmStepLow = 8;</code>
       */
      public Builder setAlarmStepLow(float value) {
        bitField0_ |= 0x00000080;
        alarmStepLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alarmStepLow = 8;</code>
       */
      public Builder clearAlarmStepLow() {
        bitField0_ = (bitField0_ & ~0x00000080);
        alarmStepLow_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:MultiSensorData)
    }

    static {
      defaultInstance = new MultiSensorData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:MultiSensorData)
  }

  public interface MultiSensorDataIntOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated sint32 data = 1;
    /**
     * <code>repeated sint32 data = 1;</code>
     */
    java.util.List<Integer> getDataList();
    /**
     * <code>repeated sint32 data = 1;</code>
     */
    int getDataCount();
    /**
     * <code>repeated sint32 data = 1;</code>
     */
    int getData(int index);

    // optional sint32 alarmHigh = 2;
    /**
     * <code>optional sint32 alarmHigh = 2;</code>
     */
    boolean hasAlarmHigh();
    /**
     * <code>optional sint32 alarmHigh = 2;</code>
     */
    int getAlarmHigh();

    // optional sint32 alarmLow = 3;
    /**
     * <code>optional sint32 alarmLow = 3;</code>
     */
    boolean hasAlarmLow();
    /**
     * <code>optional sint32 alarmLow = 3;</code>
     */
    int getAlarmLow();

    // optional uint32 calibration = 4;
    /**
     * <code>optional uint32 calibration = 4;</code>
     */
    boolean hasCalibration();
    /**
     * <code>optional uint32 calibration = 4;</code>
     */
    int getCalibration();

    // optional .SensorError error = 5;
    /**
     * <code>optional .SensorError error = 5;</code>
     */
    boolean hasError();
    /**
     * <code>optional .SensorError error = 5;</code>
     */
    SensorError getError();

    // optional uint32 status = 6;
    /**
     * <code>optional uint32 status = 6;</code>
     */
    boolean hasStatus();
    /**
     * <code>optional uint32 status = 6;</code>
     */
    int getStatus();

    // optional sint32 alarmStepHigh = 7;
    /**
     * <code>optional sint32 alarmStepHigh = 7;</code>
     */
    boolean hasAlarmStepHigh();
    /**
     * <code>optional sint32 alarmStepHigh = 7;</code>
     */
    int getAlarmStepHigh();

    // optional sint32 alarmStepLow = 8;
    /**
     * <code>optional sint32 alarmStepLow = 8;</code>
     */
    boolean hasAlarmStepLow();
    /**
     * <code>optional sint32 alarmStepLow = 8;</code>
     */
    int getAlarmStepLow();
  }
  /**
   * Protobuf type {@code MultiSensorDataInt}
   */
  public static final class MultiSensorDataInt extends
      com.google.protobuf.GeneratedMessage
      implements MultiSensorDataIntOrBuilder {
    // Use MultiSensorDataInt.newBuilder() to construct.
    private MultiSensorDataInt(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MultiSensorDataInt(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MultiSensorDataInt defaultInstance;
    public static MultiSensorDataInt getDefaultInstance() {
      return defaultInstance;
    }

    public MultiSensorDataInt getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MultiSensorDataInt(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                data_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              data_.add(input.readSInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                data_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                data_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              alarmHigh_ = input.readSInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              alarmLow_ = input.readSInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              calibration_ = input.readUInt32();
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              SensorError value = SensorError.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                error_ = value;
              }
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              status_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              alarmStepHigh_ = input.readSInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              alarmStepLow_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          data_ = java.util.Collections.unmodifiableList(data_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_MultiSensorDataInt_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_MultiSensorDataInt_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              MultiSensorDataInt.class, Builder.class);
    }

    public static com.google.protobuf.Parser<MultiSensorDataInt> PARSER =
        new com.google.protobuf.AbstractParser<MultiSensorDataInt>() {
      public MultiSensorDataInt parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MultiSensorDataInt(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<MultiSensorDataInt> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated sint32 data = 1;
    public static final int DATA_FIELD_NUMBER = 1;
    private java.util.List<Integer> data_;
    /**
     * <code>repeated sint32 data = 1;</code>
     */
    public java.util.List<Integer>
        getDataList() {
      return data_;
    }
    /**
     * <code>repeated sint32 data = 1;</code>
     */
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <code>repeated sint32 data = 1;</code>
     */
    public int getData(int index) {
      return data_.get(index);
    }

    // optional sint32 alarmHigh = 2;
    public static final int ALARMHIGH_FIELD_NUMBER = 2;
    private int alarmHigh_;
    /**
     * <code>optional sint32 alarmHigh = 2;</code>
     */
    public boolean hasAlarmHigh() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional sint32 alarmHigh = 2;</code>
     */
    public int getAlarmHigh() {
      return alarmHigh_;
    }

    // optional sint32 alarmLow = 3;
    public static final int ALARMLOW_FIELD_NUMBER = 3;
    private int alarmLow_;
    /**
     * <code>optional sint32 alarmLow = 3;</code>
     */
    public boolean hasAlarmLow() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 alarmLow = 3;</code>
     */
    public int getAlarmLow() {
      return alarmLow_;
    }

    // optional uint32 calibration = 4;
    public static final int CALIBRATION_FIELD_NUMBER = 4;
    private int calibration_;
    /**
     * <code>optional uint32 calibration = 4;</code>
     */
    public boolean hasCalibration() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 calibration = 4;</code>
     */
    public int getCalibration() {
      return calibration_;
    }

    // optional .SensorError error = 5;
    public static final int ERROR_FIELD_NUMBER = 5;
    private SensorError error_;
    /**
     * <code>optional .SensorError error = 5;</code>
     */
    public boolean hasError() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .SensorError error = 5;</code>
     */
    public SensorError getError() {
      return error_;
    }

    // optional uint32 status = 6;
    public static final int STATUS_FIELD_NUMBER = 6;
    private int status_;
    /**
     * <code>optional uint32 status = 6;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 status = 6;</code>
     */
    public int getStatus() {
      return status_;
    }

    // optional sint32 alarmStepHigh = 7;
    public static final int ALARMSTEPHIGH_FIELD_NUMBER = 7;
    private int alarmStepHigh_;
    /**
     * <code>optional sint32 alarmStepHigh = 7;</code>
     */
    public boolean hasAlarmStepHigh() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint32 alarmStepHigh = 7;</code>
     */
    public int getAlarmStepHigh() {
      return alarmStepHigh_;
    }

    // optional sint32 alarmStepLow = 8;
    public static final int ALARMSTEPLOW_FIELD_NUMBER = 8;
    private int alarmStepLow_;
    /**
     * <code>optional sint32 alarmStepLow = 8;</code>
     */
    public boolean hasAlarmStepLow() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional sint32 alarmStepLow = 8;</code>
     */
    public int getAlarmStepLow() {
      return alarmStepLow_;
    }

    private void initFields() {
      data_ = java.util.Collections.emptyList();
      alarmHigh_ = 0;
      alarmLow_ = 0;
      calibration_ = 0;
      error_ = SensorError.SENSOR_ERR_NONE;
      status_ = 0;
      alarmStepHigh_ = 0;
      alarmStepLow_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < data_.size(); i++) {
        output.writeSInt32(1, data_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(2, alarmHigh_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(3, alarmLow_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(4, calibration_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(5, error_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(6, status_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt32(7, alarmStepHigh_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeSInt32(8, alarmStepLow_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < data_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(data_.get(i));
        }
        size += dataSize;
        size += 1 * getDataList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, alarmHigh_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, alarmLow_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, calibration_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, error_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, status_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(7, alarmStepHigh_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(8, alarmStepLow_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static MultiSensorDataInt parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static MultiSensorDataInt parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static MultiSensorDataInt parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static MultiSensorDataInt parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static MultiSensorDataInt parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static MultiSensorDataInt parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static MultiSensorDataInt parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static MultiSensorDataInt parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static MultiSensorDataInt parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static MultiSensorDataInt parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(MultiSensorDataInt prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code MultiSensorDataInt}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements MultiSensorDataIntOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_MultiSensorDataInt_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_MultiSensorDataInt_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                MultiSensorDataInt.class, Builder.class);
      }

      // Construct using MsgNode1V1M32.MultiSensorDataInt.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        alarmHigh_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        alarmLow_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        calibration_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        error_ = SensorError.SENSOR_ERR_NONE;
        bitField0_ = (bitField0_ & ~0x00000010);
        status_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        alarmStepHigh_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        alarmStepLow_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_MultiSensorDataInt_descriptor;
      }

      public MultiSensorDataInt getDefaultInstanceForType() {
        return MultiSensorDataInt.getDefaultInstance();
      }

      public MultiSensorDataInt build() {
        MultiSensorDataInt result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public MultiSensorDataInt buildPartial() {
        MultiSensorDataInt result = new MultiSensorDataInt(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          data_ = java.util.Collections.unmodifiableList(data_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.data_ = data_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.alarmHigh_ = alarmHigh_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.alarmLow_ = alarmLow_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.calibration_ = calibration_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.error_ = error_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.status_ = status_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.alarmStepHigh_ = alarmStepHigh_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.alarmStepLow_ = alarmStepLow_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof MultiSensorDataInt) {
          return mergeFrom((MultiSensorDataInt)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(MultiSensorDataInt other) {
        if (other == MultiSensorDataInt.getDefaultInstance()) return this;
        if (!other.data_.isEmpty()) {
          if (data_.isEmpty()) {
            data_ = other.data_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDataIsMutable();
            data_.addAll(other.data_);
          }
          onChanged();
        }
        if (other.hasAlarmHigh()) {
          setAlarmHigh(other.getAlarmHigh());
        }
        if (other.hasAlarmLow()) {
          setAlarmLow(other.getAlarmLow());
        }
        if (other.hasCalibration()) {
          setCalibration(other.getCalibration());
        }
        if (other.hasError()) {
          setError(other.getError());
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        if (other.hasAlarmStepHigh()) {
          setAlarmStepHigh(other.getAlarmStepHigh());
        }
        if (other.hasAlarmStepLow()) {
          setAlarmStepLow(other.getAlarmStepLow());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        MultiSensorDataInt parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (MultiSensorDataInt) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated sint32 data = 1;
      private java.util.List<Integer> data_ = java.util.Collections.emptyList();
      private void ensureDataIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          data_ = new java.util.ArrayList<Integer>(data_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated sint32 data = 1;</code>
       */
      public java.util.List<Integer>
          getDataList() {
        return java.util.Collections.unmodifiableList(data_);
      }
      /**
       * <code>repeated sint32 data = 1;</code>
       */
      public int getDataCount() {
        return data_.size();
      }
      /**
       * <code>repeated sint32 data = 1;</code>
       */
      public int getData(int index) {
        return data_.get(index);
      }
      /**
       * <code>repeated sint32 data = 1;</code>
       */
      public Builder setData(
          int index, int value) {
        ensureDataIsMutable();
        data_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 data = 1;</code>
       */
      public Builder addData(int value) {
        ensureDataIsMutable();
        data_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 data = 1;</code>
       */
      public Builder addAllData(
          Iterable<? extends Integer> values) {
        ensureDataIsMutable();
        super.addAll(values, data_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 data = 1;</code>
       */
      public Builder clearData() {
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional sint32 alarmHigh = 2;
      private int alarmHigh_ ;
      /**
       * <code>optional sint32 alarmHigh = 2;</code>
       */
      public boolean hasAlarmHigh() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional sint32 alarmHigh = 2;</code>
       */
      public int getAlarmHigh() {
        return alarmHigh_;
      }
      /**
       * <code>optional sint32 alarmHigh = 2;</code>
       */
      public Builder setAlarmHigh(int value) {
        bitField0_ |= 0x00000002;
        alarmHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 alarmHigh = 2;</code>
       */
      public Builder clearAlarmHigh() {
        bitField0_ = (bitField0_ & ~0x00000002);
        alarmHigh_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 alarmLow = 3;
      private int alarmLow_ ;
      /**
       * <code>optional sint32 alarmLow = 3;</code>
       */
      public boolean hasAlarmLow() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sint32 alarmLow = 3;</code>
       */
      public int getAlarmLow() {
        return alarmLow_;
      }
      /**
       * <code>optional sint32 alarmLow = 3;</code>
       */
      public Builder setAlarmLow(int value) {
        bitField0_ |= 0x00000004;
        alarmLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 alarmLow = 3;</code>
       */
      public Builder clearAlarmLow() {
        bitField0_ = (bitField0_ & ~0x00000004);
        alarmLow_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 calibration = 4;
      private int calibration_ ;
      /**
       * <code>optional uint32 calibration = 4;</code>
       */
      public boolean hasCalibration() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 calibration = 4;</code>
       */
      public int getCalibration() {
        return calibration_;
      }
      /**
       * <code>optional uint32 calibration = 4;</code>
       */
      public Builder setCalibration(int value) {
        bitField0_ |= 0x00000008;
        calibration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 calibration = 4;</code>
       */
      public Builder clearCalibration() {
        bitField0_ = (bitField0_ & ~0x00000008);
        calibration_ = 0;
        onChanged();
        return this;
      }

      // optional .SensorError error = 5;
      private SensorError error_ = SensorError.SENSOR_ERR_NONE;
      /**
       * <code>optional .SensorError error = 5;</code>
       */
      public boolean hasError() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .SensorError error = 5;</code>
       */
      public SensorError getError() {
        return error_;
      }
      /**
       * <code>optional .SensorError error = 5;</code>
       */
      public Builder setError(SensorError value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .SensorError error = 5;</code>
       */
      public Builder clearError() {
        bitField0_ = (bitField0_ & ~0x00000010);
        error_ = SensorError.SENSOR_ERR_NONE;
        onChanged();
        return this;
      }

      // optional uint32 status = 6;
      private int status_ ;
      /**
       * <code>optional uint32 status = 6;</code>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 status = 6;</code>
       */
      public int getStatus() {
        return status_;
      }
      /**
       * <code>optional uint32 status = 6;</code>
       */
      public Builder setStatus(int value) {
        bitField0_ |= 0x00000020;
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 status = 6;</code>
       */
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000020);
        status_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 alarmStepHigh = 7;
      private int alarmStepHigh_ ;
      /**
       * <code>optional sint32 alarmStepHigh = 7;</code>
       */
      public boolean hasAlarmStepHigh() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional sint32 alarmStepHigh = 7;</code>
       */
      public int getAlarmStepHigh() {
        return alarmStepHigh_;
      }
      /**
       * <code>optional sint32 alarmStepHigh = 7;</code>
       */
      public Builder setAlarmStepHigh(int value) {
        bitField0_ |= 0x00000040;
        alarmStepHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 alarmStepHigh = 7;</code>
       */
      public Builder clearAlarmStepHigh() {
        bitField0_ = (bitField0_ & ~0x00000040);
        alarmStepHigh_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 alarmStepLow = 8;
      private int alarmStepLow_ ;
      /**
       * <code>optional sint32 alarmStepLow = 8;</code>
       */
      public boolean hasAlarmStepLow() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional sint32 alarmStepLow = 8;</code>
       */
      public int getAlarmStepLow() {
        return alarmStepLow_;
      }
      /**
       * <code>optional sint32 alarmStepLow = 8;</code>
       */
      public Builder setAlarmStepLow(int value) {
        bitField0_ |= 0x00000080;
        alarmStepLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 alarmStepLow = 8;</code>
       */
      public Builder clearAlarmStepLow() {
        bitField0_ = (bitField0_ & ~0x00000080);
        alarmStepLow_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:MultiSensorDataInt)
    }

    static {
      defaultInstance = new MultiSensorDataInt(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:MultiSensorDataInt)
  }

  public interface GpsDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional double latitude = 1;
    /**
     * <code>optional double latitude = 1;</code>
     */
    boolean hasLatitude();
    /**
     * <code>optional double latitude = 1;</code>
     */
    double getLatitude();

    // optional double longitude = 2;
    /**
     * <code>optional double longitude = 2;</code>
     */
    boolean hasLongitude();
    /**
     * <code>optional double longitude = 2;</code>
     */
    double getLongitude();

    // optional double altitude = 3;
    /**
     * <code>optional double altitude = 3;</code>
     */
    boolean hasAltitude();
    /**
     * <code>optional double altitude = 3;</code>
     */
    double getAltitude();
  }
  /**
   * Protobuf type {@code GpsData}
   */
  public static final class GpsData extends
      com.google.protobuf.GeneratedMessage
      implements GpsDataOrBuilder {
    // Use GpsData.newBuilder() to construct.
    private GpsData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GpsData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GpsData defaultInstance;
    public static GpsData getDefaultInstance() {
      return defaultInstance;
    }

    public GpsData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GpsData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              bitField0_ |= 0x00000001;
              latitude_ = input.readDouble();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              longitude_ = input.readDouble();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              altitude_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_GpsData_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_GpsData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              GpsData.class, Builder.class);
    }

    public static com.google.protobuf.Parser<GpsData> PARSER =
        new com.google.protobuf.AbstractParser<GpsData>() {
      public GpsData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GpsData(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<GpsData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional double latitude = 1;
    public static final int LATITUDE_FIELD_NUMBER = 1;
    private double latitude_;
    /**
     * <code>optional double latitude = 1;</code>
     */
    public boolean hasLatitude() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional double latitude = 1;</code>
     */
    public double getLatitude() {
      return latitude_;
    }

    // optional double longitude = 2;
    public static final int LONGITUDE_FIELD_NUMBER = 2;
    private double longitude_;
    /**
     * <code>optional double longitude = 2;</code>
     */
    public boolean hasLongitude() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional double longitude = 2;</code>
     */
    public double getLongitude() {
      return longitude_;
    }

    // optional double altitude = 3;
    public static final int ALTITUDE_FIELD_NUMBER = 3;
    private double altitude_;
    /**
     * <code>optional double altitude = 3;</code>
     */
    public boolean hasAltitude() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional double altitude = 3;</code>
     */
    public double getAltitude() {
      return altitude_;
    }

    private void initFields() {
      latitude_ = 0D;
      longitude_ = 0D;
      altitude_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(1, latitude_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(2, longitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, altitude_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, latitude_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, longitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, altitude_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static GpsData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static GpsData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static GpsData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static GpsData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static GpsData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static GpsData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static GpsData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static GpsData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static GpsData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static GpsData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(GpsData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code GpsData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements GpsDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_GpsData_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_GpsData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                GpsData.class, Builder.class);
      }

      // Construct using MsgNode1V1M32.GpsData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        latitude_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        longitude_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        altitude_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_GpsData_descriptor;
      }

      public GpsData getDefaultInstanceForType() {
        return GpsData.getDefaultInstance();
      }

      public GpsData build() {
        GpsData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public GpsData buildPartial() {
        GpsData result = new GpsData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.latitude_ = latitude_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.longitude_ = longitude_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.altitude_ = altitude_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof GpsData) {
          return mergeFrom((GpsData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(GpsData other) {
        if (other == GpsData.getDefaultInstance()) return this;
        if (other.hasLatitude()) {
          setLatitude(other.getLatitude());
        }
        if (other.hasLongitude()) {
          setLongitude(other.getLongitude());
        }
        if (other.hasAltitude()) {
          setAltitude(other.getAltitude());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        GpsData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (GpsData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional double latitude = 1;
      private double latitude_ ;
      /**
       * <code>optional double latitude = 1;</code>
       */
      public boolean hasLatitude() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional double latitude = 1;</code>
       */
      public double getLatitude() {
        return latitude_;
      }
      /**
       * <code>optional double latitude = 1;</code>
       */
      public Builder setLatitude(double value) {
        bitField0_ |= 0x00000001;
        latitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double latitude = 1;</code>
       */
      public Builder clearLatitude() {
        bitField0_ = (bitField0_ & ~0x00000001);
        latitude_ = 0D;
        onChanged();
        return this;
      }

      // optional double longitude = 2;
      private double longitude_ ;
      /**
       * <code>optional double longitude = 2;</code>
       */
      public boolean hasLongitude() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional double longitude = 2;</code>
       */
      public double getLongitude() {
        return longitude_;
      }
      /**
       * <code>optional double longitude = 2;</code>
       */
      public Builder setLongitude(double value) {
        bitField0_ |= 0x00000002;
        longitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double longitude = 2;</code>
       */
      public Builder clearLongitude() {
        bitField0_ = (bitField0_ & ~0x00000002);
        longitude_ = 0D;
        onChanged();
        return this;
      }

      // optional double altitude = 3;
      private double altitude_ ;
      /**
       * <code>optional double altitude = 3;</code>
       */
      public boolean hasAltitude() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double altitude = 3;</code>
       */
      public double getAltitude() {
        return altitude_;
      }
      /**
       * <code>optional double altitude = 3;</code>
       */
      public Builder setAltitude(double value) {
        bitField0_ |= 0x00000004;
        altitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double altitude = 3;</code>
       */
      public Builder clearAltitude() {
        bitField0_ = (bitField0_ & ~0x00000004);
        altitude_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:GpsData)
    }

    static {
      defaultInstance = new GpsData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:GpsData)
  }

  public interface AxisDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional float x = 1;
    /**
     * <code>optional float x = 1;</code>
     */
    boolean hasX();
    /**
     * <code>optional float x = 1;</code>
     */
    float getX();

    // optional float y = 2;
    /**
     * <code>optional float y = 2;</code>
     */
    boolean hasY();
    /**
     * <code>optional float y = 2;</code>
     */
    float getY();

    // optional float z = 3;
    /**
     * <code>optional float z = 3;</code>
     */
    boolean hasZ();
    /**
     * <code>optional float z = 3;</code>
     */
    float getZ();
  }
  /**
   * Protobuf type {@code AxisData}
   */
  public static final class AxisData extends
      com.google.protobuf.GeneratedMessage
      implements AxisDataOrBuilder {
    // Use AxisData.newBuilder() to construct.
    private AxisData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AxisData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AxisData defaultInstance;
    public static AxisData getDefaultInstance() {
      return defaultInstance;
    }

    public AxisData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AxisData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              x_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              y_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              z_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_AxisData_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_AxisData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AxisData.class, Builder.class);
    }

    public static com.google.protobuf.Parser<AxisData> PARSER =
        new com.google.protobuf.AbstractParser<AxisData>() {
      public AxisData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AxisData(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<AxisData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional float x = 1;
    public static final int X_FIELD_NUMBER = 1;
    private float x_;
    /**
     * <code>optional float x = 1;</code>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float x = 1;</code>
     */
    public float getX() {
      return x_;
    }

    // optional float y = 2;
    public static final int Y_FIELD_NUMBER = 2;
    private float y_;
    /**
     * <code>optional float y = 2;</code>
     */
    public boolean hasY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float y = 2;</code>
     */
    public float getY() {
      return y_;
    }

    // optional float z = 3;
    public static final int Z_FIELD_NUMBER = 3;
    private float z_;
    /**
     * <code>optional float z = 3;</code>
     */
    public boolean hasZ() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float z = 3;</code>
     */
    public float getZ() {
      return z_;
    }

    private void initFields() {
      x_ = 0F;
      y_ = 0F;
      z_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, z_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, z_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AxisData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AxisData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AxisData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AxisData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AxisData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AxisData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AxisData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AxisData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AxisData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AxisData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AxisData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AxisData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements AxisDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_AxisData_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_AxisData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AxisData.class, Builder.class);
      }

      // Construct using MsgNode1V1M32.AxisData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        x_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        y_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        z_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_AxisData_descriptor;
      }

      public AxisData getDefaultInstanceForType() {
        return AxisData.getDefaultInstance();
      }

      public AxisData build() {
        AxisData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AxisData buildPartial() {
        AxisData result = new AxisData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.z_ = z_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AxisData) {
          return mergeFrom((AxisData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AxisData other) {
        if (other == AxisData.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasZ()) {
          setZ(other.getZ());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AxisData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AxisData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional float x = 1;
      private float x_ ;
      /**
       * <code>optional float x = 1;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float x = 1;</code>
       */
      public float getX() {
        return x_;
      }
      /**
       * <code>optional float x = 1;</code>
       */
      public Builder setX(float value) {
        bitField0_ |= 0x00000001;
        x_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float x = 1;</code>
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0F;
        onChanged();
        return this;
      }

      // optional float y = 2;
      private float y_ ;
      /**
       * <code>optional float y = 2;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float y = 2;</code>
       */
      public float getY() {
        return y_;
      }
      /**
       * <code>optional float y = 2;</code>
       */
      public Builder setY(float value) {
        bitField0_ |= 0x00000002;
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float y = 2;</code>
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0F;
        onChanged();
        return this;
      }

      // optional float z = 3;
      private float z_ ;
      /**
       * <code>optional float z = 3;</code>
       */
      public boolean hasZ() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float z = 3;</code>
       */
      public float getZ() {
        return z_;
      }
      /**
       * <code>optional float z = 3;</code>
       */
      public Builder setZ(float value) {
        bitField0_ |= 0x00000004;
        z_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float z = 3;</code>
       */
      public Builder clearZ() {
        bitField0_ = (bitField0_ & ~0x00000004);
        z_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:AxisData)
    }

    static {
      defaultInstance = new AxisData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AxisData)
  }

  public interface iBeaconOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional bytes uuid = 1;
    /**
     * <code>optional bytes uuid = 1;</code>
     */
    boolean hasUuid();
    /**
     * <code>optional bytes uuid = 1;</code>
     */
    com.google.protobuf.ByteString getUuid();

    // optional uint32 major = 2;
    /**
     * <code>optional uint32 major = 2;</code>
     */
    boolean hasMajor();
    /**
     * <code>optional uint32 major = 2;</code>
     */
    int getMajor();

    // optional uint32 minor = 3;
    /**
     * <code>optional uint32 minor = 3;</code>
     */
    boolean hasMinor();
    /**
     * <code>optional uint32 minor = 3;</code>
     */
    int getMinor();

    // optional sint32 mrssi = 4;
    /**
     * <code>optional sint32 mrssi = 4;</code>
     */
    boolean hasMrssi();
    /**
     * <code>optional sint32 mrssi = 4;</code>
     */
    int getMrssi();
  }
  /**
   * Protobuf type {@code iBeacon}
   */
  public static final class iBeacon extends
      com.google.protobuf.GeneratedMessage
      implements iBeaconOrBuilder {
    // Use iBeacon.newBuilder() to construct.
    private iBeacon(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private iBeacon(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final iBeacon defaultInstance;
    public static iBeacon getDefaultInstance() {
      return defaultInstance;
    }

    public iBeacon getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private iBeacon(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              uuid_ = input.readBytes();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              major_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              minor_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              mrssi_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_iBeacon_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_iBeacon_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              iBeacon.class, Builder.class);
    }

    public static com.google.protobuf.Parser<iBeacon> PARSER =
        new com.google.protobuf.AbstractParser<iBeacon>() {
      public iBeacon parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new iBeacon(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<iBeacon> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional bytes uuid = 1;
    public static final int UUID_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString uuid_;
    /**
     * <code>optional bytes uuid = 1;</code>
     */
    public boolean hasUuid() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bytes uuid = 1;</code>
     */
    public com.google.protobuf.ByteString getUuid() {
      return uuid_;
    }

    // optional uint32 major = 2;
    public static final int MAJOR_FIELD_NUMBER = 2;
    private int major_;
    /**
     * <code>optional uint32 major = 2;</code>
     */
    public boolean hasMajor() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 major = 2;</code>
     */
    public int getMajor() {
      return major_;
    }

    // optional uint32 minor = 3;
    public static final int MINOR_FIELD_NUMBER = 3;
    private int minor_;
    /**
     * <code>optional uint32 minor = 3;</code>
     */
    public boolean hasMinor() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 minor = 3;</code>
     */
    public int getMinor() {
      return minor_;
    }

    // optional sint32 mrssi = 4;
    public static final int MRSSI_FIELD_NUMBER = 4;
    private int mrssi_;
    /**
     * <code>optional sint32 mrssi = 4;</code>
     */
    public boolean hasMrssi() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional sint32 mrssi = 4;</code>
     */
    public int getMrssi() {
      return mrssi_;
    }

    private void initFields() {
      uuid_ = com.google.protobuf.ByteString.EMPTY;
      major_ = 0;
      minor_ = 0;
      mrssi_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, uuid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, major_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, minor_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(4, mrssi_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, uuid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, major_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, minor_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, mrssi_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static iBeacon parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static iBeacon parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static iBeacon parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static iBeacon parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static iBeacon parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static iBeacon parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static iBeacon parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static iBeacon parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static iBeacon parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static iBeacon parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(iBeacon prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code iBeacon}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements iBeaconOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_iBeacon_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_iBeacon_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                iBeacon.class, Builder.class);
      }

      // Construct using MsgNode1V1M32.iBeacon.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        uuid_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        major_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        minor_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        mrssi_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_iBeacon_descriptor;
      }

      public iBeacon getDefaultInstanceForType() {
        return iBeacon.getDefaultInstance();
      }

      public iBeacon build() {
        iBeacon result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public iBeacon buildPartial() {
        iBeacon result = new iBeacon(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.uuid_ = uuid_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.major_ = major_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.minor_ = minor_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mrssi_ = mrssi_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof iBeacon) {
          return mergeFrom((iBeacon)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(iBeacon other) {
        if (other == iBeacon.getDefaultInstance()) return this;
        if (other.hasUuid()) {
          setUuid(other.getUuid());
        }
        if (other.hasMajor()) {
          setMajor(other.getMajor());
        }
        if (other.hasMinor()) {
          setMinor(other.getMinor());
        }
        if (other.hasMrssi()) {
          setMrssi(other.getMrssi());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        iBeacon parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (iBeacon) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bytes uuid = 1;
      private com.google.protobuf.ByteString uuid_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes uuid = 1;</code>
       */
      public boolean hasUuid() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bytes uuid = 1;</code>
       */
      public com.google.protobuf.ByteString getUuid() {
        return uuid_;
      }
      /**
       * <code>optional bytes uuid = 1;</code>
       */
      public Builder setUuid(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        uuid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes uuid = 1;</code>
       */
      public Builder clearUuid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        uuid_ = getDefaultInstance().getUuid();
        onChanged();
        return this;
      }

      // optional uint32 major = 2;
      private int major_ ;
      /**
       * <code>optional uint32 major = 2;</code>
       */
      public boolean hasMajor() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 major = 2;</code>
       */
      public int getMajor() {
        return major_;
      }
      /**
       * <code>optional uint32 major = 2;</code>
       */
      public Builder setMajor(int value) {
        bitField0_ |= 0x00000002;
        major_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 major = 2;</code>
       */
      public Builder clearMajor() {
        bitField0_ = (bitField0_ & ~0x00000002);
        major_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 minor = 3;
      private int minor_ ;
      /**
       * <code>optional uint32 minor = 3;</code>
       */
      public boolean hasMinor() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 minor = 3;</code>
       */
      public int getMinor() {
        return minor_;
      }
      /**
       * <code>optional uint32 minor = 3;</code>
       */
      public Builder setMinor(int value) {
        bitField0_ |= 0x00000004;
        minor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 minor = 3;</code>
       */
      public Builder clearMinor() {
        bitField0_ = (bitField0_ & ~0x00000004);
        minor_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 mrssi = 4;
      private int mrssi_ ;
      /**
       * <code>optional sint32 mrssi = 4;</code>
       */
      public boolean hasMrssi() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional sint32 mrssi = 4;</code>
       */
      public int getMrssi() {
        return mrssi_;
      }
      /**
       * <code>optional sint32 mrssi = 4;</code>
       */
      public Builder setMrssi(int value) {
        bitField0_ |= 0x00000008;
        mrssi_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 mrssi = 4;</code>
       */
      public Builder clearMrssi() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mrssi_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:iBeacon)
    }

    static {
      defaultInstance = new iBeacon(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:iBeacon)
  }

  public interface ExtSmokeOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 bgSignal = 1;
    /**
     * <code>optional uint32 bgSignal = 1;</code>
     */
    boolean hasBgSignal();
    /**
     * <code>optional uint32 bgSignal = 1;</code>
     */
    int getBgSignal();

    // optional uint32 bgSignalThreshold = 2;
    /**
     * <code>optional uint32 bgSignalThreshold = 2;</code>
     */
    boolean hasBgSignalThreshold();
    /**
     * <code>optional uint32 bgSignalThreshold = 2;</code>
     */
    int getBgSignalThreshold();

    // optional uint32 bgSignalCalibration = 3;
    /**
     * <code>optional uint32 bgSignalCalibration = 3;</code>
     */
    boolean hasBgSignalCalibration();
    /**
     * <code>optional uint32 bgSignalCalibration = 3;</code>
     */
    int getBgSignalCalibration();
  }
  /**
   * Protobuf type {@code ExtSmoke}
   */
  public static final class ExtSmoke extends
      com.google.protobuf.GeneratedMessage
      implements ExtSmokeOrBuilder {
    // Use ExtSmoke.newBuilder() to construct.
    private ExtSmoke(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ExtSmoke(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ExtSmoke defaultInstance;
    public static ExtSmoke getDefaultInstance() {
      return defaultInstance;
    }

    public ExtSmoke getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ExtSmoke(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bgSignal_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              bgSignalThreshold_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              bgSignalCalibration_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_ExtSmoke_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_ExtSmoke_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ExtSmoke.class, Builder.class);
    }

    public static com.google.protobuf.Parser<ExtSmoke> PARSER =
        new com.google.protobuf.AbstractParser<ExtSmoke>() {
      public ExtSmoke parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ExtSmoke(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<ExtSmoke> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 bgSignal = 1;
    public static final int BGSIGNAL_FIELD_NUMBER = 1;
    private int bgSignal_;
    /**
     * <code>optional uint32 bgSignal = 1;</code>
     */
    public boolean hasBgSignal() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 bgSignal = 1;</code>
     */
    public int getBgSignal() {
      return bgSignal_;
    }

    // optional uint32 bgSignalThreshold = 2;
    public static final int BGSIGNALTHRESHOLD_FIELD_NUMBER = 2;
    private int bgSignalThreshold_;
    /**
     * <code>optional uint32 bgSignalThreshold = 2;</code>
     */
    public boolean hasBgSignalThreshold() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 bgSignalThreshold = 2;</code>
     */
    public int getBgSignalThreshold() {
      return bgSignalThreshold_;
    }

    // optional uint32 bgSignalCalibration = 3;
    public static final int BGSIGNALCALIBRATION_FIELD_NUMBER = 3;
    private int bgSignalCalibration_;
    /**
     * <code>optional uint32 bgSignalCalibration = 3;</code>
     */
    public boolean hasBgSignalCalibration() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 bgSignalCalibration = 3;</code>
     */
    public int getBgSignalCalibration() {
      return bgSignalCalibration_;
    }

    private void initFields() {
      bgSignal_ = 0;
      bgSignalThreshold_ = 0;
      bgSignalCalibration_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, bgSignal_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, bgSignalThreshold_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, bgSignalCalibration_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, bgSignal_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, bgSignalThreshold_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, bgSignalCalibration_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static ExtSmoke parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ExtSmoke parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ExtSmoke parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ExtSmoke parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ExtSmoke parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ExtSmoke parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static ExtSmoke parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static ExtSmoke parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static ExtSmoke parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ExtSmoke parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(ExtSmoke prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ExtSmoke}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements ExtSmokeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_ExtSmoke_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_ExtSmoke_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ExtSmoke.class, Builder.class);
      }

      // Construct using MsgNode1V1M32.ExtSmoke.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bgSignal_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        bgSignalThreshold_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        bgSignalCalibration_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_ExtSmoke_descriptor;
      }

      public ExtSmoke getDefaultInstanceForType() {
        return ExtSmoke.getDefaultInstance();
      }

      public ExtSmoke build() {
        ExtSmoke result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ExtSmoke buildPartial() {
        ExtSmoke result = new ExtSmoke(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bgSignal_ = bgSignal_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.bgSignalThreshold_ = bgSignalThreshold_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.bgSignalCalibration_ = bgSignalCalibration_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ExtSmoke) {
          return mergeFrom((ExtSmoke)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ExtSmoke other) {
        if (other == ExtSmoke.getDefaultInstance()) return this;
        if (other.hasBgSignal()) {
          setBgSignal(other.getBgSignal());
        }
        if (other.hasBgSignalThreshold()) {
          setBgSignalThreshold(other.getBgSignalThreshold());
        }
        if (other.hasBgSignalCalibration()) {
          setBgSignalCalibration(other.getBgSignalCalibration());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ExtSmoke parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ExtSmoke) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 bgSignal = 1;
      private int bgSignal_ ;
      /**
       * <code>optional uint32 bgSignal = 1;</code>
       */
      public boolean hasBgSignal() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 bgSignal = 1;</code>
       */
      public int getBgSignal() {
        return bgSignal_;
      }
      /**
       * <code>optional uint32 bgSignal = 1;</code>
       */
      public Builder setBgSignal(int value) {
        bitField0_ |= 0x00000001;
        bgSignal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bgSignal = 1;</code>
       */
      public Builder clearBgSignal() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bgSignal_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 bgSignalThreshold = 2;
      private int bgSignalThreshold_ ;
      /**
       * <code>optional uint32 bgSignalThreshold = 2;</code>
       */
      public boolean hasBgSignalThreshold() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 bgSignalThreshold = 2;</code>
       */
      public int getBgSignalThreshold() {
        return bgSignalThreshold_;
      }
      /**
       * <code>optional uint32 bgSignalThreshold = 2;</code>
       */
      public Builder setBgSignalThreshold(int value) {
        bitField0_ |= 0x00000002;
        bgSignalThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bgSignalThreshold = 2;</code>
       */
      public Builder clearBgSignalThreshold() {
        bitField0_ = (bitField0_ & ~0x00000002);
        bgSignalThreshold_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 bgSignalCalibration = 3;
      private int bgSignalCalibration_ ;
      /**
       * <code>optional uint32 bgSignalCalibration = 3;</code>
       */
      public boolean hasBgSignalCalibration() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 bgSignalCalibration = 3;</code>
       */
      public int getBgSignalCalibration() {
        return bgSignalCalibration_;
      }
      /**
       * <code>optional uint32 bgSignalCalibration = 3;</code>
       */
      public Builder setBgSignalCalibration(int value) {
        bitField0_ |= 0x00000004;
        bgSignalCalibration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bgSignalCalibration = 3;</code>
       */
      public Builder clearBgSignalCalibration() {
        bitField0_ = (bitField0_ & ~0x00000004);
        bgSignalCalibration_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ExtSmoke)
    }

    static {
      defaultInstance = new ExtSmoke(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ExtSmoke)
  }

  public interface AppParamOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .AppCmd cmd = 1;
    /**
     * <code>optional .AppCmd cmd = 1;</code>
     *
     * <pre>
     * 指令 (下)
     * </pre>
     */
    boolean hasCmd();
    /**
     * <code>optional .AppCmd cmd = 1;</code>
     *
     * <pre>
     * 指令 (下)
     * </pre>
     */
    AppCmd getCmd();

    // optional uint32 uploadInterval = 2;
    /**
     * <code>optional uint32 uploadInterval = 2;</code>
     *
     * <pre>
     * 上报周期 (上|下)
     * </pre>
     */
    boolean hasUploadInterval();
    /**
     * <code>optional uint32 uploadInterval = 2;</code>
     *
     * <pre>
     * 上报周期 (上|下)
     * </pre>
     */
    int getUploadInterval();

    // optional uint32 syncTime = 3;
    /**
     * <code>optional uint32 syncTime = 3;</code>
     */
    boolean hasSyncTime();
    /**
     * <code>optional uint32 syncTime = 3;</code>
     */
    int getSyncTime();

    // optional .NodeState nodeState = 4;
    /**
     * <code>optional .NodeState nodeState = 4;</code>
     */
    boolean hasNodeState();
    /**
     * <code>optional .NodeState nodeState = 4;</code>
     */
    NodeState getNodeState();

    // optional .NodeAlarm nodeAlarm = 5;
    /**
     * <code>optional .NodeAlarm nodeAlarm = 5;</code>
     */
    boolean hasNodeAlarm();
    /**
     * <code>optional .NodeAlarm nodeAlarm = 5;</code>
     */
    NodeAlarm getNodeAlarm();

    // optional uint32 nodeAlarmSet = 6;
    /**
     * <code>optional uint32 nodeAlarmSet = 6;</code>
     */
    boolean hasNodeAlarmSet();
    /**
     * <code>optional uint32 nodeAlarmSet = 6;</code>
     */
    int getNodeAlarmSet();

    // optional uint32 confirm = 7;
    /**
     * <code>optional uint32 confirm = 7;</code>
     */
    boolean hasConfirm();
    /**
     * <code>optional uint32 confirm = 7;</code>
     */
    int getConfirm();

    // optional .SmokeCtrl smokeCtrl = 8;
    /**
     * <code>optional .SmokeCtrl smokeCtrl = 8;</code>
     */
    boolean hasSmokeCtrl();
    /**
     * <code>optional .SmokeCtrl smokeCtrl = 8;</code>
     */
    SmokeCtrl getSmokeCtrl();

    // optional uint32 uploadRepeat = 9;
    /**
     * <code>optional uint32 uploadRepeat = 9;</code>
     *
     * <pre>
     * 每次上报包数 (上|下)
     * </pre>
     */
    boolean hasUploadRepeat();
    /**
     * <code>optional uint32 uploadRepeat = 9;</code>
     *
     * <pre>
     * 每次上报包数 (上|下)
     * </pre>
     */
    int getUploadRepeat();

    // optional uint32 alarmUploadInterval = 10;
    /**
     * <code>optional uint32 alarmUploadInterval = 10;</code>
     *
     * <pre>
     * 报警上报周期 (上|下)
     * </pre>
     */
    boolean hasAlarmUploadInterval();
    /**
     * <code>optional uint32 alarmUploadInterval = 10;</code>
     *
     * <pre>
     * 报警上报周期 (上|下)
     * </pre>
     */
    int getAlarmUploadInterval();

    // optional uint32 alarmUploadNb = 11;
    /**
     * <code>optional uint32 alarmUploadNb = 11;</code>
     *
     * <pre>
     * 报警上报, 每次上报包数 (上|下)
     * </pre>
     */
    boolean hasAlarmUploadNb();
    /**
     * <code>optional uint32 alarmUploadNb = 11;</code>
     *
     * <pre>
     * 报警上报, 每次上报包数 (上|下)
     * </pre>
     */
    int getAlarmUploadNb();

    // optional .TrackerCtrl trackerCtrl = 12;
    /**
     * <code>optional .TrackerCtrl trackerCtrl = 12;</code>
     */
    boolean hasTrackerCtrl();
    /**
     * <code>optional .TrackerCtrl trackerCtrl = 12;</code>
     */
    TrackerCtrl getTrackerCtrl();

    // optional uint32 trackerEmergencyTime = 13;
    /**
     * <code>optional uint32 trackerEmergencyTime = 13;</code>
     */
    boolean hasTrackerEmergencyTime();
    /**
     * <code>optional uint32 trackerEmergencyTime = 13;</code>
     */
    int getTrackerEmergencyTime();

    // optional uint32 demoMode = 14;
    /**
     * <code>optional uint32 demoMode = 14;</code>
     *
     * <pre>
     * 演示模式 (上|下)
     * </pre>
     */
    boolean hasDemoMode();
    /**
     * <code>optional uint32 demoMode = 14;</code>
     *
     * <pre>
     * 演示模式 (上|下)
     * </pre>
     */
    int getDemoMode();

    // optional uint32 lowBatteryBeep = 15;
    /**
     * <code>optional uint32 lowBatteryBeep = 15;</code>
     *
     * <pre>
     * 低电蜂鸣开关 (上|下)
     * </pre>
     */
    boolean hasLowBatteryBeep();
    /**
     * <code>optional uint32 lowBatteryBeep = 15;</code>
     *
     * <pre>
     * 低电蜂鸣开关 (上|下)
     * </pre>
     */
    int getLowBatteryBeep();

    // optional uint32 beepMuteTime = 16;
    /**
     * <code>optional uint32 beepMuteTime = 16;</code>
     *
     * <pre>
     * 定时消音定时参数 (上|下)
     * </pre>
     */
    boolean hasBeepMuteTime();
    /**
     * <code>optional uint32 beepMuteTime = 16;</code>
     *
     * <pre>
     * 定时消音定时参数 (上|下)
     * </pre>
     */
    int getBeepMuteTime();

    // optional uint32 ledStatus = 17;
    /**
     * <code>optional uint32 ledStatus = 17;</code>
     *
     * <pre>
     * 状态灯的开关 (上|下)
     * </pre>
     */
    boolean hasLedStatus();
    /**
     * <code>optional uint32 ledStatus = 17;</code>
     *
     * <pre>
     * 状态灯的开关 (上|下)
     * </pre>
     */
    int getLedStatus();

    // optional uint32 alertModeStatus = 18;
    /**
     * <code>optional uint32 alertModeStatus = 18;</code>
     *
     * <pre>
     * 设备移动报警开关 （上|下）
     * </pre>
     */
    boolean hasAlertModeStatus();
    /**
     * <code>optional uint32 alertModeStatus = 18;</code>
     *
     * <pre>
     * 设备移动报警开关 （上|下）
     * </pre>
     */
    int getAlertModeStatus();

    // repeated .AppCmd supportCmds = 19;
    /**
     * <code>repeated .AppCmd supportCmds = 19;</code>
     *
     * <pre>
     * 告知app,设备支持哪些cmd
     * </pre>
     */
    java.util.List<AppCmd> getSupportCmdsList();
    /**
     * <code>repeated .AppCmd supportCmds = 19;</code>
     *
     * <pre>
     * 告知app,设备支持哪些cmd
     * </pre>
     */
    int getSupportCmdsCount();
    /**
     * <code>repeated .AppCmd supportCmds = 19;</code>
     *
     * <pre>
     * 告知app,设备支持哪些cmd
     * </pre>
     */
    AppCmd getSupportCmds(int index);

    // optional uint32 alarmShieldSwitch = 20;
    /**
     * <code>optional uint32 alarmShieldSwitch = 20;</code>
     *
     * <pre>
     * 报警永久屏蔽开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    boolean hasAlarmShieldSwitch();
    /**
     * <code>optional uint32 alarmShieldSwitch = 20;</code>
     *
     * <pre>
     * 报警永久屏蔽开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    int getAlarmShieldSwitch();

    // optional uint32 alarmShieldTime = 21;
    /**
     * <code>optional uint32 alarmShieldTime = 21;</code>
     *
     * <pre>
     * 报警临时屏蔽时间, 单位s, (上|下)
     * </pre>
     */
    boolean hasAlarmShieldTime();
    /**
     * <code>optional uint32 alarmShieldTime = 21;</code>
     *
     * <pre>
     * 报警临时屏蔽时间, 单位s, (上|下)
     * </pre>
     */
    int getAlarmShieldTime();

    // optional uint32 errorInsulateSwitch = 22;
    /**
     * <code>optional uint32 errorInsulateSwitch = 22;</code>
     *
     * <pre>
     * 故障隔离开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    boolean hasErrorInsulateSwitch();
    /**
     * <code>optional uint32 errorInsulateSwitch = 22;</code>
     *
     * <pre>
     * 故障隔离开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    int getErrorInsulateSwitch();

    // optional uint32 warningSwitch = 23;
    /**
     * <code>optional uint32 warningSwitch = 23;</code>
     *
     * <pre>
     * 警告开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    boolean hasWarningSwitch();
    /**
     * <code>optional uint32 warningSwitch = 23;</code>
     *
     * <pre>
     * 警告开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    int getWarningSwitch();

    // optional uint32 deployStatus = 24;
    /**
     * <code>optional uint32 deployStatus = 24;</code>
     *
     * <pre>
     * 部署状态, 范围 [0 - 1], (上|下)
     * </pre>
     */
    boolean hasDeployStatus();
    /**
     * <code>optional uint32 deployStatus = 24;</code>
     *
     * <pre>
     * 部署状态, 范围 [0 - 1], (上|下)
     * </pre>
     */
    int getDeployStatus();

    // optional uint32 insuranceStatus = 25;
    /**
     * <code>optional uint32 insuranceStatus = 25;</code>
     *
     * <pre>
     * 保险状态, 范围 [0 - 1], (上|下)
     * </pre>
     */
    boolean hasInsuranceStatus();
    /**
     * <code>optional uint32 insuranceStatus = 25;</code>
     *
     * <pre>
     * 保险状态, 范围 [0 - 1], (上|下)
     * </pre>
     */
    int getInsuranceStatus();
  }
  /**
   * Protobuf type {@code AppParam}
   */
  public static final class AppParam extends
      com.google.protobuf.GeneratedMessage
      implements AppParamOrBuilder {
    // Use AppParam.newBuilder() to construct.
    private AppParam(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AppParam(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AppParam defaultInstance;
    public static AppParam getDefaultInstance() {
      return defaultInstance;
    }

    public AppParam getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AppParam(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              AppCmd value = AppCmd.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                cmd_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              uploadInterval_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              syncTime_ = input.readUInt32();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              NodeState value = NodeState.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                nodeState_ = value;
              }
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              NodeAlarm value = NodeAlarm.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                nodeAlarm_ = value;
              }
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              nodeAlarmSet_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              confirm_ = input.readUInt32();
              break;
            }
            case 64: {
              int rawValue = input.readEnum();
              SmokeCtrl value = SmokeCtrl.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(8, rawValue);
              } else {
                bitField0_ |= 0x00000080;
                smokeCtrl_ = value;
              }
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              uploadRepeat_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              alarmUploadInterval_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              alarmUploadNb_ = input.readUInt32();
              break;
            }
            case 96: {
              int rawValue = input.readEnum();
              TrackerCtrl value = TrackerCtrl.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(12, rawValue);
              } else {
                bitField0_ |= 0x00000800;
                trackerCtrl_ = value;
              }
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              trackerEmergencyTime_ = input.readUInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              demoMode_ = input.readUInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              lowBatteryBeep_ = input.readUInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              beepMuteTime_ = input.readUInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              ledStatus_ = input.readUInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              alertModeStatus_ = input.readUInt32();
              break;
            }
            case 152: {
              int rawValue = input.readEnum();
              AppCmd value = AppCmd.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(19, rawValue);
              } else {
                if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                  supportCmds_ = new java.util.ArrayList<AppCmd>();
                  mutable_bitField0_ |= 0x00040000;
                }
                supportCmds_.add(value);
              }
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                AppCmd value = AppCmd.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(19, rawValue);
                } else {
                  if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                    supportCmds_ = new java.util.ArrayList<AppCmd>();
                    mutable_bitField0_ |= 0x00040000;
                  }
                  supportCmds_.add(value);
                }
              }
              input.popLimit(oldLimit);
              break;
            }
            case 160: {
              bitField0_ |= 0x00040000;
              alarmShieldSwitch_ = input.readUInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00080000;
              alarmShieldTime_ = input.readUInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00100000;
              errorInsulateSwitch_ = input.readUInt32();
              break;
            }
            case 184: {
              bitField0_ |= 0x00200000;
              warningSwitch_ = input.readUInt32();
              break;
            }
            case 192: {
              bitField0_ |= 0x00400000;
              deployStatus_ = input.readUInt32();
              break;
            }
            case 200: {
              bitField0_ |= 0x00800000;
              insuranceStatus_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          supportCmds_ = java.util.Collections.unmodifiableList(supportCmds_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_AppParam_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_AppParam_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AppParam.class, Builder.class);
    }

    public static com.google.protobuf.Parser<AppParam> PARSER =
        new com.google.protobuf.AbstractParser<AppParam>() {
      public AppParam parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AppParam(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<AppParam> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .AppCmd cmd = 1;
    public static final int CMD_FIELD_NUMBER = 1;
    private AppCmd cmd_;
    /**
     * <code>optional .AppCmd cmd = 1;</code>
     *
     * <pre>
     * 指令 (下)
     * </pre>
     */
    public boolean hasCmd() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .AppCmd cmd = 1;</code>
     *
     * <pre>
     * 指令 (下)
     * </pre>
     */
    public AppCmd getCmd() {
      return cmd_;
    }

    // optional uint32 uploadInterval = 2;
    public static final int UPLOADINTERVAL_FIELD_NUMBER = 2;
    private int uploadInterval_;
    /**
     * <code>optional uint32 uploadInterval = 2;</code>
     *
     * <pre>
     * 上报周期 (上|下)
     * </pre>
     */
    public boolean hasUploadInterval() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 uploadInterval = 2;</code>
     *
     * <pre>
     * 上报周期 (上|下)
     * </pre>
     */
    public int getUploadInterval() {
      return uploadInterval_;
    }

    // optional uint32 syncTime = 3;
    public static final int SYNCTIME_FIELD_NUMBER = 3;
    private int syncTime_;
    /**
     * <code>optional uint32 syncTime = 3;</code>
     */
    public boolean hasSyncTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 syncTime = 3;</code>
     */
    public int getSyncTime() {
      return syncTime_;
    }

    // optional .NodeState nodeState = 4;
    public static final int NODESTATE_FIELD_NUMBER = 4;
    private NodeState nodeState_;
    /**
     * <code>optional .NodeState nodeState = 4;</code>
     */
    public boolean hasNodeState() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .NodeState nodeState = 4;</code>
     */
    public NodeState getNodeState() {
      return nodeState_;
    }

    // optional .NodeAlarm nodeAlarm = 5;
    public static final int NODEALARM_FIELD_NUMBER = 5;
    private NodeAlarm nodeAlarm_;
    /**
     * <code>optional .NodeAlarm nodeAlarm = 5;</code>
     */
    public boolean hasNodeAlarm() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .NodeAlarm nodeAlarm = 5;</code>
     */
    public NodeAlarm getNodeAlarm() {
      return nodeAlarm_;
    }

    // optional uint32 nodeAlarmSet = 6;
    public static final int NODEALARMSET_FIELD_NUMBER = 6;
    private int nodeAlarmSet_;
    /**
     * <code>optional uint32 nodeAlarmSet = 6;</code>
     */
    public boolean hasNodeAlarmSet() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 nodeAlarmSet = 6;</code>
     */
    public int getNodeAlarmSet() {
      return nodeAlarmSet_;
    }

    // optional uint32 confirm = 7;
    public static final int CONFIRM_FIELD_NUMBER = 7;
    private int confirm_;
    /**
     * <code>optional uint32 confirm = 7;</code>
     */
    public boolean hasConfirm() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 confirm = 7;</code>
     */
    public int getConfirm() {
      return confirm_;
    }

    // optional .SmokeCtrl smokeCtrl = 8;
    public static final int SMOKECTRL_FIELD_NUMBER = 8;
    private SmokeCtrl smokeCtrl_;
    /**
     * <code>optional .SmokeCtrl smokeCtrl = 8;</code>
     */
    public boolean hasSmokeCtrl() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .SmokeCtrl smokeCtrl = 8;</code>
     */
    public SmokeCtrl getSmokeCtrl() {
      return smokeCtrl_;
    }

    // optional uint32 uploadRepeat = 9;
    public static final int UPLOADREPEAT_FIELD_NUMBER = 9;
    private int uploadRepeat_;
    /**
     * <code>optional uint32 uploadRepeat = 9;</code>
     *
     * <pre>
     * 每次上报包数 (上|下)
     * </pre>
     */
    public boolean hasUploadRepeat() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 uploadRepeat = 9;</code>
     *
     * <pre>
     * 每次上报包数 (上|下)
     * </pre>
     */
    public int getUploadRepeat() {
      return uploadRepeat_;
    }

    // optional uint32 alarmUploadInterval = 10;
    public static final int ALARMUPLOADINTERVAL_FIELD_NUMBER = 10;
    private int alarmUploadInterval_;
    /**
     * <code>optional uint32 alarmUploadInterval = 10;</code>
     *
     * <pre>
     * 报警上报周期 (上|下)
     * </pre>
     */
    public boolean hasAlarmUploadInterval() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 alarmUploadInterval = 10;</code>
     *
     * <pre>
     * 报警上报周期 (上|下)
     * </pre>
     */
    public int getAlarmUploadInterval() {
      return alarmUploadInterval_;
    }

    // optional uint32 alarmUploadNb = 11;
    public static final int ALARMUPLOADNB_FIELD_NUMBER = 11;
    private int alarmUploadNb_;
    /**
     * <code>optional uint32 alarmUploadNb = 11;</code>
     *
     * <pre>
     * 报警上报, 每次上报包数 (上|下)
     * </pre>
     */
    public boolean hasAlarmUploadNb() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 alarmUploadNb = 11;</code>
     *
     * <pre>
     * 报警上报, 每次上报包数 (上|下)
     * </pre>
     */
    public int getAlarmUploadNb() {
      return alarmUploadNb_;
    }

    // optional .TrackerCtrl trackerCtrl = 12;
    public static final int TRACKERCTRL_FIELD_NUMBER = 12;
    private TrackerCtrl trackerCtrl_;
    /**
     * <code>optional .TrackerCtrl trackerCtrl = 12;</code>
     */
    public boolean hasTrackerCtrl() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .TrackerCtrl trackerCtrl = 12;</code>
     */
    public TrackerCtrl getTrackerCtrl() {
      return trackerCtrl_;
    }

    // optional uint32 trackerEmergencyTime = 13;
    public static final int TRACKEREMERGENCYTIME_FIELD_NUMBER = 13;
    private int trackerEmergencyTime_;
    /**
     * <code>optional uint32 trackerEmergencyTime = 13;</code>
     */
    public boolean hasTrackerEmergencyTime() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint32 trackerEmergencyTime = 13;</code>
     */
    public int getTrackerEmergencyTime() {
      return trackerEmergencyTime_;
    }

    // optional uint32 demoMode = 14;
    public static final int DEMOMODE_FIELD_NUMBER = 14;
    private int demoMode_;
    /**
     * <code>optional uint32 demoMode = 14;</code>
     *
     * <pre>
     * 演示模式 (上|下)
     * </pre>
     */
    public boolean hasDemoMode() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional uint32 demoMode = 14;</code>
     *
     * <pre>
     * 演示模式 (上|下)
     * </pre>
     */
    public int getDemoMode() {
      return demoMode_;
    }

    // optional uint32 lowBatteryBeep = 15;
    public static final int LOWBATTERYBEEP_FIELD_NUMBER = 15;
    private int lowBatteryBeep_;
    /**
     * <code>optional uint32 lowBatteryBeep = 15;</code>
     *
     * <pre>
     * 低电蜂鸣开关 (上|下)
     * </pre>
     */
    public boolean hasLowBatteryBeep() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional uint32 lowBatteryBeep = 15;</code>
     *
     * <pre>
     * 低电蜂鸣开关 (上|下)
     * </pre>
     */
    public int getLowBatteryBeep() {
      return lowBatteryBeep_;
    }

    // optional uint32 beepMuteTime = 16;
    public static final int BEEPMUTETIME_FIELD_NUMBER = 16;
    private int beepMuteTime_;
    /**
     * <code>optional uint32 beepMuteTime = 16;</code>
     *
     * <pre>
     * 定时消音定时参数 (上|下)
     * </pre>
     */
    public boolean hasBeepMuteTime() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional uint32 beepMuteTime = 16;</code>
     *
     * <pre>
     * 定时消音定时参数 (上|下)
     * </pre>
     */
    public int getBeepMuteTime() {
      return beepMuteTime_;
    }

    // optional uint32 ledStatus = 17;
    public static final int LEDSTATUS_FIELD_NUMBER = 17;
    private int ledStatus_;
    /**
     * <code>optional uint32 ledStatus = 17;</code>
     *
     * <pre>
     * 状态灯的开关 (上|下)
     * </pre>
     */
    public boolean hasLedStatus() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional uint32 ledStatus = 17;</code>
     *
     * <pre>
     * 状态灯的开关 (上|下)
     * </pre>
     */
    public int getLedStatus() {
      return ledStatus_;
    }

    // optional uint32 alertModeStatus = 18;
    public static final int ALERTMODESTATUS_FIELD_NUMBER = 18;
    private int alertModeStatus_;
    /**
     * <code>optional uint32 alertModeStatus = 18;</code>
     *
     * <pre>
     * 设备移动报警开关 （上|下）
     * </pre>
     */
    public boolean hasAlertModeStatus() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional uint32 alertModeStatus = 18;</code>
     *
     * <pre>
     * 设备移动报警开关 （上|下）
     * </pre>
     */
    public int getAlertModeStatus() {
      return alertModeStatus_;
    }

    // repeated .AppCmd supportCmds = 19;
    public static final int SUPPORTCMDS_FIELD_NUMBER = 19;
    private java.util.List<AppCmd> supportCmds_;
    /**
     * <code>repeated .AppCmd supportCmds = 19;</code>
     *
     * <pre>
     * 告知app,设备支持哪些cmd
     * </pre>
     */
    public java.util.List<AppCmd> getSupportCmdsList() {
      return supportCmds_;
    }
    /**
     * <code>repeated .AppCmd supportCmds = 19;</code>
     *
     * <pre>
     * 告知app,设备支持哪些cmd
     * </pre>
     */
    public int getSupportCmdsCount() {
      return supportCmds_.size();
    }
    /**
     * <code>repeated .AppCmd supportCmds = 19;</code>
     *
     * <pre>
     * 告知app,设备支持哪些cmd
     * </pre>
     */
    public AppCmd getSupportCmds(int index) {
      return supportCmds_.get(index);
    }

    // optional uint32 alarmShieldSwitch = 20;
    public static final int ALARMSHIELDSWITCH_FIELD_NUMBER = 20;
    private int alarmShieldSwitch_;
    /**
     * <code>optional uint32 alarmShieldSwitch = 20;</code>
     *
     * <pre>
     * 报警永久屏蔽开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public boolean hasAlarmShieldSwitch() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional uint32 alarmShieldSwitch = 20;</code>
     *
     * <pre>
     * 报警永久屏蔽开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public int getAlarmShieldSwitch() {
      return alarmShieldSwitch_;
    }

    // optional uint32 alarmShieldTime = 21;
    public static final int ALARMSHIELDTIME_FIELD_NUMBER = 21;
    private int alarmShieldTime_;
    /**
     * <code>optional uint32 alarmShieldTime = 21;</code>
     *
     * <pre>
     * 报警临时屏蔽时间, 单位s, (上|下)
     * </pre>
     */
    public boolean hasAlarmShieldTime() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional uint32 alarmShieldTime = 21;</code>
     *
     * <pre>
     * 报警临时屏蔽时间, 单位s, (上|下)
     * </pre>
     */
    public int getAlarmShieldTime() {
      return alarmShieldTime_;
    }

    // optional uint32 errorInsulateSwitch = 22;
    public static final int ERRORINSULATESWITCH_FIELD_NUMBER = 22;
    private int errorInsulateSwitch_;
    /**
     * <code>optional uint32 errorInsulateSwitch = 22;</code>
     *
     * <pre>
     * 故障隔离开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public boolean hasErrorInsulateSwitch() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional uint32 errorInsulateSwitch = 22;</code>
     *
     * <pre>
     * 故障隔离开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public int getErrorInsulateSwitch() {
      return errorInsulateSwitch_;
    }

    // optional uint32 warningSwitch = 23;
    public static final int WARNINGSWITCH_FIELD_NUMBER = 23;
    private int warningSwitch_;
    /**
     * <code>optional uint32 warningSwitch = 23;</code>
     *
     * <pre>
     * 警告开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public boolean hasWarningSwitch() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional uint32 warningSwitch = 23;</code>
     *
     * <pre>
     * 警告开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public int getWarningSwitch() {
      return warningSwitch_;
    }

    // optional uint32 deployStatus = 24;
    public static final int DEPLOYSTATUS_FIELD_NUMBER = 24;
    private int deployStatus_;
    /**
     * <code>optional uint32 deployStatus = 24;</code>
     *
     * <pre>
     * 部署状态, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public boolean hasDeployStatus() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional uint32 deployStatus = 24;</code>
     *
     * <pre>
     * 部署状态, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public int getDeployStatus() {
      return deployStatus_;
    }

    // optional uint32 insuranceStatus = 25;
    public static final int INSURANCESTATUS_FIELD_NUMBER = 25;
    private int insuranceStatus_;
    /**
     * <code>optional uint32 insuranceStatus = 25;</code>
     *
     * <pre>
     * 保险状态, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public boolean hasInsuranceStatus() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional uint32 insuranceStatus = 25;</code>
     *
     * <pre>
     * 保险状态, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public int getInsuranceStatus() {
      return insuranceStatus_;
    }

    private void initFields() {
      cmd_ = AppCmd.APP_CMD_NONE;
      uploadInterval_ = 0;
      syncTime_ = 0;
      nodeState_ = NodeState.NODE_STATE_UNKNOWN;
      nodeAlarm_ = NodeAlarm.NODE_ALARM_NONE;
      nodeAlarmSet_ = 0;
      confirm_ = 0;
      smokeCtrl_ = SmokeCtrl.SMOKE_CTRL_NONE;
      uploadRepeat_ = 0;
      alarmUploadInterval_ = 0;
      alarmUploadNb_ = 0;
      trackerCtrl_ = TrackerCtrl.TRACKER_Ctrl;
      trackerEmergencyTime_ = 0;
      demoMode_ = 0;
      lowBatteryBeep_ = 0;
      beepMuteTime_ = 0;
      ledStatus_ = 0;
      alertModeStatus_ = 0;
      supportCmds_ = java.util.Collections.emptyList();
      alarmShieldSwitch_ = 0;
      alarmShieldTime_ = 0;
      errorInsulateSwitch_ = 0;
      warningSwitch_ = 0;
      deployStatus_ = 0;
      insuranceStatus_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, cmd_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, uploadInterval_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, syncTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, nodeState_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, nodeAlarm_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, nodeAlarmSet_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, confirm_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(8, smokeCtrl_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, uploadRepeat_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, alarmUploadInterval_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(11, alarmUploadNb_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeEnum(12, trackerCtrl_.getNumber());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(13, trackerEmergencyTime_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeUInt32(14, demoMode_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeUInt32(15, lowBatteryBeep_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeUInt32(16, beepMuteTime_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeUInt32(17, ledStatus_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeUInt32(18, alertModeStatus_);
      }
      for (int i = 0; i < supportCmds_.size(); i++) {
        output.writeEnum(19, supportCmds_.get(i).getNumber());
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeUInt32(20, alarmShieldSwitch_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeUInt32(21, alarmShieldTime_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeUInt32(22, errorInsulateSwitch_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeUInt32(23, warningSwitch_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeUInt32(24, deployStatus_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeUInt32(25, insuranceStatus_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, cmd_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, uploadInterval_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, syncTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, nodeState_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, nodeAlarm_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, nodeAlarmSet_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, confirm_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, smokeCtrl_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, uploadRepeat_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, alarmUploadInterval_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, alarmUploadNb_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(12, trackerCtrl_.getNumber());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, trackerEmergencyTime_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(14, demoMode_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(15, lowBatteryBeep_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(16, beepMuteTime_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(17, ledStatus_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(18, alertModeStatus_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < supportCmds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(supportCmds_.get(i).getNumber());
        }
        size += dataSize;
        size += 2 * supportCmds_.size();
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(20, alarmShieldSwitch_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(21, alarmShieldTime_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(22, errorInsulateSwitch_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(23, warningSwitch_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(24, deployStatus_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(25, insuranceStatus_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AppParam parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AppParam parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AppParam parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AppParam parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AppParam parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AppParam parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AppParam parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AppParam parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AppParam parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AppParam parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AppParam prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AppParam}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements AppParamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_AppParam_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_AppParam_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AppParam.class, Builder.class);
      }

      // Construct using MsgNode1V1M32.AppParam.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cmd_ = AppCmd.APP_CMD_NONE;
        bitField0_ = (bitField0_ & ~0x00000001);
        uploadInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        syncTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        nodeState_ = NodeState.NODE_STATE_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000008);
        nodeAlarm_ = NodeAlarm.NODE_ALARM_NONE;
        bitField0_ = (bitField0_ & ~0x00000010);
        nodeAlarmSet_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        confirm_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        smokeCtrl_ = SmokeCtrl.SMOKE_CTRL_NONE;
        bitField0_ = (bitField0_ & ~0x00000080);
        uploadRepeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        alarmUploadInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        alarmUploadNb_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        trackerCtrl_ = TrackerCtrl.TRACKER_Ctrl;
        bitField0_ = (bitField0_ & ~0x00000800);
        trackerEmergencyTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        demoMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        lowBatteryBeep_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        beepMuteTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        ledStatus_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        alertModeStatus_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        supportCmds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        alarmShieldSwitch_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        alarmShieldTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        errorInsulateSwitch_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        warningSwitch_ = 0;
        bitField0_ = (bitField0_ & ~0x00400000);
        deployStatus_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        insuranceStatus_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_AppParam_descriptor;
      }

      public AppParam getDefaultInstanceForType() {
        return AppParam.getDefaultInstance();
      }

      public AppParam build() {
        AppParam result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AppParam buildPartial() {
        AppParam result = new AppParam(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cmd_ = cmd_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.uploadInterval_ = uploadInterval_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.syncTime_ = syncTime_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.nodeState_ = nodeState_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.nodeAlarm_ = nodeAlarm_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.nodeAlarmSet_ = nodeAlarmSet_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.confirm_ = confirm_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.smokeCtrl_ = smokeCtrl_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.uploadRepeat_ = uploadRepeat_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.alarmUploadInterval_ = alarmUploadInterval_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.alarmUploadNb_ = alarmUploadNb_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.trackerCtrl_ = trackerCtrl_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.trackerEmergencyTime_ = trackerEmergencyTime_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.demoMode_ = demoMode_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.lowBatteryBeep_ = lowBatteryBeep_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.beepMuteTime_ = beepMuteTime_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.ledStatus_ = ledStatus_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.alertModeStatus_ = alertModeStatus_;
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          supportCmds_ = java.util.Collections.unmodifiableList(supportCmds_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.supportCmds_ = supportCmds_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.alarmShieldSwitch_ = alarmShieldSwitch_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.alarmShieldTime_ = alarmShieldTime_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.errorInsulateSwitch_ = errorInsulateSwitch_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.warningSwitch_ = warningSwitch_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.deployStatus_ = deployStatus_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.insuranceStatus_ = insuranceStatus_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AppParam) {
          return mergeFrom((AppParam)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AppParam other) {
        if (other == AppParam.getDefaultInstance()) return this;
        if (other.hasCmd()) {
          setCmd(other.getCmd());
        }
        if (other.hasUploadInterval()) {
          setUploadInterval(other.getUploadInterval());
        }
        if (other.hasSyncTime()) {
          setSyncTime(other.getSyncTime());
        }
        if (other.hasNodeState()) {
          setNodeState(other.getNodeState());
        }
        if (other.hasNodeAlarm()) {
          setNodeAlarm(other.getNodeAlarm());
        }
        if (other.hasNodeAlarmSet()) {
          setNodeAlarmSet(other.getNodeAlarmSet());
        }
        if (other.hasConfirm()) {
          setConfirm(other.getConfirm());
        }
        if (other.hasSmokeCtrl()) {
          setSmokeCtrl(other.getSmokeCtrl());
        }
        if (other.hasUploadRepeat()) {
          setUploadRepeat(other.getUploadRepeat());
        }
        if (other.hasAlarmUploadInterval()) {
          setAlarmUploadInterval(other.getAlarmUploadInterval());
        }
        if (other.hasAlarmUploadNb()) {
          setAlarmUploadNb(other.getAlarmUploadNb());
        }
        if (other.hasTrackerCtrl()) {
          setTrackerCtrl(other.getTrackerCtrl());
        }
        if (other.hasTrackerEmergencyTime()) {
          setTrackerEmergencyTime(other.getTrackerEmergencyTime());
        }
        if (other.hasDemoMode()) {
          setDemoMode(other.getDemoMode());
        }
        if (other.hasLowBatteryBeep()) {
          setLowBatteryBeep(other.getLowBatteryBeep());
        }
        if (other.hasBeepMuteTime()) {
          setBeepMuteTime(other.getBeepMuteTime());
        }
        if (other.hasLedStatus()) {
          setLedStatus(other.getLedStatus());
        }
        if (other.hasAlertModeStatus()) {
          setAlertModeStatus(other.getAlertModeStatus());
        }
        if (!other.supportCmds_.isEmpty()) {
          if (supportCmds_.isEmpty()) {
            supportCmds_ = other.supportCmds_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureSupportCmdsIsMutable();
            supportCmds_.addAll(other.supportCmds_);
          }
          onChanged();
        }
        if (other.hasAlarmShieldSwitch()) {
          setAlarmShieldSwitch(other.getAlarmShieldSwitch());
        }
        if (other.hasAlarmShieldTime()) {
          setAlarmShieldTime(other.getAlarmShieldTime());
        }
        if (other.hasErrorInsulateSwitch()) {
          setErrorInsulateSwitch(other.getErrorInsulateSwitch());
        }
        if (other.hasWarningSwitch()) {
          setWarningSwitch(other.getWarningSwitch());
        }
        if (other.hasDeployStatus()) {
          setDeployStatus(other.getDeployStatus());
        }
        if (other.hasInsuranceStatus()) {
          setInsuranceStatus(other.getInsuranceStatus());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AppParam parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AppParam) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .AppCmd cmd = 1;
      private AppCmd cmd_ = AppCmd.APP_CMD_NONE;
      /**
       * <code>optional .AppCmd cmd = 1;</code>
       *
       * <pre>
       * 指令 (下)
       * </pre>
       */
      public boolean hasCmd() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .AppCmd cmd = 1;</code>
       *
       * <pre>
       * 指令 (下)
       * </pre>
       */
      public AppCmd getCmd() {
        return cmd_;
      }
      /**
       * <code>optional .AppCmd cmd = 1;</code>
       *
       * <pre>
       * 指令 (下)
       * </pre>
       */
      public Builder setCmd(AppCmd value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        cmd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .AppCmd cmd = 1;</code>
       *
       * <pre>
       * 指令 (下)
       * </pre>
       */
      public Builder clearCmd() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cmd_ = AppCmd.APP_CMD_NONE;
        onChanged();
        return this;
      }

      // optional uint32 uploadInterval = 2;
      private int uploadInterval_ ;
      /**
       * <code>optional uint32 uploadInterval = 2;</code>
       *
       * <pre>
       * 上报周期 (上|下)
       * </pre>
       */
      public boolean hasUploadInterval() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 uploadInterval = 2;</code>
       *
       * <pre>
       * 上报周期 (上|下)
       * </pre>
       */
      public int getUploadInterval() {
        return uploadInterval_;
      }
      /**
       * <code>optional uint32 uploadInterval = 2;</code>
       *
       * <pre>
       * 上报周期 (上|下)
       * </pre>
       */
      public Builder setUploadInterval(int value) {
        bitField0_ |= 0x00000002;
        uploadInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 uploadInterval = 2;</code>
       *
       * <pre>
       * 上报周期 (上|下)
       * </pre>
       */
      public Builder clearUploadInterval() {
        bitField0_ = (bitField0_ & ~0x00000002);
        uploadInterval_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 syncTime = 3;
      private int syncTime_ ;
      /**
       * <code>optional uint32 syncTime = 3;</code>
       */
      public boolean hasSyncTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 syncTime = 3;</code>
       */
      public int getSyncTime() {
        return syncTime_;
      }
      /**
       * <code>optional uint32 syncTime = 3;</code>
       */
      public Builder setSyncTime(int value) {
        bitField0_ |= 0x00000004;
        syncTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 syncTime = 3;</code>
       */
      public Builder clearSyncTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        syncTime_ = 0;
        onChanged();
        return this;
      }

      // optional .NodeState nodeState = 4;
      private NodeState nodeState_ = NodeState.NODE_STATE_UNKNOWN;
      /**
       * <code>optional .NodeState nodeState = 4;</code>
       */
      public boolean hasNodeState() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .NodeState nodeState = 4;</code>
       */
      public NodeState getNodeState() {
        return nodeState_;
      }
      /**
       * <code>optional .NodeState nodeState = 4;</code>
       */
      public Builder setNodeState(NodeState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        nodeState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .NodeState nodeState = 4;</code>
       */
      public Builder clearNodeState() {
        bitField0_ = (bitField0_ & ~0x00000008);
        nodeState_ = NodeState.NODE_STATE_UNKNOWN;
        onChanged();
        return this;
      }

      // optional .NodeAlarm nodeAlarm = 5;
      private NodeAlarm nodeAlarm_ = NodeAlarm.NODE_ALARM_NONE;
      /**
       * <code>optional .NodeAlarm nodeAlarm = 5;</code>
       */
      public boolean hasNodeAlarm() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .NodeAlarm nodeAlarm = 5;</code>
       */
      public NodeAlarm getNodeAlarm() {
        return nodeAlarm_;
      }
      /**
       * <code>optional .NodeAlarm nodeAlarm = 5;</code>
       */
      public Builder setNodeAlarm(NodeAlarm value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        nodeAlarm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .NodeAlarm nodeAlarm = 5;</code>
       */
      public Builder clearNodeAlarm() {
        bitField0_ = (bitField0_ & ~0x00000010);
        nodeAlarm_ = NodeAlarm.NODE_ALARM_NONE;
        onChanged();
        return this;
      }

      // optional uint32 nodeAlarmSet = 6;
      private int nodeAlarmSet_ ;
      /**
       * <code>optional uint32 nodeAlarmSet = 6;</code>
       */
      public boolean hasNodeAlarmSet() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 nodeAlarmSet = 6;</code>
       */
      public int getNodeAlarmSet() {
        return nodeAlarmSet_;
      }
      /**
       * <code>optional uint32 nodeAlarmSet = 6;</code>
       */
      public Builder setNodeAlarmSet(int value) {
        bitField0_ |= 0x00000020;
        nodeAlarmSet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 nodeAlarmSet = 6;</code>
       */
      public Builder clearNodeAlarmSet() {
        bitField0_ = (bitField0_ & ~0x00000020);
        nodeAlarmSet_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 confirm = 7;
      private int confirm_ ;
      /**
       * <code>optional uint32 confirm = 7;</code>
       */
      public boolean hasConfirm() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 confirm = 7;</code>
       */
      public int getConfirm() {
        return confirm_;
      }
      /**
       * <code>optional uint32 confirm = 7;</code>
       */
      public Builder setConfirm(int value) {
        bitField0_ |= 0x00000040;
        confirm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 confirm = 7;</code>
       */
      public Builder clearConfirm() {
        bitField0_ = (bitField0_ & ~0x00000040);
        confirm_ = 0;
        onChanged();
        return this;
      }

      // optional .SmokeCtrl smokeCtrl = 8;
      private SmokeCtrl smokeCtrl_ = SmokeCtrl.SMOKE_CTRL_NONE;
      /**
       * <code>optional .SmokeCtrl smokeCtrl = 8;</code>
       */
      public boolean hasSmokeCtrl() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .SmokeCtrl smokeCtrl = 8;</code>
       */
      public SmokeCtrl getSmokeCtrl() {
        return smokeCtrl_;
      }
      /**
       * <code>optional .SmokeCtrl smokeCtrl = 8;</code>
       */
      public Builder setSmokeCtrl(SmokeCtrl value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        smokeCtrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .SmokeCtrl smokeCtrl = 8;</code>
       */
      public Builder clearSmokeCtrl() {
        bitField0_ = (bitField0_ & ~0x00000080);
        smokeCtrl_ = SmokeCtrl.SMOKE_CTRL_NONE;
        onChanged();
        return this;
      }

      // optional uint32 uploadRepeat = 9;
      private int uploadRepeat_ ;
      /**
       * <code>optional uint32 uploadRepeat = 9;</code>
       *
       * <pre>
       * 每次上报包数 (上|下)
       * </pre>
       */
      public boolean hasUploadRepeat() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 uploadRepeat = 9;</code>
       *
       * <pre>
       * 每次上报包数 (上|下)
       * </pre>
       */
      public int getUploadRepeat() {
        return uploadRepeat_;
      }
      /**
       * <code>optional uint32 uploadRepeat = 9;</code>
       *
       * <pre>
       * 每次上报包数 (上|下)
       * </pre>
       */
      public Builder setUploadRepeat(int value) {
        bitField0_ |= 0x00000100;
        uploadRepeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 uploadRepeat = 9;</code>
       *
       * <pre>
       * 每次上报包数 (上|下)
       * </pre>
       */
      public Builder clearUploadRepeat() {
        bitField0_ = (bitField0_ & ~0x00000100);
        uploadRepeat_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 alarmUploadInterval = 10;
      private int alarmUploadInterval_ ;
      /**
       * <code>optional uint32 alarmUploadInterval = 10;</code>
       *
       * <pre>
       * 报警上报周期 (上|下)
       * </pre>
       */
      public boolean hasAlarmUploadInterval() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 alarmUploadInterval = 10;</code>
       *
       * <pre>
       * 报警上报周期 (上|下)
       * </pre>
       */
      public int getAlarmUploadInterval() {
        return alarmUploadInterval_;
      }
      /**
       * <code>optional uint32 alarmUploadInterval = 10;</code>
       *
       * <pre>
       * 报警上报周期 (上|下)
       * </pre>
       */
      public Builder setAlarmUploadInterval(int value) {
        bitField0_ |= 0x00000200;
        alarmUploadInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 alarmUploadInterval = 10;</code>
       *
       * <pre>
       * 报警上报周期 (上|下)
       * </pre>
       */
      public Builder clearAlarmUploadInterval() {
        bitField0_ = (bitField0_ & ~0x00000200);
        alarmUploadInterval_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 alarmUploadNb = 11;
      private int alarmUploadNb_ ;
      /**
       * <code>optional uint32 alarmUploadNb = 11;</code>
       *
       * <pre>
       * 报警上报, 每次上报包数 (上|下)
       * </pre>
       */
      public boolean hasAlarmUploadNb() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 alarmUploadNb = 11;</code>
       *
       * <pre>
       * 报警上报, 每次上报包数 (上|下)
       * </pre>
       */
      public int getAlarmUploadNb() {
        return alarmUploadNb_;
      }
      /**
       * <code>optional uint32 alarmUploadNb = 11;</code>
       *
       * <pre>
       * 报警上报, 每次上报包数 (上|下)
       * </pre>
       */
      public Builder setAlarmUploadNb(int value) {
        bitField0_ |= 0x00000400;
        alarmUploadNb_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 alarmUploadNb = 11;</code>
       *
       * <pre>
       * 报警上报, 每次上报包数 (上|下)
       * </pre>
       */
      public Builder clearAlarmUploadNb() {
        bitField0_ = (bitField0_ & ~0x00000400);
        alarmUploadNb_ = 0;
        onChanged();
        return this;
      }

      // optional .TrackerCtrl trackerCtrl = 12;
      private TrackerCtrl trackerCtrl_ = TrackerCtrl.TRACKER_Ctrl;
      /**
       * <code>optional .TrackerCtrl trackerCtrl = 12;</code>
       */
      public boolean hasTrackerCtrl() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .TrackerCtrl trackerCtrl = 12;</code>
       */
      public TrackerCtrl getTrackerCtrl() {
        return trackerCtrl_;
      }
      /**
       * <code>optional .TrackerCtrl trackerCtrl = 12;</code>
       */
      public Builder setTrackerCtrl(TrackerCtrl value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000800;
        trackerCtrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .TrackerCtrl trackerCtrl = 12;</code>
       */
      public Builder clearTrackerCtrl() {
        bitField0_ = (bitField0_ & ~0x00000800);
        trackerCtrl_ = TrackerCtrl.TRACKER_Ctrl;
        onChanged();
        return this;
      }

      // optional uint32 trackerEmergencyTime = 13;
      private int trackerEmergencyTime_ ;
      /**
       * <code>optional uint32 trackerEmergencyTime = 13;</code>
       */
      public boolean hasTrackerEmergencyTime() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 trackerEmergencyTime = 13;</code>
       */
      public int getTrackerEmergencyTime() {
        return trackerEmergencyTime_;
      }
      /**
       * <code>optional uint32 trackerEmergencyTime = 13;</code>
       */
      public Builder setTrackerEmergencyTime(int value) {
        bitField0_ |= 0x00001000;
        trackerEmergencyTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 trackerEmergencyTime = 13;</code>
       */
      public Builder clearTrackerEmergencyTime() {
        bitField0_ = (bitField0_ & ~0x00001000);
        trackerEmergencyTime_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 demoMode = 14;
      private int demoMode_ ;
      /**
       * <code>optional uint32 demoMode = 14;</code>
       *
       * <pre>
       * 演示模式 (上|下)
       * </pre>
       */
      public boolean hasDemoMode() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional uint32 demoMode = 14;</code>
       *
       * <pre>
       * 演示模式 (上|下)
       * </pre>
       */
      public int getDemoMode() {
        return demoMode_;
      }
      /**
       * <code>optional uint32 demoMode = 14;</code>
       *
       * <pre>
       * 演示模式 (上|下)
       * </pre>
       */
      public Builder setDemoMode(int value) {
        bitField0_ |= 0x00002000;
        demoMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 demoMode = 14;</code>
       *
       * <pre>
       * 演示模式 (上|下)
       * </pre>
       */
      public Builder clearDemoMode() {
        bitField0_ = (bitField0_ & ~0x00002000);
        demoMode_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 lowBatteryBeep = 15;
      private int lowBatteryBeep_ ;
      /**
       * <code>optional uint32 lowBatteryBeep = 15;</code>
       *
       * <pre>
       * 低电蜂鸣开关 (上|下)
       * </pre>
       */
      public boolean hasLowBatteryBeep() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional uint32 lowBatteryBeep = 15;</code>
       *
       * <pre>
       * 低电蜂鸣开关 (上|下)
       * </pre>
       */
      public int getLowBatteryBeep() {
        return lowBatteryBeep_;
      }
      /**
       * <code>optional uint32 lowBatteryBeep = 15;</code>
       *
       * <pre>
       * 低电蜂鸣开关 (上|下)
       * </pre>
       */
      public Builder setLowBatteryBeep(int value) {
        bitField0_ |= 0x00004000;
        lowBatteryBeep_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 lowBatteryBeep = 15;</code>
       *
       * <pre>
       * 低电蜂鸣开关 (上|下)
       * </pre>
       */
      public Builder clearLowBatteryBeep() {
        bitField0_ = (bitField0_ & ~0x00004000);
        lowBatteryBeep_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 beepMuteTime = 16;
      private int beepMuteTime_ ;
      /**
       * <code>optional uint32 beepMuteTime = 16;</code>
       *
       * <pre>
       * 定时消音定时参数 (上|下)
       * </pre>
       */
      public boolean hasBeepMuteTime() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional uint32 beepMuteTime = 16;</code>
       *
       * <pre>
       * 定时消音定时参数 (上|下)
       * </pre>
       */
      public int getBeepMuteTime() {
        return beepMuteTime_;
      }
      /**
       * <code>optional uint32 beepMuteTime = 16;</code>
       *
       * <pre>
       * 定时消音定时参数 (上|下)
       * </pre>
       */
      public Builder setBeepMuteTime(int value) {
        bitField0_ |= 0x00008000;
        beepMuteTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 beepMuteTime = 16;</code>
       *
       * <pre>
       * 定时消音定时参数 (上|下)
       * </pre>
       */
      public Builder clearBeepMuteTime() {
        bitField0_ = (bitField0_ & ~0x00008000);
        beepMuteTime_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 ledStatus = 17;
      private int ledStatus_ ;
      /**
       * <code>optional uint32 ledStatus = 17;</code>
       *
       * <pre>
       * 状态灯的开关 (上|下)
       * </pre>
       */
      public boolean hasLedStatus() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional uint32 ledStatus = 17;</code>
       *
       * <pre>
       * 状态灯的开关 (上|下)
       * </pre>
       */
      public int getLedStatus() {
        return ledStatus_;
      }
      /**
       * <code>optional uint32 ledStatus = 17;</code>
       *
       * <pre>
       * 状态灯的开关 (上|下)
       * </pre>
       */
      public Builder setLedStatus(int value) {
        bitField0_ |= 0x00010000;
        ledStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ledStatus = 17;</code>
       *
       * <pre>
       * 状态灯的开关 (上|下)
       * </pre>
       */
      public Builder clearLedStatus() {
        bitField0_ = (bitField0_ & ~0x00010000);
        ledStatus_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 alertModeStatus = 18;
      private int alertModeStatus_ ;
      /**
       * <code>optional uint32 alertModeStatus = 18;</code>
       *
       * <pre>
       * 设备移动报警开关 （上|下）
       * </pre>
       */
      public boolean hasAlertModeStatus() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional uint32 alertModeStatus = 18;</code>
       *
       * <pre>
       * 设备移动报警开关 （上|下）
       * </pre>
       */
      public int getAlertModeStatus() {
        return alertModeStatus_;
      }
      /**
       * <code>optional uint32 alertModeStatus = 18;</code>
       *
       * <pre>
       * 设备移动报警开关 （上|下）
       * </pre>
       */
      public Builder setAlertModeStatus(int value) {
        bitField0_ |= 0x00020000;
        alertModeStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 alertModeStatus = 18;</code>
       *
       * <pre>
       * 设备移动报警开关 （上|下）
       * </pre>
       */
      public Builder clearAlertModeStatus() {
        bitField0_ = (bitField0_ & ~0x00020000);
        alertModeStatus_ = 0;
        onChanged();
        return this;
      }

      // repeated .AppCmd supportCmds = 19;
      private java.util.List<AppCmd> supportCmds_ =
        java.util.Collections.emptyList();
      private void ensureSupportCmdsIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          supportCmds_ = new java.util.ArrayList<AppCmd>(supportCmds_);
          bitField0_ |= 0x00040000;
        }
      }
      /**
       * <code>repeated .AppCmd supportCmds = 19;</code>
       *
       * <pre>
       * 告知app,设备支持哪些cmd
       * </pre>
       */
      public java.util.List<AppCmd> getSupportCmdsList() {
        return java.util.Collections.unmodifiableList(supportCmds_);
      }
      /**
       * <code>repeated .AppCmd supportCmds = 19;</code>
       *
       * <pre>
       * 告知app,设备支持哪些cmd
       * </pre>
       */
      public int getSupportCmdsCount() {
        return supportCmds_.size();
      }
      /**
       * <code>repeated .AppCmd supportCmds = 19;</code>
       *
       * <pre>
       * 告知app,设备支持哪些cmd
       * </pre>
       */
      public AppCmd getSupportCmds(int index) {
        return supportCmds_.get(index);
      }
      /**
       * <code>repeated .AppCmd supportCmds = 19;</code>
       *
       * <pre>
       * 告知app,设备支持哪些cmd
       * </pre>
       */
      public Builder setSupportCmds(
          int index, AppCmd value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSupportCmdsIsMutable();
        supportCmds_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .AppCmd supportCmds = 19;</code>
       *
       * <pre>
       * 告知app,设备支持哪些cmd
       * </pre>
       */
      public Builder addSupportCmds(AppCmd value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSupportCmdsIsMutable();
        supportCmds_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .AppCmd supportCmds = 19;</code>
       *
       * <pre>
       * 告知app,设备支持哪些cmd
       * </pre>
       */
      public Builder addAllSupportCmds(
          Iterable<? extends AppCmd> values) {
        ensureSupportCmdsIsMutable();
        super.addAll(values, supportCmds_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .AppCmd supportCmds = 19;</code>
       *
       * <pre>
       * 告知app,设备支持哪些cmd
       * </pre>
       */
      public Builder clearSupportCmds() {
        supportCmds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // optional uint32 alarmShieldSwitch = 20;
      private int alarmShieldSwitch_ ;
      /**
       * <code>optional uint32 alarmShieldSwitch = 20;</code>
       *
       * <pre>
       * 报警永久屏蔽开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public boolean hasAlarmShieldSwitch() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional uint32 alarmShieldSwitch = 20;</code>
       *
       * <pre>
       * 报警永久屏蔽开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public int getAlarmShieldSwitch() {
        return alarmShieldSwitch_;
      }
      /**
       * <code>optional uint32 alarmShieldSwitch = 20;</code>
       *
       * <pre>
       * 报警永久屏蔽开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder setAlarmShieldSwitch(int value) {
        bitField0_ |= 0x00080000;
        alarmShieldSwitch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 alarmShieldSwitch = 20;</code>
       *
       * <pre>
       * 报警永久屏蔽开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder clearAlarmShieldSwitch() {
        bitField0_ = (bitField0_ & ~0x00080000);
        alarmShieldSwitch_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 alarmShieldTime = 21;
      private int alarmShieldTime_ ;
      /**
       * <code>optional uint32 alarmShieldTime = 21;</code>
       *
       * <pre>
       * 报警临时屏蔽时间, 单位s, (上|下)
       * </pre>
       */
      public boolean hasAlarmShieldTime() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional uint32 alarmShieldTime = 21;</code>
       *
       * <pre>
       * 报警临时屏蔽时间, 单位s, (上|下)
       * </pre>
       */
      public int getAlarmShieldTime() {
        return alarmShieldTime_;
      }
      /**
       * <code>optional uint32 alarmShieldTime = 21;</code>
       *
       * <pre>
       * 报警临时屏蔽时间, 单位s, (上|下)
       * </pre>
       */
      public Builder setAlarmShieldTime(int value) {
        bitField0_ |= 0x00100000;
        alarmShieldTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 alarmShieldTime = 21;</code>
       *
       * <pre>
       * 报警临时屏蔽时间, 单位s, (上|下)
       * </pre>
       */
      public Builder clearAlarmShieldTime() {
        bitField0_ = (bitField0_ & ~0x00100000);
        alarmShieldTime_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 errorInsulateSwitch = 22;
      private int errorInsulateSwitch_ ;
      /**
       * <code>optional uint32 errorInsulateSwitch = 22;</code>
       *
       * <pre>
       * 故障隔离开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public boolean hasErrorInsulateSwitch() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional uint32 errorInsulateSwitch = 22;</code>
       *
       * <pre>
       * 故障隔离开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public int getErrorInsulateSwitch() {
        return errorInsulateSwitch_;
      }
      /**
       * <code>optional uint32 errorInsulateSwitch = 22;</code>
       *
       * <pre>
       * 故障隔离开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder setErrorInsulateSwitch(int value) {
        bitField0_ |= 0x00200000;
        errorInsulateSwitch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 errorInsulateSwitch = 22;</code>
       *
       * <pre>
       * 故障隔离开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder clearErrorInsulateSwitch() {
        bitField0_ = (bitField0_ & ~0x00200000);
        errorInsulateSwitch_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 warningSwitch = 23;
      private int warningSwitch_ ;
      /**
       * <code>optional uint32 warningSwitch = 23;</code>
       *
       * <pre>
       * 警告开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public boolean hasWarningSwitch() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional uint32 warningSwitch = 23;</code>
       *
       * <pre>
       * 警告开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public int getWarningSwitch() {
        return warningSwitch_;
      }
      /**
       * <code>optional uint32 warningSwitch = 23;</code>
       *
       * <pre>
       * 警告开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder setWarningSwitch(int value) {
        bitField0_ |= 0x00400000;
        warningSwitch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 warningSwitch = 23;</code>
       *
       * <pre>
       * 警告开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder clearWarningSwitch() {
        bitField0_ = (bitField0_ & ~0x00400000);
        warningSwitch_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 deployStatus = 24;
      private int deployStatus_ ;
      /**
       * <code>optional uint32 deployStatus = 24;</code>
       *
       * <pre>
       * 部署状态, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public boolean hasDeployStatus() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional uint32 deployStatus = 24;</code>
       *
       * <pre>
       * 部署状态, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public int getDeployStatus() {
        return deployStatus_;
      }
      /**
       * <code>optional uint32 deployStatus = 24;</code>
       *
       * <pre>
       * 部署状态, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder setDeployStatus(int value) {
        bitField0_ |= 0x00800000;
        deployStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 deployStatus = 24;</code>
       *
       * <pre>
       * 部署状态, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder clearDeployStatus() {
        bitField0_ = (bitField0_ & ~0x00800000);
        deployStatus_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 insuranceStatus = 25;
      private int insuranceStatus_ ;
      /**
       * <code>optional uint32 insuranceStatus = 25;</code>
       *
       * <pre>
       * 保险状态, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public boolean hasInsuranceStatus() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional uint32 insuranceStatus = 25;</code>
       *
       * <pre>
       * 保险状态, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public int getInsuranceStatus() {
        return insuranceStatus_;
      }
      /**
       * <code>optional uint32 insuranceStatus = 25;</code>
       *
       * <pre>
       * 保险状态, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder setInsuranceStatus(int value) {
        bitField0_ |= 0x01000000;
        insuranceStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 insuranceStatus = 25;</code>
       *
       * <pre>
       * 保险状态, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder clearInsuranceStatus() {
        bitField0_ = (bitField0_ & ~0x01000000);
        insuranceStatus_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:AppParam)
    }

    static {
      defaultInstance = new AppParam(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AppParam)
  }

  public interface ElecFireDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional sint32 vol_val = 1;
    /**
     * <code>optional sint32 vol_val = 1;</code>
     */
    boolean hasVolVal();
    /**
     * <code>optional sint32 vol_val = 1;</code>
     */
    int getVolVal();

    // optional uint32 curr_val = 2;
    /**
     * <code>optional uint32 curr_val = 2;</code>
     */
    boolean hasCurrVal();
    /**
     * <code>optional uint32 curr_val = 2;</code>
     */
    int getCurrVal();

    // optional sint32 leakage_val = 3;
    /**
     * <code>optional sint32 leakage_val = 3;</code>
     */
    boolean hasLeakageVal();
    /**
     * <code>optional sint32 leakage_val = 3;</code>
     */
    int getLeakageVal();

    // optional uint32 power_val = 4;
    /**
     * <code>optional uint32 power_val = 4;</code>
     */
    boolean hasPowerVal();
    /**
     * <code>optional uint32 power_val = 4;</code>
     */
    int getPowerVal();

    // optional uint32 elec_energy_val = 5;
    /**
     * <code>optional uint32 elec_energy_val = 5;</code>
     */
    boolean hasElecEnergyVal();
    /**
     * <code>optional uint32 elec_energy_val = 5;</code>
     */
    int getElecEnergyVal();

    // optional uint32 temp_val = 6;
    /**
     * <code>optional uint32 temp_val = 6;</code>
     */
    boolean hasTempVal();
    /**
     * <code>optional uint32 temp_val = 6;</code>
     */
    int getTempVal();

    // optional uint32 status = 7;
    /**
     * <code>optional uint32 status = 7;</code>
     */
    boolean hasStatus();
    /**
     * <code>optional uint32 status = 7;</code>
     */
    int getStatus();

    // optional uint32 alarm = 8;
    /**
     * <code>optional uint32 alarm = 8;</code>
     */
    boolean hasAlarm();
    /**
     * <code>optional uint32 alarm = 8;</code>
     */
    int getAlarm();

    // optional uint32 error = 9;
    /**
     * <code>optional uint32 error = 9;</code>
     */
    boolean hasError();
    /**
     * <code>optional uint32 error = 9;</code>
     */
    int getError();

    // optional uint32 sensorPwd = 10;
    /**
     * <code>optional uint32 sensorPwd = 10;</code>
     */
    boolean hasSensorPwd();
    /**
     * <code>optional uint32 sensorPwd = 10;</code>
     */
    int getSensorPwd();

    // optional uint32 leakageTh = 11;
    /**
     * <code>optional uint32 leakageTh = 11;</code>
     */
    boolean hasLeakageTh();
    /**
     * <code>optional uint32 leakageTh = 11;</code>
     */
    int getLeakageTh();

    // optional uint32 tempTh = 12;
    /**
     * <code>optional uint32 tempTh = 12;</code>
     */
    boolean hasTempTh();
    /**
     * <code>optional uint32 tempTh = 12;</code>
     */
    int getTempTh();

    // optional uint32 currentTh = 13;
    /**
     * <code>optional uint32 currentTh = 13;</code>
     */
    boolean hasCurrentTh();
    /**
     * <code>optional uint32 currentTh = 13;</code>
     */
    int getCurrentTh();

    // optional uint32 loadTh = 14;
    /**
     * <code>optional uint32 loadTh = 14;</code>
     */
    boolean hasLoadTh();
    /**
     * <code>optional uint32 loadTh = 14;</code>
     */
    int getLoadTh();

    // optional uint32 volHighTh = 15;
    /**
     * <code>optional uint32 volHighTh = 15;</code>
     */
    boolean hasVolHighTh();
    /**
     * <code>optional uint32 volHighTh = 15;</code>
     */
    int getVolHighTh();

    // optional uint32 volLowTh = 16;
    /**
     * <code>optional uint32 volLowTh = 16;</code>
     */
    boolean hasVolLowTh();
    /**
     * <code>optional uint32 volLowTh = 16;</code>
     */
    int getVolLowTh();

    // optional uint32 cmd = 17;
    /**
     * <code>optional uint32 cmd = 17;</code>
     */
    boolean hasCmd();
    /**
     * <code>optional uint32 cmd = 17;</code>
     */
    int getCmd();

    // optional uint32 autoSwitch = 18;
    /**
     * <code>optional uint32 autoSwitch = 18;</code>
     */
    boolean hasAutoSwitch();
    /**
     * <code>optional uint32 autoSwitch = 18;</code>
     */
    int getAutoSwitch();
  }
  /**
   * Protobuf type {@code ElecFireData}
   */
  public static final class ElecFireData extends
      com.google.protobuf.GeneratedMessage
      implements ElecFireDataOrBuilder {
    // Use ElecFireData.newBuilder() to construct.
    private ElecFireData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ElecFireData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ElecFireData defaultInstance;
    public static ElecFireData getDefaultInstance() {
      return defaultInstance;
    }

    public ElecFireData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ElecFireData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              volVal_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              currVal_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              leakageVal_ = input.readSInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              powerVal_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              elecEnergyVal_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              tempVal_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              status_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              alarm_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              error_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              sensorPwd_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              leakageTh_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              tempTh_ = input.readUInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              currentTh_ = input.readUInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              loadTh_ = input.readUInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              volHighTh_ = input.readUInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              volLowTh_ = input.readUInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              cmd_ = input.readUInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              autoSwitch_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_ElecFireData_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_ElecFireData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ElecFireData.class, Builder.class);
    }

    public static com.google.protobuf.Parser<ElecFireData> PARSER =
        new com.google.protobuf.AbstractParser<ElecFireData>() {
      public ElecFireData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ElecFireData(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<ElecFireData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional sint32 vol_val = 1;
    public static final int VOL_VAL_FIELD_NUMBER = 1;
    private int volVal_;
    /**
     * <code>optional sint32 vol_val = 1;</code>
     */
    public boolean hasVolVal() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional sint32 vol_val = 1;</code>
     */
    public int getVolVal() {
      return volVal_;
    }

    // optional uint32 curr_val = 2;
    public static final int CURR_VAL_FIELD_NUMBER = 2;
    private int currVal_;
    /**
     * <code>optional uint32 curr_val = 2;</code>
     */
    public boolean hasCurrVal() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 curr_val = 2;</code>
     */
    public int getCurrVal() {
      return currVal_;
    }

    // optional sint32 leakage_val = 3;
    public static final int LEAKAGE_VAL_FIELD_NUMBER = 3;
    private int leakageVal_;
    /**
     * <code>optional sint32 leakage_val = 3;</code>
     */
    public boolean hasLeakageVal() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 leakage_val = 3;</code>
     */
    public int getLeakageVal() {
      return leakageVal_;
    }

    // optional uint32 power_val = 4;
    public static final int POWER_VAL_FIELD_NUMBER = 4;
    private int powerVal_;
    /**
     * <code>optional uint32 power_val = 4;</code>
     */
    public boolean hasPowerVal() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 power_val = 4;</code>
     */
    public int getPowerVal() {
      return powerVal_;
    }

    // optional uint32 elec_energy_val = 5;
    public static final int ELEC_ENERGY_VAL_FIELD_NUMBER = 5;
    private int elecEnergyVal_;
    /**
     * <code>optional uint32 elec_energy_val = 5;</code>
     */
    public boolean hasElecEnergyVal() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 elec_energy_val = 5;</code>
     */
    public int getElecEnergyVal() {
      return elecEnergyVal_;
    }

    // optional uint32 temp_val = 6;
    public static final int TEMP_VAL_FIELD_NUMBER = 6;
    private int tempVal_;
    /**
     * <code>optional uint32 temp_val = 6;</code>
     */
    public boolean hasTempVal() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 temp_val = 6;</code>
     */
    public int getTempVal() {
      return tempVal_;
    }

    // optional uint32 status = 7;
    public static final int STATUS_FIELD_NUMBER = 7;
    private int status_;
    /**
     * <code>optional uint32 status = 7;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 status = 7;</code>
     */
    public int getStatus() {
      return status_;
    }

    // optional uint32 alarm = 8;
    public static final int ALARM_FIELD_NUMBER = 8;
    private int alarm_;
    /**
     * <code>optional uint32 alarm = 8;</code>
     */
    public boolean hasAlarm() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 alarm = 8;</code>
     */
    public int getAlarm() {
      return alarm_;
    }

    // optional uint32 error = 9;
    public static final int ERROR_FIELD_NUMBER = 9;
    private int error_;
    /**
     * <code>optional uint32 error = 9;</code>
     */
    public boolean hasError() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 error = 9;</code>
     */
    public int getError() {
      return error_;
    }

    // optional uint32 sensorPwd = 10;
    public static final int SENSORPWD_FIELD_NUMBER = 10;
    private int sensorPwd_;
    /**
     * <code>optional uint32 sensorPwd = 10;</code>
     */
    public boolean hasSensorPwd() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 sensorPwd = 10;</code>
     */
    public int getSensorPwd() {
      return sensorPwd_;
    }

    // optional uint32 leakageTh = 11;
    public static final int LEAKAGETH_FIELD_NUMBER = 11;
    private int leakageTh_;
    /**
     * <code>optional uint32 leakageTh = 11;</code>
     */
    public boolean hasLeakageTh() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 leakageTh = 11;</code>
     */
    public int getLeakageTh() {
      return leakageTh_;
    }

    // optional uint32 tempTh = 12;
    public static final int TEMPTH_FIELD_NUMBER = 12;
    private int tempTh_;
    /**
     * <code>optional uint32 tempTh = 12;</code>
     */
    public boolean hasTempTh() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 tempTh = 12;</code>
     */
    public int getTempTh() {
      return tempTh_;
    }

    // optional uint32 currentTh = 13;
    public static final int CURRENTTH_FIELD_NUMBER = 13;
    private int currentTh_;
    /**
     * <code>optional uint32 currentTh = 13;</code>
     */
    public boolean hasCurrentTh() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint32 currentTh = 13;</code>
     */
    public int getCurrentTh() {
      return currentTh_;
    }

    // optional uint32 loadTh = 14;
    public static final int LOADTH_FIELD_NUMBER = 14;
    private int loadTh_;
    /**
     * <code>optional uint32 loadTh = 14;</code>
     */
    public boolean hasLoadTh() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional uint32 loadTh = 14;</code>
     */
    public int getLoadTh() {
      return loadTh_;
    }

    // optional uint32 volHighTh = 15;
    public static final int VOLHIGHTH_FIELD_NUMBER = 15;
    private int volHighTh_;
    /**
     * <code>optional uint32 volHighTh = 15;</code>
     */
    public boolean hasVolHighTh() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional uint32 volHighTh = 15;</code>
     */
    public int getVolHighTh() {
      return volHighTh_;
    }

    // optional uint32 volLowTh = 16;
    public static final int VOLLOWTH_FIELD_NUMBER = 16;
    private int volLowTh_;
    /**
     * <code>optional uint32 volLowTh = 16;</code>
     */
    public boolean hasVolLowTh() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional uint32 volLowTh = 16;</code>
     */
    public int getVolLowTh() {
      return volLowTh_;
    }

    // optional uint32 cmd = 17;
    public static final int CMD_FIELD_NUMBER = 17;
    private int cmd_;
    /**
     * <code>optional uint32 cmd = 17;</code>
     */
    public boolean hasCmd() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional uint32 cmd = 17;</code>
     */
    public int getCmd() {
      return cmd_;
    }

    // optional uint32 autoSwitch = 18;
    public static final int AUTOSWITCH_FIELD_NUMBER = 18;
    private int autoSwitch_;
    /**
     * <code>optional uint32 autoSwitch = 18;</code>
     */
    public boolean hasAutoSwitch() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional uint32 autoSwitch = 18;</code>
     */
    public int getAutoSwitch() {
      return autoSwitch_;
    }

    private void initFields() {
      volVal_ = 0;
      currVal_ = 0;
      leakageVal_ = 0;
      powerVal_ = 0;
      elecEnergyVal_ = 0;
      tempVal_ = 0;
      status_ = 0;
      alarm_ = 0;
      error_ = 0;
      sensorPwd_ = 0;
      leakageTh_ = 0;
      tempTh_ = 0;
      currentTh_ = 0;
      loadTh_ = 0;
      volHighTh_ = 0;
      volLowTh_ = 0;
      cmd_ = 0;
      autoSwitch_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, volVal_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, currVal_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, leakageVal_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, powerVal_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, elecEnergyVal_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, tempVal_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, status_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, alarm_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, error_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, sensorPwd_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(11, leakageTh_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(12, tempTh_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(13, currentTh_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeUInt32(14, loadTh_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeUInt32(15, volHighTh_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeUInt32(16, volLowTh_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeUInt32(17, cmd_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeUInt32(18, autoSwitch_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, volVal_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, currVal_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, leakageVal_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, powerVal_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, elecEnergyVal_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, tempVal_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, status_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, alarm_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, error_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, sensorPwd_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, leakageTh_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, tempTh_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, currentTh_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(14, loadTh_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(15, volHighTh_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(16, volLowTh_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(17, cmd_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(18, autoSwitch_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static ElecFireData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ElecFireData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ElecFireData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ElecFireData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ElecFireData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ElecFireData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static ElecFireData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static ElecFireData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static ElecFireData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ElecFireData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(ElecFireData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ElecFireData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements ElecFireDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_ElecFireData_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_ElecFireData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ElecFireData.class, Builder.class);
      }

      // Construct using MsgNode1V1M32.ElecFireData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        volVal_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        currVal_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        leakageVal_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        powerVal_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        elecEnergyVal_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        tempVal_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        status_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        alarm_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        error_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        sensorPwd_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        leakageTh_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        tempTh_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        currentTh_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        loadTh_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        volHighTh_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        volLowTh_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        cmd_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        autoSwitch_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_ElecFireData_descriptor;
      }

      public ElecFireData getDefaultInstanceForType() {
        return ElecFireData.getDefaultInstance();
      }

      public ElecFireData build() {
        ElecFireData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ElecFireData buildPartial() {
        ElecFireData result = new ElecFireData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.volVal_ = volVal_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currVal_ = currVal_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.leakageVal_ = leakageVal_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.powerVal_ = powerVal_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.elecEnergyVal_ = elecEnergyVal_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.tempVal_ = tempVal_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.status_ = status_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.alarm_ = alarm_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.error_ = error_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.sensorPwd_ = sensorPwd_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.leakageTh_ = leakageTh_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.tempTh_ = tempTh_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.currentTh_ = currentTh_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.loadTh_ = loadTh_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.volHighTh_ = volHighTh_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.volLowTh_ = volLowTh_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.cmd_ = cmd_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.autoSwitch_ = autoSwitch_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ElecFireData) {
          return mergeFrom((ElecFireData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ElecFireData other) {
        if (other == ElecFireData.getDefaultInstance()) return this;
        if (other.hasVolVal()) {
          setVolVal(other.getVolVal());
        }
        if (other.hasCurrVal()) {
          setCurrVal(other.getCurrVal());
        }
        if (other.hasLeakageVal()) {
          setLeakageVal(other.getLeakageVal());
        }
        if (other.hasPowerVal()) {
          setPowerVal(other.getPowerVal());
        }
        if (other.hasElecEnergyVal()) {
          setElecEnergyVal(other.getElecEnergyVal());
        }
        if (other.hasTempVal()) {
          setTempVal(other.getTempVal());
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        if (other.hasAlarm()) {
          setAlarm(other.getAlarm());
        }
        if (other.hasError()) {
          setError(other.getError());
        }
        if (other.hasSensorPwd()) {
          setSensorPwd(other.getSensorPwd());
        }
        if (other.hasLeakageTh()) {
          setLeakageTh(other.getLeakageTh());
        }
        if (other.hasTempTh()) {
          setTempTh(other.getTempTh());
        }
        if (other.hasCurrentTh()) {
          setCurrentTh(other.getCurrentTh());
        }
        if (other.hasLoadTh()) {
          setLoadTh(other.getLoadTh());
        }
        if (other.hasVolHighTh()) {
          setVolHighTh(other.getVolHighTh());
        }
        if (other.hasVolLowTh()) {
          setVolLowTh(other.getVolLowTh());
        }
        if (other.hasCmd()) {
          setCmd(other.getCmd());
        }
        if (other.hasAutoSwitch()) {
          setAutoSwitch(other.getAutoSwitch());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ElecFireData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ElecFireData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional sint32 vol_val = 1;
      private int volVal_ ;
      /**
       * <code>optional sint32 vol_val = 1;</code>
       */
      public boolean hasVolVal() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional sint32 vol_val = 1;</code>
       */
      public int getVolVal() {
        return volVal_;
      }
      /**
       * <code>optional sint32 vol_val = 1;</code>
       */
      public Builder setVolVal(int value) {
        bitField0_ |= 0x00000001;
        volVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 vol_val = 1;</code>
       */
      public Builder clearVolVal() {
        bitField0_ = (bitField0_ & ~0x00000001);
        volVal_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 curr_val = 2;
      private int currVal_ ;
      /**
       * <code>optional uint32 curr_val = 2;</code>
       */
      public boolean hasCurrVal() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 curr_val = 2;</code>
       */
      public int getCurrVal() {
        return currVal_;
      }
      /**
       * <code>optional uint32 curr_val = 2;</code>
       */
      public Builder setCurrVal(int value) {
        bitField0_ |= 0x00000002;
        currVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 curr_val = 2;</code>
       */
      public Builder clearCurrVal() {
        bitField0_ = (bitField0_ & ~0x00000002);
        currVal_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 leakage_val = 3;
      private int leakageVal_ ;
      /**
       * <code>optional sint32 leakage_val = 3;</code>
       */
      public boolean hasLeakageVal() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sint32 leakage_val = 3;</code>
       */
      public int getLeakageVal() {
        return leakageVal_;
      }
      /**
       * <code>optional sint32 leakage_val = 3;</code>
       */
      public Builder setLeakageVal(int value) {
        bitField0_ |= 0x00000004;
        leakageVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 leakage_val = 3;</code>
       */
      public Builder clearLeakageVal() {
        bitField0_ = (bitField0_ & ~0x00000004);
        leakageVal_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 power_val = 4;
      private int powerVal_ ;
      /**
       * <code>optional uint32 power_val = 4;</code>
       */
      public boolean hasPowerVal() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 power_val = 4;</code>
       */
      public int getPowerVal() {
        return powerVal_;
      }
      /**
       * <code>optional uint32 power_val = 4;</code>
       */
      public Builder setPowerVal(int value) {
        bitField0_ |= 0x00000008;
        powerVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 power_val = 4;</code>
       */
      public Builder clearPowerVal() {
        bitField0_ = (bitField0_ & ~0x00000008);
        powerVal_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 elec_energy_val = 5;
      private int elecEnergyVal_ ;
      /**
       * <code>optional uint32 elec_energy_val = 5;</code>
       */
      public boolean hasElecEnergyVal() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 elec_energy_val = 5;</code>
       */
      public int getElecEnergyVal() {
        return elecEnergyVal_;
      }
      /**
       * <code>optional uint32 elec_energy_val = 5;</code>
       */
      public Builder setElecEnergyVal(int value) {
        bitField0_ |= 0x00000010;
        elecEnergyVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 elec_energy_val = 5;</code>
       */
      public Builder clearElecEnergyVal() {
        bitField0_ = (bitField0_ & ~0x00000010);
        elecEnergyVal_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 temp_val = 6;
      private int tempVal_ ;
      /**
       * <code>optional uint32 temp_val = 6;</code>
       */
      public boolean hasTempVal() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 temp_val = 6;</code>
       */
      public int getTempVal() {
        return tempVal_;
      }
      /**
       * <code>optional uint32 temp_val = 6;</code>
       */
      public Builder setTempVal(int value) {
        bitField0_ |= 0x00000020;
        tempVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 temp_val = 6;</code>
       */
      public Builder clearTempVal() {
        bitField0_ = (bitField0_ & ~0x00000020);
        tempVal_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 status = 7;
      private int status_ ;
      /**
       * <code>optional uint32 status = 7;</code>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 status = 7;</code>
       */
      public int getStatus() {
        return status_;
      }
      /**
       * <code>optional uint32 status = 7;</code>
       */
      public Builder setStatus(int value) {
        bitField0_ |= 0x00000040;
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 status = 7;</code>
       */
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000040);
        status_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 alarm = 8;
      private int alarm_ ;
      /**
       * <code>optional uint32 alarm = 8;</code>
       */
      public boolean hasAlarm() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 alarm = 8;</code>
       */
      public int getAlarm() {
        return alarm_;
      }
      /**
       * <code>optional uint32 alarm = 8;</code>
       */
      public Builder setAlarm(int value) {
        bitField0_ |= 0x00000080;
        alarm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 alarm = 8;</code>
       */
      public Builder clearAlarm() {
        bitField0_ = (bitField0_ & ~0x00000080);
        alarm_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 error = 9;
      private int error_ ;
      /**
       * <code>optional uint32 error = 9;</code>
       */
      public boolean hasError() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 error = 9;</code>
       */
      public int getError() {
        return error_;
      }
      /**
       * <code>optional uint32 error = 9;</code>
       */
      public Builder setError(int value) {
        bitField0_ |= 0x00000100;
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 error = 9;</code>
       */
      public Builder clearError() {
        bitField0_ = (bitField0_ & ~0x00000100);
        error_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 sensorPwd = 10;
      private int sensorPwd_ ;
      /**
       * <code>optional uint32 sensorPwd = 10;</code>
       */
      public boolean hasSensorPwd() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 sensorPwd = 10;</code>
       */
      public int getSensorPwd() {
        return sensorPwd_;
      }
      /**
       * <code>optional uint32 sensorPwd = 10;</code>
       */
      public Builder setSensorPwd(int value) {
        bitField0_ |= 0x00000200;
        sensorPwd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 sensorPwd = 10;</code>
       */
      public Builder clearSensorPwd() {
        bitField0_ = (bitField0_ & ~0x00000200);
        sensorPwd_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 leakageTh = 11;
      private int leakageTh_ ;
      /**
       * <code>optional uint32 leakageTh = 11;</code>
       */
      public boolean hasLeakageTh() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 leakageTh = 11;</code>
       */
      public int getLeakageTh() {
        return leakageTh_;
      }
      /**
       * <code>optional uint32 leakageTh = 11;</code>
       */
      public Builder setLeakageTh(int value) {
        bitField0_ |= 0x00000400;
        leakageTh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 leakageTh = 11;</code>
       */
      public Builder clearLeakageTh() {
        bitField0_ = (bitField0_ & ~0x00000400);
        leakageTh_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 tempTh = 12;
      private int tempTh_ ;
      /**
       * <code>optional uint32 tempTh = 12;</code>
       */
      public boolean hasTempTh() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 tempTh = 12;</code>
       */
      public int getTempTh() {
        return tempTh_;
      }
      /**
       * <code>optional uint32 tempTh = 12;</code>
       */
      public Builder setTempTh(int value) {
        bitField0_ |= 0x00000800;
        tempTh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 tempTh = 12;</code>
       */
      public Builder clearTempTh() {
        bitField0_ = (bitField0_ & ~0x00000800);
        tempTh_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 currentTh = 13;
      private int currentTh_ ;
      /**
       * <code>optional uint32 currentTh = 13;</code>
       */
      public boolean hasCurrentTh() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 currentTh = 13;</code>
       */
      public int getCurrentTh() {
        return currentTh_;
      }
      /**
       * <code>optional uint32 currentTh = 13;</code>
       */
      public Builder setCurrentTh(int value) {
        bitField0_ |= 0x00001000;
        currentTh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 currentTh = 13;</code>
       */
      public Builder clearCurrentTh() {
        bitField0_ = (bitField0_ & ~0x00001000);
        currentTh_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 loadTh = 14;
      private int loadTh_ ;
      /**
       * <code>optional uint32 loadTh = 14;</code>
       */
      public boolean hasLoadTh() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional uint32 loadTh = 14;</code>
       */
      public int getLoadTh() {
        return loadTh_;
      }
      /**
       * <code>optional uint32 loadTh = 14;</code>
       */
      public Builder setLoadTh(int value) {
        bitField0_ |= 0x00002000;
        loadTh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 loadTh = 14;</code>
       */
      public Builder clearLoadTh() {
        bitField0_ = (bitField0_ & ~0x00002000);
        loadTh_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 volHighTh = 15;
      private int volHighTh_ ;
      /**
       * <code>optional uint32 volHighTh = 15;</code>
       */
      public boolean hasVolHighTh() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional uint32 volHighTh = 15;</code>
       */
      public int getVolHighTh() {
        return volHighTh_;
      }
      /**
       * <code>optional uint32 volHighTh = 15;</code>
       */
      public Builder setVolHighTh(int value) {
        bitField0_ |= 0x00004000;
        volHighTh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 volHighTh = 15;</code>
       */
      public Builder clearVolHighTh() {
        bitField0_ = (bitField0_ & ~0x00004000);
        volHighTh_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 volLowTh = 16;
      private int volLowTh_ ;
      /**
       * <code>optional uint32 volLowTh = 16;</code>
       */
      public boolean hasVolLowTh() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional uint32 volLowTh = 16;</code>
       */
      public int getVolLowTh() {
        return volLowTh_;
      }
      /**
       * <code>optional uint32 volLowTh = 16;</code>
       */
      public Builder setVolLowTh(int value) {
        bitField0_ |= 0x00008000;
        volLowTh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 volLowTh = 16;</code>
       */
      public Builder clearVolLowTh() {
        bitField0_ = (bitField0_ & ~0x00008000);
        volLowTh_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 cmd = 17;
      private int cmd_ ;
      /**
       * <code>optional uint32 cmd = 17;</code>
       */
      public boolean hasCmd() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional uint32 cmd = 17;</code>
       */
      public int getCmd() {
        return cmd_;
      }
      /**
       * <code>optional uint32 cmd = 17;</code>
       */
      public Builder setCmd(int value) {
        bitField0_ |= 0x00010000;
        cmd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cmd = 17;</code>
       */
      public Builder clearCmd() {
        bitField0_ = (bitField0_ & ~0x00010000);
        cmd_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 autoSwitch = 18;
      private int autoSwitch_ ;
      /**
       * <code>optional uint32 autoSwitch = 18;</code>
       */
      public boolean hasAutoSwitch() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional uint32 autoSwitch = 18;</code>
       */
      public int getAutoSwitch() {
        return autoSwitch_;
      }
      /**
       * <code>optional uint32 autoSwitch = 18;</code>
       */
      public Builder setAutoSwitch(int value) {
        bitField0_ |= 0x00020000;
        autoSwitch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 autoSwitch = 18;</code>
       */
      public Builder clearAutoSwitch() {
        bitField0_ = (bitField0_ & ~0x00020000);
        autoSwitch_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ElecFireData)
    }

    static {
      defaultInstance = new ElecFireData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ElecFireData)
  }

  public interface MantunDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 volVal = 1;
    /**
     * <code>optional uint32 volVal = 1;</code>
     */
    boolean hasVolVal();
    /**
     * <code>optional uint32 volVal = 1;</code>
     */
    int getVolVal();

    // optional uint32 leakageVal = 2;
    /**
     * <code>optional uint32 leakageVal = 2;</code>
     */
    boolean hasLeakageVal();
    /**
     * <code>optional uint32 leakageVal = 2;</code>
     */
    int getLeakageVal();

    // optional uint32 powerVal = 3;
    /**
     * <code>optional uint32 powerVal = 3;</code>
     */
    boolean hasPowerVal();
    /**
     * <code>optional uint32 powerVal = 3;</code>
     */
    int getPowerVal();

    // optional uint32 tempVal = 4;
    /**
     * <code>optional uint32 tempVal = 4;</code>
     */
    boolean hasTempVal();
    /**
     * <code>optional uint32 tempVal = 4;</code>
     */
    int getTempVal();

    // optional uint32 currVal = 5;
    /**
     * <code>optional uint32 currVal = 5;</code>
     */
    boolean hasCurrVal();
    /**
     * <code>optional uint32 currVal = 5;</code>
     */
    int getCurrVal();

    // optional uint32 status = 6;
    /**
     * <code>optional uint32 status = 6;</code>
     */
    boolean hasStatus();
    /**
     * <code>optional uint32 status = 6;</code>
     */
    int getStatus();

    // optional uint32 kwhVal = 7;
    /**
     * <code>optional uint32 kwhVal = 7;</code>
     */
    boolean hasKwhVal();
    /**
     * <code>optional uint32 kwhVal = 7;</code>
     */
    int getKwhVal();

    // optional uint32 swOnOff = 8;
    /**
     * <code>optional uint32 swOnOff = 8;</code>
     */
    boolean hasSwOnOff();
    /**
     * <code>optional uint32 swOnOff = 8;</code>
     */
    int getSwOnOff();

    // optional uint32 volHighTh = 9;
    /**
     * <code>optional uint32 volHighTh = 9;</code>
     */
    boolean hasVolHighTh();
    /**
     * <code>optional uint32 volHighTh = 9;</code>
     */
    int getVolHighTh();

    // optional uint32 volLowTh = 10;
    /**
     * <code>optional uint32 volLowTh = 10;</code>
     */
    boolean hasVolLowTh();
    /**
     * <code>optional uint32 volLowTh = 10;</code>
     */
    int getVolLowTh();

    // optional uint32 leakageTh = 11;
    /**
     * <code>optional uint32 leakageTh = 11;</code>
     */
    boolean hasLeakageTh();
    /**
     * <code>optional uint32 leakageTh = 11;</code>
     */
    int getLeakageTh();

    // optional uint32 tempTh = 12;
    /**
     * <code>optional uint32 tempTh = 12;</code>
     */
    boolean hasTempTh();
    /**
     * <code>optional uint32 tempTh = 12;</code>
     */
    int getTempTh();

    // optional uint32 currentTh = 13;
    /**
     * <code>optional uint32 currentTh = 13;</code>
     */
    boolean hasCurrentTh();
    /**
     * <code>optional uint32 currentTh = 13;</code>
     */
    int getCurrentTh();

    // optional uint32 powerTh = 14;
    /**
     * <code>optional uint32 powerTh = 14;</code>
     */
    boolean hasPowerTh();
    /**
     * <code>optional uint32 powerTh = 14;</code>
     */
    int getPowerTh();

    // optional uint32 attribute = 15;
    /**
     * <code>optional uint32 attribute = 15;</code>
     */
    boolean hasAttribute();
    /**
     * <code>optional uint32 attribute = 15;</code>
     */
    int getAttribute();

    // optional uint32 cmd = 16;
    /**
     * <code>optional uint32 cmd = 16;</code>
     */
    boolean hasCmd();
    /**
     * <code>optional uint32 cmd = 16;</code>
     */
    int getCmd();

    // optional uint32 devError = 17;
    /**
     * <code>optional uint32 devError = 17;</code>
     */
    boolean hasDevError();
    /**
     * <code>optional uint32 devError = 17;</code>
     */
    int getDevError();

    // optional uint32 version = 18;
    /**
     * <code>optional uint32 version = 18;</code>
     */
    boolean hasVersion();
    /**
     * <code>optional uint32 version = 18;</code>
     */
    int getVersion();

    // optional uint32 id = 19;
    /**
     * <code>optional uint32 id = 19;</code>
     */
    boolean hasId();
    /**
     * <code>optional uint32 id = 19;</code>
     */
    int getId();

    // optional uint32 taskCloud = 20;
    /**
     * <code>optional uint32 taskCloud = 20;</code>
     */
    boolean hasTaskCloud();
    /**
     * <code>optional uint32 taskCloud = 20;</code>
     */
    int getTaskCloud();

    // optional uint32 volHwarning = 21;
    /**
     * <code>optional uint32 volHwarning = 21;</code>
     */
    boolean hasVolHwarning();
    /**
     * <code>optional uint32 volHwarning = 21;</code>
     */
    int getVolHwarning();

    // optional uint32 volLwarning = 22;
    /**
     * <code>optional uint32 volLwarning = 22;</code>
     */
    boolean hasVolLwarning();
    /**
     * <code>optional uint32 volLwarning = 22;</code>
     */
    int getVolLwarning();

    // optional uint32 currHwarning = 23;
    /**
     * <code>optional uint32 currHwarning = 23;</code>
     */
    boolean hasCurrHwarning();
    /**
     * <code>optional uint32 currHwarning = 23;</code>
     */
    int getCurrHwarning();
  }
  /**
   * Protobuf type {@code MantunData}
   */
  public static final class MantunData extends
      com.google.protobuf.GeneratedMessage
      implements MantunDataOrBuilder {
    // Use MantunData.newBuilder() to construct.
    private MantunData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MantunData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MantunData defaultInstance;
    public static MantunData getDefaultInstance() {
      return defaultInstance;
    }

    public MantunData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MantunData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              volVal_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              leakageVal_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              powerVal_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              tempVal_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              currVal_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              status_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              kwhVal_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              swOnOff_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              volHighTh_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              volLowTh_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              leakageTh_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              tempTh_ = input.readUInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              currentTh_ = input.readUInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              powerTh_ = input.readUInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              attribute_ = input.readUInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              cmd_ = input.readUInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              devError_ = input.readUInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              version_ = input.readUInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00040000;
              id_ = input.readUInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00080000;
              taskCloud_ = input.readUInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00100000;
              volHwarning_ = input.readUInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00200000;
              volLwarning_ = input.readUInt32();
              break;
            }
            case 184: {
              bitField0_ |= 0x00400000;
              currHwarning_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_MantunData_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_MantunData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              MantunData.class, Builder.class);
    }

    public static com.google.protobuf.Parser<MantunData> PARSER =
        new com.google.protobuf.AbstractParser<MantunData>() {
      public MantunData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MantunData(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<MantunData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 volVal = 1;
    public static final int VOLVAL_FIELD_NUMBER = 1;
    private int volVal_;
    /**
     * <code>optional uint32 volVal = 1;</code>
     */
    public boolean hasVolVal() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 volVal = 1;</code>
     */
    public int getVolVal() {
      return volVal_;
    }

    // optional uint32 leakageVal = 2;
    public static final int LEAKAGEVAL_FIELD_NUMBER = 2;
    private int leakageVal_;
    /**
     * <code>optional uint32 leakageVal = 2;</code>
     */
    public boolean hasLeakageVal() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 leakageVal = 2;</code>
     */
    public int getLeakageVal() {
      return leakageVal_;
    }

    // optional uint32 powerVal = 3;
    public static final int POWERVAL_FIELD_NUMBER = 3;
    private int powerVal_;
    /**
     * <code>optional uint32 powerVal = 3;</code>
     */
    public boolean hasPowerVal() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 powerVal = 3;</code>
     */
    public int getPowerVal() {
      return powerVal_;
    }

    // optional uint32 tempVal = 4;
    public static final int TEMPVAL_FIELD_NUMBER = 4;
    private int tempVal_;
    /**
     * <code>optional uint32 tempVal = 4;</code>
     */
    public boolean hasTempVal() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 tempVal = 4;</code>
     */
    public int getTempVal() {
      return tempVal_;
    }

    // optional uint32 currVal = 5;
    public static final int CURRVAL_FIELD_NUMBER = 5;
    private int currVal_;
    /**
     * <code>optional uint32 currVal = 5;</code>
     */
    public boolean hasCurrVal() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 currVal = 5;</code>
     */
    public int getCurrVal() {
      return currVal_;
    }

    // optional uint32 status = 6;
    public static final int STATUS_FIELD_NUMBER = 6;
    private int status_;
    /**
     * <code>optional uint32 status = 6;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 status = 6;</code>
     */
    public int getStatus() {
      return status_;
    }

    // optional uint32 kwhVal = 7;
    public static final int KWHVAL_FIELD_NUMBER = 7;
    private int kwhVal_;
    /**
     * <code>optional uint32 kwhVal = 7;</code>
     */
    public boolean hasKwhVal() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 kwhVal = 7;</code>
     */
    public int getKwhVal() {
      return kwhVal_;
    }

    // optional uint32 swOnOff = 8;
    public static final int SWONOFF_FIELD_NUMBER = 8;
    private int swOnOff_;
    /**
     * <code>optional uint32 swOnOff = 8;</code>
     */
    public boolean hasSwOnOff() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 swOnOff = 8;</code>
     */
    public int getSwOnOff() {
      return swOnOff_;
    }

    // optional uint32 volHighTh = 9;
    public static final int VOLHIGHTH_FIELD_NUMBER = 9;
    private int volHighTh_;
    /**
     * <code>optional uint32 volHighTh = 9;</code>
     */
    public boolean hasVolHighTh() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 volHighTh = 9;</code>
     */
    public int getVolHighTh() {
      return volHighTh_;
    }

    // optional uint32 volLowTh = 10;
    public static final int VOLLOWTH_FIELD_NUMBER = 10;
    private int volLowTh_;
    /**
     * <code>optional uint32 volLowTh = 10;</code>
     */
    public boolean hasVolLowTh() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 volLowTh = 10;</code>
     */
    public int getVolLowTh() {
      return volLowTh_;
    }

    // optional uint32 leakageTh = 11;
    public static final int LEAKAGETH_FIELD_NUMBER = 11;
    private int leakageTh_;
    /**
     * <code>optional uint32 leakageTh = 11;</code>
     */
    public boolean hasLeakageTh() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 leakageTh = 11;</code>
     */
    public int getLeakageTh() {
      return leakageTh_;
    }

    // optional uint32 tempTh = 12;
    public static final int TEMPTH_FIELD_NUMBER = 12;
    private int tempTh_;
    /**
     * <code>optional uint32 tempTh = 12;</code>
     */
    public boolean hasTempTh() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 tempTh = 12;</code>
     */
    public int getTempTh() {
      return tempTh_;
    }

    // optional uint32 currentTh = 13;
    public static final int CURRENTTH_FIELD_NUMBER = 13;
    private int currentTh_;
    /**
     * <code>optional uint32 currentTh = 13;</code>
     */
    public boolean hasCurrentTh() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint32 currentTh = 13;</code>
     */
    public int getCurrentTh() {
      return currentTh_;
    }

    // optional uint32 powerTh = 14;
    public static final int POWERTH_FIELD_NUMBER = 14;
    private int powerTh_;
    /**
     * <code>optional uint32 powerTh = 14;</code>
     */
    public boolean hasPowerTh() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional uint32 powerTh = 14;</code>
     */
    public int getPowerTh() {
      return powerTh_;
    }

    // optional uint32 attribute = 15;
    public static final int ATTRIBUTE_FIELD_NUMBER = 15;
    private int attribute_;
    /**
     * <code>optional uint32 attribute = 15;</code>
     */
    public boolean hasAttribute() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional uint32 attribute = 15;</code>
     */
    public int getAttribute() {
      return attribute_;
    }

    // optional uint32 cmd = 16;
    public static final int CMD_FIELD_NUMBER = 16;
    private int cmd_;
    /**
     * <code>optional uint32 cmd = 16;</code>
     */
    public boolean hasCmd() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional uint32 cmd = 16;</code>
     */
    public int getCmd() {
      return cmd_;
    }

    // optional uint32 devError = 17;
    public static final int DEVERROR_FIELD_NUMBER = 17;
    private int devError_;
    /**
     * <code>optional uint32 devError = 17;</code>
     */
    public boolean hasDevError() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional uint32 devError = 17;</code>
     */
    public int getDevError() {
      return devError_;
    }

    // optional uint32 version = 18;
    public static final int VERSION_FIELD_NUMBER = 18;
    private int version_;
    /**
     * <code>optional uint32 version = 18;</code>
     */
    public boolean hasVersion() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional uint32 version = 18;</code>
     */
    public int getVersion() {
      return version_;
    }

    // optional uint32 id = 19;
    public static final int ID_FIELD_NUMBER = 19;
    private int id_;
    /**
     * <code>optional uint32 id = 19;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional uint32 id = 19;</code>
     */
    public int getId() {
      return id_;
    }

    // optional uint32 taskCloud = 20;
    public static final int TASKCLOUD_FIELD_NUMBER = 20;
    private int taskCloud_;
    /**
     * <code>optional uint32 taskCloud = 20;</code>
     */
    public boolean hasTaskCloud() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional uint32 taskCloud = 20;</code>
     */
    public int getTaskCloud() {
      return taskCloud_;
    }

    // optional uint32 volHwarning = 21;
    public static final int VOLHWARNING_FIELD_NUMBER = 21;
    private int volHwarning_;
    /**
     * <code>optional uint32 volHwarning = 21;</code>
     */
    public boolean hasVolHwarning() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional uint32 volHwarning = 21;</code>
     */
    public int getVolHwarning() {
      return volHwarning_;
    }

    // optional uint32 volLwarning = 22;
    public static final int VOLLWARNING_FIELD_NUMBER = 22;
    private int volLwarning_;
    /**
     * <code>optional uint32 volLwarning = 22;</code>
     */
    public boolean hasVolLwarning() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional uint32 volLwarning = 22;</code>
     */
    public int getVolLwarning() {
      return volLwarning_;
    }

    // optional uint32 currHwarning = 23;
    public static final int CURRHWARNING_FIELD_NUMBER = 23;
    private int currHwarning_;
    /**
     * <code>optional uint32 currHwarning = 23;</code>
     */
    public boolean hasCurrHwarning() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional uint32 currHwarning = 23;</code>
     */
    public int getCurrHwarning() {
      return currHwarning_;
    }

    private void initFields() {
      volVal_ = 0;
      leakageVal_ = 0;
      powerVal_ = 0;
      tempVal_ = 0;
      currVal_ = 0;
      status_ = 0;
      kwhVal_ = 0;
      swOnOff_ = 0;
      volHighTh_ = 0;
      volLowTh_ = 0;
      leakageTh_ = 0;
      tempTh_ = 0;
      currentTh_ = 0;
      powerTh_ = 0;
      attribute_ = 0;
      cmd_ = 0;
      devError_ = 0;
      version_ = 0;
      id_ = 0;
      taskCloud_ = 0;
      volHwarning_ = 0;
      volLwarning_ = 0;
      currHwarning_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, volVal_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, leakageVal_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, powerVal_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, tempVal_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, currVal_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, status_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, kwhVal_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, swOnOff_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, volHighTh_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, volLowTh_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(11, leakageTh_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(12, tempTh_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(13, currentTh_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeUInt32(14, powerTh_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeUInt32(15, attribute_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeUInt32(16, cmd_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeUInt32(17, devError_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeUInt32(18, version_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeUInt32(19, id_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeUInt32(20, taskCloud_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeUInt32(21, volHwarning_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeUInt32(22, volLwarning_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeUInt32(23, currHwarning_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, volVal_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, leakageVal_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, powerVal_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, tempVal_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, currVal_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, status_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, kwhVal_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, swOnOff_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, volHighTh_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, volLowTh_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, leakageTh_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, tempTh_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, currentTh_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(14, powerTh_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(15, attribute_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(16, cmd_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(17, devError_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(18, version_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(19, id_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(20, taskCloud_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(21, volHwarning_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(22, volLwarning_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(23, currHwarning_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static MantunData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static MantunData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static MantunData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static MantunData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static MantunData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static MantunData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static MantunData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static MantunData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static MantunData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static MantunData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(MantunData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code MantunData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements MantunDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_MantunData_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_MantunData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                MantunData.class, Builder.class);
      }

      // Construct using MsgNode1V1M32.MantunData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        volVal_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        leakageVal_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        powerVal_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        tempVal_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        currVal_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        status_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        kwhVal_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        swOnOff_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        volHighTh_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        volLowTh_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        leakageTh_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        tempTh_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        currentTh_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        powerTh_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        attribute_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        cmd_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        devError_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        version_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        taskCloud_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        volHwarning_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        volLwarning_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        currHwarning_ = 0;
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_MantunData_descriptor;
      }

      public MantunData getDefaultInstanceForType() {
        return MantunData.getDefaultInstance();
      }

      public MantunData build() {
        MantunData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public MantunData buildPartial() {
        MantunData result = new MantunData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.volVal_ = volVal_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.leakageVal_ = leakageVal_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.powerVal_ = powerVal_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.tempVal_ = tempVal_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.currVal_ = currVal_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.status_ = status_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.kwhVal_ = kwhVal_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.swOnOff_ = swOnOff_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.volHighTh_ = volHighTh_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.volLowTh_ = volLowTh_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.leakageTh_ = leakageTh_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.tempTh_ = tempTh_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.currentTh_ = currentTh_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.powerTh_ = powerTh_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.attribute_ = attribute_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.cmd_ = cmd_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.devError_ = devError_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.version_ = version_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.taskCloud_ = taskCloud_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.volHwarning_ = volHwarning_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.volLwarning_ = volLwarning_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.currHwarning_ = currHwarning_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof MantunData) {
          return mergeFrom((MantunData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(MantunData other) {
        if (other == MantunData.getDefaultInstance()) return this;
        if (other.hasVolVal()) {
          setVolVal(other.getVolVal());
        }
        if (other.hasLeakageVal()) {
          setLeakageVal(other.getLeakageVal());
        }
        if (other.hasPowerVal()) {
          setPowerVal(other.getPowerVal());
        }
        if (other.hasTempVal()) {
          setTempVal(other.getTempVal());
        }
        if (other.hasCurrVal()) {
          setCurrVal(other.getCurrVal());
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        if (other.hasKwhVal()) {
          setKwhVal(other.getKwhVal());
        }
        if (other.hasSwOnOff()) {
          setSwOnOff(other.getSwOnOff());
        }
        if (other.hasVolHighTh()) {
          setVolHighTh(other.getVolHighTh());
        }
        if (other.hasVolLowTh()) {
          setVolLowTh(other.getVolLowTh());
        }
        if (other.hasLeakageTh()) {
          setLeakageTh(other.getLeakageTh());
        }
        if (other.hasTempTh()) {
          setTempTh(other.getTempTh());
        }
        if (other.hasCurrentTh()) {
          setCurrentTh(other.getCurrentTh());
        }
        if (other.hasPowerTh()) {
          setPowerTh(other.getPowerTh());
        }
        if (other.hasAttribute()) {
          setAttribute(other.getAttribute());
        }
        if (other.hasCmd()) {
          setCmd(other.getCmd());
        }
        if (other.hasDevError()) {
          setDevError(other.getDevError());
        }
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasTaskCloud()) {
          setTaskCloud(other.getTaskCloud());
        }
        if (other.hasVolHwarning()) {
          setVolHwarning(other.getVolHwarning());
        }
        if (other.hasVolLwarning()) {
          setVolLwarning(other.getVolLwarning());
        }
        if (other.hasCurrHwarning()) {
          setCurrHwarning(other.getCurrHwarning());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        MantunData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (MantunData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 volVal = 1;
      private int volVal_ ;
      /**
       * <code>optional uint32 volVal = 1;</code>
       */
      public boolean hasVolVal() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 volVal = 1;</code>
       */
      public int getVolVal() {
        return volVal_;
      }
      /**
       * <code>optional uint32 volVal = 1;</code>
       */
      public Builder setVolVal(int value) {
        bitField0_ |= 0x00000001;
        volVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 volVal = 1;</code>
       */
      public Builder clearVolVal() {
        bitField0_ = (bitField0_ & ~0x00000001);
        volVal_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 leakageVal = 2;
      private int leakageVal_ ;
      /**
       * <code>optional uint32 leakageVal = 2;</code>
       */
      public boolean hasLeakageVal() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 leakageVal = 2;</code>
       */
      public int getLeakageVal() {
        return leakageVal_;
      }
      /**
       * <code>optional uint32 leakageVal = 2;</code>
       */
      public Builder setLeakageVal(int value) {
        bitField0_ |= 0x00000002;
        leakageVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 leakageVal = 2;</code>
       */
      public Builder clearLeakageVal() {
        bitField0_ = (bitField0_ & ~0x00000002);
        leakageVal_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 powerVal = 3;
      private int powerVal_ ;
      /**
       * <code>optional uint32 powerVal = 3;</code>
       */
      public boolean hasPowerVal() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 powerVal = 3;</code>
       */
      public int getPowerVal() {
        return powerVal_;
      }
      /**
       * <code>optional uint32 powerVal = 3;</code>
       */
      public Builder setPowerVal(int value) {
        bitField0_ |= 0x00000004;
        powerVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 powerVal = 3;</code>
       */
      public Builder clearPowerVal() {
        bitField0_ = (bitField0_ & ~0x00000004);
        powerVal_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 tempVal = 4;
      private int tempVal_ ;
      /**
       * <code>optional uint32 tempVal = 4;</code>
       */
      public boolean hasTempVal() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 tempVal = 4;</code>
       */
      public int getTempVal() {
        return tempVal_;
      }
      /**
       * <code>optional uint32 tempVal = 4;</code>
       */
      public Builder setTempVal(int value) {
        bitField0_ |= 0x00000008;
        tempVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 tempVal = 4;</code>
       */
      public Builder clearTempVal() {
        bitField0_ = (bitField0_ & ~0x00000008);
        tempVal_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 currVal = 5;
      private int currVal_ ;
      /**
       * <code>optional uint32 currVal = 5;</code>
       */
      public boolean hasCurrVal() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 currVal = 5;</code>
       */
      public int getCurrVal() {
        return currVal_;
      }
      /**
       * <code>optional uint32 currVal = 5;</code>
       */
      public Builder setCurrVal(int value) {
        bitField0_ |= 0x00000010;
        currVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 currVal = 5;</code>
       */
      public Builder clearCurrVal() {
        bitField0_ = (bitField0_ & ~0x00000010);
        currVal_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 status = 6;
      private int status_ ;
      /**
       * <code>optional uint32 status = 6;</code>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 status = 6;</code>
       */
      public int getStatus() {
        return status_;
      }
      /**
       * <code>optional uint32 status = 6;</code>
       */
      public Builder setStatus(int value) {
        bitField0_ |= 0x00000020;
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 status = 6;</code>
       */
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000020);
        status_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 kwhVal = 7;
      private int kwhVal_ ;
      /**
       * <code>optional uint32 kwhVal = 7;</code>
       */
      public boolean hasKwhVal() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 kwhVal = 7;</code>
       */
      public int getKwhVal() {
        return kwhVal_;
      }
      /**
       * <code>optional uint32 kwhVal = 7;</code>
       */
      public Builder setKwhVal(int value) {
        bitField0_ |= 0x00000040;
        kwhVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 kwhVal = 7;</code>
       */
      public Builder clearKwhVal() {
        bitField0_ = (bitField0_ & ~0x00000040);
        kwhVal_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 swOnOff = 8;
      private int swOnOff_ ;
      /**
       * <code>optional uint32 swOnOff = 8;</code>
       */
      public boolean hasSwOnOff() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 swOnOff = 8;</code>
       */
      public int getSwOnOff() {
        return swOnOff_;
      }
      /**
       * <code>optional uint32 swOnOff = 8;</code>
       */
      public Builder setSwOnOff(int value) {
        bitField0_ |= 0x00000080;
        swOnOff_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 swOnOff = 8;</code>
       */
      public Builder clearSwOnOff() {
        bitField0_ = (bitField0_ & ~0x00000080);
        swOnOff_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 volHighTh = 9;
      private int volHighTh_ ;
      /**
       * <code>optional uint32 volHighTh = 9;</code>
       */
      public boolean hasVolHighTh() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 volHighTh = 9;</code>
       */
      public int getVolHighTh() {
        return volHighTh_;
      }
      /**
       * <code>optional uint32 volHighTh = 9;</code>
       */
      public Builder setVolHighTh(int value) {
        bitField0_ |= 0x00000100;
        volHighTh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 volHighTh = 9;</code>
       */
      public Builder clearVolHighTh() {
        bitField0_ = (bitField0_ & ~0x00000100);
        volHighTh_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 volLowTh = 10;
      private int volLowTh_ ;
      /**
       * <code>optional uint32 volLowTh = 10;</code>
       */
      public boolean hasVolLowTh() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 volLowTh = 10;</code>
       */
      public int getVolLowTh() {
        return volLowTh_;
      }
      /**
       * <code>optional uint32 volLowTh = 10;</code>
       */
      public Builder setVolLowTh(int value) {
        bitField0_ |= 0x00000200;
        volLowTh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 volLowTh = 10;</code>
       */
      public Builder clearVolLowTh() {
        bitField0_ = (bitField0_ & ~0x00000200);
        volLowTh_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 leakageTh = 11;
      private int leakageTh_ ;
      /**
       * <code>optional uint32 leakageTh = 11;</code>
       */
      public boolean hasLeakageTh() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 leakageTh = 11;</code>
       */
      public int getLeakageTh() {
        return leakageTh_;
      }
      /**
       * <code>optional uint32 leakageTh = 11;</code>
       */
      public Builder setLeakageTh(int value) {
        bitField0_ |= 0x00000400;
        leakageTh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 leakageTh = 11;</code>
       */
      public Builder clearLeakageTh() {
        bitField0_ = (bitField0_ & ~0x00000400);
        leakageTh_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 tempTh = 12;
      private int tempTh_ ;
      /**
       * <code>optional uint32 tempTh = 12;</code>
       */
      public boolean hasTempTh() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 tempTh = 12;</code>
       */
      public int getTempTh() {
        return tempTh_;
      }
      /**
       * <code>optional uint32 tempTh = 12;</code>
       */
      public Builder setTempTh(int value) {
        bitField0_ |= 0x00000800;
        tempTh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 tempTh = 12;</code>
       */
      public Builder clearTempTh() {
        bitField0_ = (bitField0_ & ~0x00000800);
        tempTh_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 currentTh = 13;
      private int currentTh_ ;
      /**
       * <code>optional uint32 currentTh = 13;</code>
       */
      public boolean hasCurrentTh() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 currentTh = 13;</code>
       */
      public int getCurrentTh() {
        return currentTh_;
      }
      /**
       * <code>optional uint32 currentTh = 13;</code>
       */
      public Builder setCurrentTh(int value) {
        bitField0_ |= 0x00001000;
        currentTh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 currentTh = 13;</code>
       */
      public Builder clearCurrentTh() {
        bitField0_ = (bitField0_ & ~0x00001000);
        currentTh_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 powerTh = 14;
      private int powerTh_ ;
      /**
       * <code>optional uint32 powerTh = 14;</code>
       */
      public boolean hasPowerTh() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional uint32 powerTh = 14;</code>
       */
      public int getPowerTh() {
        return powerTh_;
      }
      /**
       * <code>optional uint32 powerTh = 14;</code>
       */
      public Builder setPowerTh(int value) {
        bitField0_ |= 0x00002000;
        powerTh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 powerTh = 14;</code>
       */
      public Builder clearPowerTh() {
        bitField0_ = (bitField0_ & ~0x00002000);
        powerTh_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 attribute = 15;
      private int attribute_ ;
      /**
       * <code>optional uint32 attribute = 15;</code>
       */
      public boolean hasAttribute() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional uint32 attribute = 15;</code>
       */
      public int getAttribute() {
        return attribute_;
      }
      /**
       * <code>optional uint32 attribute = 15;</code>
       */
      public Builder setAttribute(int value) {
        bitField0_ |= 0x00004000;
        attribute_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 attribute = 15;</code>
       */
      public Builder clearAttribute() {
        bitField0_ = (bitField0_ & ~0x00004000);
        attribute_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 cmd = 16;
      private int cmd_ ;
      /**
       * <code>optional uint32 cmd = 16;</code>
       */
      public boolean hasCmd() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional uint32 cmd = 16;</code>
       */
      public int getCmd() {
        return cmd_;
      }
      /**
       * <code>optional uint32 cmd = 16;</code>
       */
      public Builder setCmd(int value) {
        bitField0_ |= 0x00008000;
        cmd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cmd = 16;</code>
       */
      public Builder clearCmd() {
        bitField0_ = (bitField0_ & ~0x00008000);
        cmd_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 devError = 17;
      private int devError_ ;
      /**
       * <code>optional uint32 devError = 17;</code>
       */
      public boolean hasDevError() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional uint32 devError = 17;</code>
       */
      public int getDevError() {
        return devError_;
      }
      /**
       * <code>optional uint32 devError = 17;</code>
       */
      public Builder setDevError(int value) {
        bitField0_ |= 0x00010000;
        devError_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 devError = 17;</code>
       */
      public Builder clearDevError() {
        bitField0_ = (bitField0_ & ~0x00010000);
        devError_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 version = 18;
      private int version_ ;
      /**
       * <code>optional uint32 version = 18;</code>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional uint32 version = 18;</code>
       */
      public int getVersion() {
        return version_;
      }
      /**
       * <code>optional uint32 version = 18;</code>
       */
      public Builder setVersion(int value) {
        bitField0_ |= 0x00020000;
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 version = 18;</code>
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00020000);
        version_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 id = 19;
      private int id_ ;
      /**
       * <code>optional uint32 id = 19;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional uint32 id = 19;</code>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>optional uint32 id = 19;</code>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00040000;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 id = 19;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00040000);
        id_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 taskCloud = 20;
      private int taskCloud_ ;
      /**
       * <code>optional uint32 taskCloud = 20;</code>
       */
      public boolean hasTaskCloud() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional uint32 taskCloud = 20;</code>
       */
      public int getTaskCloud() {
        return taskCloud_;
      }
      /**
       * <code>optional uint32 taskCloud = 20;</code>
       */
      public Builder setTaskCloud(int value) {
        bitField0_ |= 0x00080000;
        taskCloud_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 taskCloud = 20;</code>
       */
      public Builder clearTaskCloud() {
        bitField0_ = (bitField0_ & ~0x00080000);
        taskCloud_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 volHwarning = 21;
      private int volHwarning_ ;
      /**
       * <code>optional uint32 volHwarning = 21;</code>
       */
      public boolean hasVolHwarning() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional uint32 volHwarning = 21;</code>
       */
      public int getVolHwarning() {
        return volHwarning_;
      }
      /**
       * <code>optional uint32 volHwarning = 21;</code>
       */
      public Builder setVolHwarning(int value) {
        bitField0_ |= 0x00100000;
        volHwarning_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 volHwarning = 21;</code>
       */
      public Builder clearVolHwarning() {
        bitField0_ = (bitField0_ & ~0x00100000);
        volHwarning_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 volLwarning = 22;
      private int volLwarning_ ;
      /**
       * <code>optional uint32 volLwarning = 22;</code>
       */
      public boolean hasVolLwarning() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional uint32 volLwarning = 22;</code>
       */
      public int getVolLwarning() {
        return volLwarning_;
      }
      /**
       * <code>optional uint32 volLwarning = 22;</code>
       */
      public Builder setVolLwarning(int value) {
        bitField0_ |= 0x00200000;
        volLwarning_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 volLwarning = 22;</code>
       */
      public Builder clearVolLwarning() {
        bitField0_ = (bitField0_ & ~0x00200000);
        volLwarning_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 currHwarning = 23;
      private int currHwarning_ ;
      /**
       * <code>optional uint32 currHwarning = 23;</code>
       */
      public boolean hasCurrHwarning() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional uint32 currHwarning = 23;</code>
       */
      public int getCurrHwarning() {
        return currHwarning_;
      }
      /**
       * <code>optional uint32 currHwarning = 23;</code>
       */
      public Builder setCurrHwarning(int value) {
        bitField0_ |= 0x00400000;
        currHwarning_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 currHwarning = 23;</code>
       */
      public Builder clearCurrHwarning() {
        bitField0_ = (bitField0_ & ~0x00400000);
        currHwarning_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:MantunData)
    }

    static {
      defaultInstance = new MantunData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:MantunData)
  }

  public interface CaymanOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 isSmoke = 1;
    /**
     * <code>optional uint32 isSmoke = 1;</code>
     */
    boolean hasIsSmoke();
    /**
     * <code>optional uint32 isSmoke = 1;</code>
     */
    int getIsSmoke();

    // optional uint32 isMoved = 2;
    /**
     * <code>optional uint32 isMoved = 2;</code>
     */
    boolean hasIsMoved();
    /**
     * <code>optional uint32 isMoved = 2;</code>
     */
    int getIsMoved();

    // optional sint32 valueOfTem = 3;
    /**
     * <code>optional sint32 valueOfTem = 3;</code>
     */
    boolean hasValueOfTem();
    /**
     * <code>optional sint32 valueOfTem = 3;</code>
     */
    int getValueOfTem();

    // optional uint32 valueOfHum = 4;
    /**
     * <code>optional uint32 valueOfHum = 4;</code>
     */
    boolean hasValueOfHum();
    /**
     * <code>optional uint32 valueOfHum = 4;</code>
     */
    int getValueOfHum();

    // optional uint32 valueOfSmoke = 5;
    /**
     * <code>optional uint32 valueOfSmoke = 5;</code>
     */
    boolean hasValueOfSmoke();
    /**
     * <code>optional uint32 valueOfSmoke = 5;</code>
     */
    int getValueOfSmoke();

    // optional uint32 standarOfSmoke = 6;
    /**
     * <code>optional uint32 standarOfSmoke = 6;</code>
     */
    boolean hasStandarOfSmoke();
    /**
     * <code>optional uint32 standarOfSmoke = 6;</code>
     */
    int getStandarOfSmoke();

    // optional sint32 alarmOfHighTem = 7;
    /**
     * <code>optional sint32 alarmOfHighTem = 7;</code>
     */
    boolean hasAlarmOfHighTem();
    /**
     * <code>optional sint32 alarmOfHighTem = 7;</code>
     */
    int getAlarmOfHighTem();

    // optional sint32 alarmOfLowTem = 8;
    /**
     * <code>optional sint32 alarmOfLowTem = 8;</code>
     */
    boolean hasAlarmOfLowTem();
    /**
     * <code>optional sint32 alarmOfLowTem = 8;</code>
     */
    int getAlarmOfLowTem();

    // optional uint32 alarmOfHighHum = 9;
    /**
     * <code>optional uint32 alarmOfHighHum = 9;</code>
     */
    boolean hasAlarmOfHighHum();
    /**
     * <code>optional uint32 alarmOfHighHum = 9;</code>
     */
    int getAlarmOfHighHum();

    // optional uint32 alarmOfLowHum = 10;
    /**
     * <code>optional uint32 alarmOfLowHum = 10;</code>
     */
    boolean hasAlarmOfLowHum();
    /**
     * <code>optional uint32 alarmOfLowHum = 10;</code>
     */
    int getAlarmOfLowHum();

    // optional uint32 cmd = 11;
    /**
     * <code>optional uint32 cmd = 11;</code>
     */
    boolean hasCmd();
    /**
     * <code>optional uint32 cmd = 11;</code>
     */
    int getCmd();

    // optional uint32 valueOfphotor = 12;
    /**
     * <code>optional uint32 valueOfphotor = 12;</code>
     */
    boolean hasValueOfphotor();
    /**
     * <code>optional uint32 valueOfphotor = 12;</code>
     */
    int getValueOfphotor();

    // optional uint32 devceState = 13;
    /**
     * <code>optional uint32 devceState = 13;</code>
     */
    boolean hasDevceState();
    /**
     * <code>optional uint32 devceState = 13;</code>
     */
    int getDevceState();

    // optional uint32 bleAdvType = 14;
    /**
     * <code>optional uint32 bleAdvType = 14;</code>
     */
    boolean hasBleAdvType();
    /**
     * <code>optional uint32 bleAdvType = 14;</code>
     */
    int getBleAdvType();

    // optional uint32 bleAdvStartTime = 15;
    /**
     * <code>optional uint32 bleAdvStartTime = 15;</code>
     */
    boolean hasBleAdvStartTime();
    /**
     * <code>optional uint32 bleAdvStartTime = 15;</code>
     */
    int getBleAdvStartTime();

    // optional uint32 bleAdvEndTime = 16;
    /**
     * <code>optional uint32 bleAdvEndTime = 16;</code>
     */
    boolean hasBleAdvEndTime();
    /**
     * <code>optional uint32 bleAdvEndTime = 16;</code>
     */
    int getBleAdvEndTime();

    // optional uint32 valueOfBatb = 17;
    /**
     * <code>optional uint32 valueOfBatb = 17;</code>
     */
    boolean hasValueOfBatb();
    /**
     * <code>optional uint32 valueOfBatb = 17;</code>
     */
    int getValueOfBatb();

    // optional uint32 levelOfAlarm = 18;
    /**
     * <code>optional uint32 levelOfAlarm = 18;</code>
     */
    boolean hasLevelOfAlarm();
    /**
     * <code>optional uint32 levelOfAlarm = 18;</code>
     */
    int getLevelOfAlarm();

    // optional uint32 isSelfCheck = 19;
    /**
     * <code>optional uint32 isSelfCheck = 19;</code>
     */
    boolean hasIsSelfCheck();
    /**
     * <code>optional uint32 isSelfCheck = 19;</code>
     */
    int getIsSelfCheck();

    // optional uint32 calibrationOfSmoke = 20;
    /**
     * <code>optional uint32 calibrationOfSmoke = 20;</code>
     */
    boolean hasCalibrationOfSmoke();
    /**
     * <code>optional uint32 calibrationOfSmoke = 20;</code>
     */
    int getCalibrationOfSmoke();

    // optional uint32 alarmOfSmoke = 21;
    /**
     * <code>optional uint32 alarmOfSmoke = 21;</code>
     */
    boolean hasAlarmOfSmoke();
    /**
     * <code>optional uint32 alarmOfSmoke = 21;</code>
     */
    int getAlarmOfSmoke();

    // optional uint32 humanDetectionTime = 22;
    /**
     * <code>optional uint32 humanDetectionTime = 22;</code>
     *
     * <pre>
     * 人体检测时间参数, 单位 s, 范围 [1 - 30], (上|下)
     * </pre>
     */
    boolean hasHumanDetectionTime();
    /**
     * <code>optional uint32 humanDetectionTime = 22;</code>
     *
     * <pre>
     * 人体检测时间参数, 单位 s, 范围 [1 - 30], (上|下)
     * </pre>
     */
    int getHumanDetectionTime();

    // optional uint32 defenseMode = 23;
    /**
     * <code>optional uint32 defenseMode = 23;</code>
     *
     * <pre>
     * 设防模式开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    boolean hasDefenseMode();
    /**
     * <code>optional uint32 defenseMode = 23;</code>
     *
     * <pre>
     * 设防模式开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    int getDefenseMode();

    // optional uint32 defenseTimerMode = 24;
    /**
     * <code>optional uint32 defenseTimerMode = 24;</code>
     *
     * <pre>
     * 定时设防模式开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    boolean hasDefenseTimerMode();
    /**
     * <code>optional uint32 defenseTimerMode = 24;</code>
     *
     * <pre>
     * 定时设防模式开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    int getDefenseTimerMode();

    // optional uint32 defenseModeStartTime = 25;
    /**
     * <code>optional uint32 defenseModeStartTime = 25;</code>
     *
     * <pre>
     * 定时设防开始时间, 单位 min, 范围 [0 - 1439], (上|下)
     * </pre>
     */
    boolean hasDefenseModeStartTime();
    /**
     * <code>optional uint32 defenseModeStartTime = 25;</code>
     *
     * <pre>
     * 定时设防开始时间, 单位 min, 范围 [0 - 1439], (上|下)
     * </pre>
     */
    int getDefenseModeStartTime();

    // optional uint32 defenseModeStopTime = 26;
    /**
     * <code>optional uint32 defenseModeStopTime = 26;</code>
     *
     * <pre>
     * 定时设防结束时间, 单位 min, 范围 [0 - 1439], (上|下)
     * </pre>
     */
    boolean hasDefenseModeStopTime();
    /**
     * <code>optional uint32 defenseModeStopTime = 26;</code>
     *
     * <pre>
     * 定时设防结束时间, 单位 min, 范围 [0 - 1439], (上|下)
     * </pre>
     */
    int getDefenseModeStopTime();

    // optional uint32 invadeAlarm = 27;
    /**
     * <code>optional uint32 invadeAlarm = 27;</code>
     *
     * <pre>
     * 入侵报警开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    boolean hasInvadeAlarm();
    /**
     * <code>optional uint32 invadeAlarm = 27;</code>
     *
     * <pre>
     * 入侵报警开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    int getInvadeAlarm();

    // optional uint32 cdsSwitch = 28;
    /**
     * <code>optional uint32 cdsSwitch = 28;</code>
     *
     * <pre>
     * 凝露检测开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    boolean hasCdsSwitch();
    /**
     * <code>optional uint32 cdsSwitch = 28;</code>
     *
     * <pre>
     * 凝露检测开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    int getCdsSwitch();

    // optional uint32 nightLightSwitch = 29;
    /**
     * <code>optional uint32 nightLightSwitch = 29;</code>
     *
     * <pre>
     * 夜灯开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    boolean hasNightLightSwitch();
    /**
     * <code>optional uint32 nightLightSwitch = 29;</code>
     *
     * <pre>
     * 夜灯开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    int getNightLightSwitch();

    // optional uint32 humanDetectionSwitch = 30;
    /**
     * <code>optional uint32 humanDetectionSwitch = 30;</code>
     *
     * <pre>
     * 人体检测开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    boolean hasHumanDetectionSwitch();
    /**
     * <code>optional uint32 humanDetectionSwitch = 30;</code>
     *
     * <pre>
     * 人体检测开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    int getHumanDetectionSwitch();

    // optional uint32 humanDetectionSync = 31;
    /**
     * <code>optional uint32 humanDetectionSync = 31;</code>
     *
     * <pre>
     * 人体检测同步开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    boolean hasHumanDetectionSync();
    /**
     * <code>optional uint32 humanDetectionSync = 31;</code>
     *
     * <pre>
     * 人体检测同步开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    int getHumanDetectionSync();

    // optional uint32 voicePlayIndex = 32;
    /**
     * <code>optional uint32 voicePlayIndex = 32;</code>
     *
     * <pre>
     * 语音播放 index, (下)
     * </pre>
     */
    boolean hasVoicePlayIndex();
    /**
     * <code>optional uint32 voicePlayIndex = 32;</code>
     *
     * <pre>
     * 语音播放 index, (下)
     * </pre>
     */
    int getVoicePlayIndex();
  }
  /**
   * Protobuf type {@code Cayman}
   */
  public static final class Cayman extends
      com.google.protobuf.GeneratedMessage
      implements CaymanOrBuilder {
    // Use Cayman.newBuilder() to construct.
    private Cayman(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Cayman(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Cayman defaultInstance;
    public static Cayman getDefaultInstance() {
      return defaultInstance;
    }

    public Cayman getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Cayman(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              isSmoke_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              isMoved_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              valueOfTem_ = input.readSInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              valueOfHum_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              valueOfSmoke_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              standarOfSmoke_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              alarmOfHighTem_ = input.readSInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              alarmOfLowTem_ = input.readSInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              alarmOfHighHum_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              alarmOfLowHum_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              cmd_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              valueOfphotor_ = input.readUInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              devceState_ = input.readUInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              bleAdvType_ = input.readUInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              bleAdvStartTime_ = input.readUInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              bleAdvEndTime_ = input.readUInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              valueOfBatb_ = input.readUInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              levelOfAlarm_ = input.readUInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00040000;
              isSelfCheck_ = input.readUInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00080000;
              calibrationOfSmoke_ = input.readUInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00100000;
              alarmOfSmoke_ = input.readUInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00200000;
              humanDetectionTime_ = input.readUInt32();
              break;
            }
            case 184: {
              bitField0_ |= 0x00400000;
              defenseMode_ = input.readUInt32();
              break;
            }
            case 192: {
              bitField0_ |= 0x00800000;
              defenseTimerMode_ = input.readUInt32();
              break;
            }
            case 200: {
              bitField0_ |= 0x01000000;
              defenseModeStartTime_ = input.readUInt32();
              break;
            }
            case 208: {
              bitField0_ |= 0x02000000;
              defenseModeStopTime_ = input.readUInt32();
              break;
            }
            case 216: {
              bitField0_ |= 0x04000000;
              invadeAlarm_ = input.readUInt32();
              break;
            }
            case 224: {
              bitField0_ |= 0x08000000;
              cdsSwitch_ = input.readUInt32();
              break;
            }
            case 232: {
              bitField0_ |= 0x10000000;
              nightLightSwitch_ = input.readUInt32();
              break;
            }
            case 240: {
              bitField0_ |= 0x20000000;
              humanDetectionSwitch_ = input.readUInt32();
              break;
            }
            case 248: {
              bitField0_ |= 0x40000000;
              humanDetectionSync_ = input.readUInt32();
              break;
            }
            case 256: {
              bitField0_ |= 0x80000000;
              voicePlayIndex_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_Cayman_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_Cayman_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Cayman.class, Builder.class);
    }

    public static com.google.protobuf.Parser<Cayman> PARSER =
        new com.google.protobuf.AbstractParser<Cayman>() {
      public Cayman parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Cayman(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<Cayman> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 isSmoke = 1;
    public static final int ISSMOKE_FIELD_NUMBER = 1;
    private int isSmoke_;
    /**
     * <code>optional uint32 isSmoke = 1;</code>
     */
    public boolean hasIsSmoke() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 isSmoke = 1;</code>
     */
    public int getIsSmoke() {
      return isSmoke_;
    }

    // optional uint32 isMoved = 2;
    public static final int ISMOVED_FIELD_NUMBER = 2;
    private int isMoved_;
    /**
     * <code>optional uint32 isMoved = 2;</code>
     */
    public boolean hasIsMoved() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 isMoved = 2;</code>
     */
    public int getIsMoved() {
      return isMoved_;
    }

    // optional sint32 valueOfTem = 3;
    public static final int VALUEOFTEM_FIELD_NUMBER = 3;
    private int valueOfTem_;
    /**
     * <code>optional sint32 valueOfTem = 3;</code>
     */
    public boolean hasValueOfTem() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 valueOfTem = 3;</code>
     */
    public int getValueOfTem() {
      return valueOfTem_;
    }

    // optional uint32 valueOfHum = 4;
    public static final int VALUEOFHUM_FIELD_NUMBER = 4;
    private int valueOfHum_;
    /**
     * <code>optional uint32 valueOfHum = 4;</code>
     */
    public boolean hasValueOfHum() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 valueOfHum = 4;</code>
     */
    public int getValueOfHum() {
      return valueOfHum_;
    }

    // optional uint32 valueOfSmoke = 5;
    public static final int VALUEOFSMOKE_FIELD_NUMBER = 5;
    private int valueOfSmoke_;
    /**
     * <code>optional uint32 valueOfSmoke = 5;</code>
     */
    public boolean hasValueOfSmoke() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 valueOfSmoke = 5;</code>
     */
    public int getValueOfSmoke() {
      return valueOfSmoke_;
    }

    // optional uint32 standarOfSmoke = 6;
    public static final int STANDAROFSMOKE_FIELD_NUMBER = 6;
    private int standarOfSmoke_;
    /**
     * <code>optional uint32 standarOfSmoke = 6;</code>
     */
    public boolean hasStandarOfSmoke() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 standarOfSmoke = 6;</code>
     */
    public int getStandarOfSmoke() {
      return standarOfSmoke_;
    }

    // optional sint32 alarmOfHighTem = 7;
    public static final int ALARMOFHIGHTEM_FIELD_NUMBER = 7;
    private int alarmOfHighTem_;
    /**
     * <code>optional sint32 alarmOfHighTem = 7;</code>
     */
    public boolean hasAlarmOfHighTem() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional sint32 alarmOfHighTem = 7;</code>
     */
    public int getAlarmOfHighTem() {
      return alarmOfHighTem_;
    }

    // optional sint32 alarmOfLowTem = 8;
    public static final int ALARMOFLOWTEM_FIELD_NUMBER = 8;
    private int alarmOfLowTem_;
    /**
     * <code>optional sint32 alarmOfLowTem = 8;</code>
     */
    public boolean hasAlarmOfLowTem() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional sint32 alarmOfLowTem = 8;</code>
     */
    public int getAlarmOfLowTem() {
      return alarmOfLowTem_;
    }

    // optional uint32 alarmOfHighHum = 9;
    public static final int ALARMOFHIGHHUM_FIELD_NUMBER = 9;
    private int alarmOfHighHum_;
    /**
     * <code>optional uint32 alarmOfHighHum = 9;</code>
     */
    public boolean hasAlarmOfHighHum() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 alarmOfHighHum = 9;</code>
     */
    public int getAlarmOfHighHum() {
      return alarmOfHighHum_;
    }

    // optional uint32 alarmOfLowHum = 10;
    public static final int ALARMOFLOWHUM_FIELD_NUMBER = 10;
    private int alarmOfLowHum_;
    /**
     * <code>optional uint32 alarmOfLowHum = 10;</code>
     */
    public boolean hasAlarmOfLowHum() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 alarmOfLowHum = 10;</code>
     */
    public int getAlarmOfLowHum() {
      return alarmOfLowHum_;
    }

    // optional uint32 cmd = 11;
    public static final int CMD_FIELD_NUMBER = 11;
    private int cmd_;
    /**
     * <code>optional uint32 cmd = 11;</code>
     */
    public boolean hasCmd() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 cmd = 11;</code>
     */
    public int getCmd() {
      return cmd_;
    }

    // optional uint32 valueOfphotor = 12;
    public static final int VALUEOFPHOTOR_FIELD_NUMBER = 12;
    private int valueOfphotor_;
    /**
     * <code>optional uint32 valueOfphotor = 12;</code>
     */
    public boolean hasValueOfphotor() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 valueOfphotor = 12;</code>
     */
    public int getValueOfphotor() {
      return valueOfphotor_;
    }

    // optional uint32 devceState = 13;
    public static final int DEVCESTATE_FIELD_NUMBER = 13;
    private int devceState_;
    /**
     * <code>optional uint32 devceState = 13;</code>
     */
    public boolean hasDevceState() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint32 devceState = 13;</code>
     */
    public int getDevceState() {
      return devceState_;
    }

    // optional uint32 bleAdvType = 14;
    public static final int BLEADVTYPE_FIELD_NUMBER = 14;
    private int bleAdvType_;
    /**
     * <code>optional uint32 bleAdvType = 14;</code>
     */
    public boolean hasBleAdvType() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional uint32 bleAdvType = 14;</code>
     */
    public int getBleAdvType() {
      return bleAdvType_;
    }

    // optional uint32 bleAdvStartTime = 15;
    public static final int BLEADVSTARTTIME_FIELD_NUMBER = 15;
    private int bleAdvStartTime_;
    /**
     * <code>optional uint32 bleAdvStartTime = 15;</code>
     */
    public boolean hasBleAdvStartTime() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional uint32 bleAdvStartTime = 15;</code>
     */
    public int getBleAdvStartTime() {
      return bleAdvStartTime_;
    }

    // optional uint32 bleAdvEndTime = 16;
    public static final int BLEADVENDTIME_FIELD_NUMBER = 16;
    private int bleAdvEndTime_;
    /**
     * <code>optional uint32 bleAdvEndTime = 16;</code>
     */
    public boolean hasBleAdvEndTime() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional uint32 bleAdvEndTime = 16;</code>
     */
    public int getBleAdvEndTime() {
      return bleAdvEndTime_;
    }

    // optional uint32 valueOfBatb = 17;
    public static final int VALUEOFBATB_FIELD_NUMBER = 17;
    private int valueOfBatb_;
    /**
     * <code>optional uint32 valueOfBatb = 17;</code>
     */
    public boolean hasValueOfBatb() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional uint32 valueOfBatb = 17;</code>
     */
    public int getValueOfBatb() {
      return valueOfBatb_;
    }

    // optional uint32 levelOfAlarm = 18;
    public static final int LEVELOFALARM_FIELD_NUMBER = 18;
    private int levelOfAlarm_;
    /**
     * <code>optional uint32 levelOfAlarm = 18;</code>
     */
    public boolean hasLevelOfAlarm() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional uint32 levelOfAlarm = 18;</code>
     */
    public int getLevelOfAlarm() {
      return levelOfAlarm_;
    }

    // optional uint32 isSelfCheck = 19;
    public static final int ISSELFCHECK_FIELD_NUMBER = 19;
    private int isSelfCheck_;
    /**
     * <code>optional uint32 isSelfCheck = 19;</code>
     */
    public boolean hasIsSelfCheck() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional uint32 isSelfCheck = 19;</code>
     */
    public int getIsSelfCheck() {
      return isSelfCheck_;
    }

    // optional uint32 calibrationOfSmoke = 20;
    public static final int CALIBRATIONOFSMOKE_FIELD_NUMBER = 20;
    private int calibrationOfSmoke_;
    /**
     * <code>optional uint32 calibrationOfSmoke = 20;</code>
     */
    public boolean hasCalibrationOfSmoke() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional uint32 calibrationOfSmoke = 20;</code>
     */
    public int getCalibrationOfSmoke() {
      return calibrationOfSmoke_;
    }

    // optional uint32 alarmOfSmoke = 21;
    public static final int ALARMOFSMOKE_FIELD_NUMBER = 21;
    private int alarmOfSmoke_;
    /**
     * <code>optional uint32 alarmOfSmoke = 21;</code>
     */
    public boolean hasAlarmOfSmoke() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional uint32 alarmOfSmoke = 21;</code>
     */
    public int getAlarmOfSmoke() {
      return alarmOfSmoke_;
    }

    // optional uint32 humanDetectionTime = 22;
    public static final int HUMANDETECTIONTIME_FIELD_NUMBER = 22;
    private int humanDetectionTime_;
    /**
     * <code>optional uint32 humanDetectionTime = 22;</code>
     *
     * <pre>
     * 人体检测时间参数, 单位 s, 范围 [1 - 30], (上|下)
     * </pre>
     */
    public boolean hasHumanDetectionTime() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional uint32 humanDetectionTime = 22;</code>
     *
     * <pre>
     * 人体检测时间参数, 单位 s, 范围 [1 - 30], (上|下)
     * </pre>
     */
    public int getHumanDetectionTime() {
      return humanDetectionTime_;
    }

    // optional uint32 defenseMode = 23;
    public static final int DEFENSEMODE_FIELD_NUMBER = 23;
    private int defenseMode_;
    /**
     * <code>optional uint32 defenseMode = 23;</code>
     *
     * <pre>
     * 设防模式开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public boolean hasDefenseMode() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional uint32 defenseMode = 23;</code>
     *
     * <pre>
     * 设防模式开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public int getDefenseMode() {
      return defenseMode_;
    }

    // optional uint32 defenseTimerMode = 24;
    public static final int DEFENSETIMERMODE_FIELD_NUMBER = 24;
    private int defenseTimerMode_;
    /**
     * <code>optional uint32 defenseTimerMode = 24;</code>
     *
     * <pre>
     * 定时设防模式开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public boolean hasDefenseTimerMode() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional uint32 defenseTimerMode = 24;</code>
     *
     * <pre>
     * 定时设防模式开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public int getDefenseTimerMode() {
      return defenseTimerMode_;
    }

    // optional uint32 defenseModeStartTime = 25;
    public static final int DEFENSEMODESTARTTIME_FIELD_NUMBER = 25;
    private int defenseModeStartTime_;
    /**
     * <code>optional uint32 defenseModeStartTime = 25;</code>
     *
     * <pre>
     * 定时设防开始时间, 单位 min, 范围 [0 - 1439], (上|下)
     * </pre>
     */
    public boolean hasDefenseModeStartTime() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional uint32 defenseModeStartTime = 25;</code>
     *
     * <pre>
     * 定时设防开始时间, 单位 min, 范围 [0 - 1439], (上|下)
     * </pre>
     */
    public int getDefenseModeStartTime() {
      return defenseModeStartTime_;
    }

    // optional uint32 defenseModeStopTime = 26;
    public static final int DEFENSEMODESTOPTIME_FIELD_NUMBER = 26;
    private int defenseModeStopTime_;
    /**
     * <code>optional uint32 defenseModeStopTime = 26;</code>
     *
     * <pre>
     * 定时设防结束时间, 单位 min, 范围 [0 - 1439], (上|下)
     * </pre>
     */
    public boolean hasDefenseModeStopTime() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional uint32 defenseModeStopTime = 26;</code>
     *
     * <pre>
     * 定时设防结束时间, 单位 min, 范围 [0 - 1439], (上|下)
     * </pre>
     */
    public int getDefenseModeStopTime() {
      return defenseModeStopTime_;
    }

    // optional uint32 invadeAlarm = 27;
    public static final int INVADEALARM_FIELD_NUMBER = 27;
    private int invadeAlarm_;
    /**
     * <code>optional uint32 invadeAlarm = 27;</code>
     *
     * <pre>
     * 入侵报警开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public boolean hasInvadeAlarm() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional uint32 invadeAlarm = 27;</code>
     *
     * <pre>
     * 入侵报警开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public int getInvadeAlarm() {
      return invadeAlarm_;
    }

    // optional uint32 cdsSwitch = 28;
    public static final int CDSSWITCH_FIELD_NUMBER = 28;
    private int cdsSwitch_;
    /**
     * <code>optional uint32 cdsSwitch = 28;</code>
     *
     * <pre>
     * 凝露检测开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public boolean hasCdsSwitch() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional uint32 cdsSwitch = 28;</code>
     *
     * <pre>
     * 凝露检测开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public int getCdsSwitch() {
      return cdsSwitch_;
    }

    // optional uint32 nightLightSwitch = 29;
    public static final int NIGHTLIGHTSWITCH_FIELD_NUMBER = 29;
    private int nightLightSwitch_;
    /**
     * <code>optional uint32 nightLightSwitch = 29;</code>
     *
     * <pre>
     * 夜灯开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public boolean hasNightLightSwitch() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional uint32 nightLightSwitch = 29;</code>
     *
     * <pre>
     * 夜灯开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public int getNightLightSwitch() {
      return nightLightSwitch_;
    }

    // optional uint32 humanDetectionSwitch = 30;
    public static final int HUMANDETECTIONSWITCH_FIELD_NUMBER = 30;
    private int humanDetectionSwitch_;
    /**
     * <code>optional uint32 humanDetectionSwitch = 30;</code>
     *
     * <pre>
     * 人体检测开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public boolean hasHumanDetectionSwitch() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional uint32 humanDetectionSwitch = 30;</code>
     *
     * <pre>
     * 人体检测开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public int getHumanDetectionSwitch() {
      return humanDetectionSwitch_;
    }

    // optional uint32 humanDetectionSync = 31;
    public static final int HUMANDETECTIONSYNC_FIELD_NUMBER = 31;
    private int humanDetectionSync_;
    /**
     * <code>optional uint32 humanDetectionSync = 31;</code>
     *
     * <pre>
     * 人体检测同步开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public boolean hasHumanDetectionSync() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional uint32 humanDetectionSync = 31;</code>
     *
     * <pre>
     * 人体检测同步开关, 范围 [0 - 1], (上|下)
     * </pre>
     */
    public int getHumanDetectionSync() {
      return humanDetectionSync_;
    }

    // optional uint32 voicePlayIndex = 32;
    public static final int VOICEPLAYINDEX_FIELD_NUMBER = 32;
    private int voicePlayIndex_;
    /**
     * <code>optional uint32 voicePlayIndex = 32;</code>
     *
     * <pre>
     * 语音播放 index, (下)
     * </pre>
     */
    public boolean hasVoicePlayIndex() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional uint32 voicePlayIndex = 32;</code>
     *
     * <pre>
     * 语音播放 index, (下)
     * </pre>
     */
    public int getVoicePlayIndex() {
      return voicePlayIndex_;
    }

    private void initFields() {
      isSmoke_ = 0;
      isMoved_ = 0;
      valueOfTem_ = 0;
      valueOfHum_ = 0;
      valueOfSmoke_ = 0;
      standarOfSmoke_ = 0;
      alarmOfHighTem_ = 0;
      alarmOfLowTem_ = 0;
      alarmOfHighHum_ = 0;
      alarmOfLowHum_ = 0;
      cmd_ = 0;
      valueOfphotor_ = 0;
      devceState_ = 0;
      bleAdvType_ = 0;
      bleAdvStartTime_ = 0;
      bleAdvEndTime_ = 0;
      valueOfBatb_ = 0;
      levelOfAlarm_ = 0;
      isSelfCheck_ = 0;
      calibrationOfSmoke_ = 0;
      alarmOfSmoke_ = 0;
      humanDetectionTime_ = 0;
      defenseMode_ = 0;
      defenseTimerMode_ = 0;
      defenseModeStartTime_ = 0;
      defenseModeStopTime_ = 0;
      invadeAlarm_ = 0;
      cdsSwitch_ = 0;
      nightLightSwitch_ = 0;
      humanDetectionSwitch_ = 0;
      humanDetectionSync_ = 0;
      voicePlayIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, isSmoke_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, isMoved_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, valueOfTem_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, valueOfHum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, valueOfSmoke_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, standarOfSmoke_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeSInt32(7, alarmOfHighTem_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeSInt32(8, alarmOfLowTem_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, alarmOfHighHum_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, alarmOfLowHum_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(11, cmd_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(12, valueOfphotor_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(13, devceState_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeUInt32(14, bleAdvType_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeUInt32(15, bleAdvStartTime_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeUInt32(16, bleAdvEndTime_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeUInt32(17, valueOfBatb_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeUInt32(18, levelOfAlarm_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeUInt32(19, isSelfCheck_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeUInt32(20, calibrationOfSmoke_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeUInt32(21, alarmOfSmoke_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeUInt32(22, humanDetectionTime_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeUInt32(23, defenseMode_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeUInt32(24, defenseTimerMode_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeUInt32(25, defenseModeStartTime_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeUInt32(26, defenseModeStopTime_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeUInt32(27, invadeAlarm_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeUInt32(28, cdsSwitch_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeUInt32(29, nightLightSwitch_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeUInt32(30, humanDetectionSwitch_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeUInt32(31, humanDetectionSync_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeUInt32(32, voicePlayIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, isSmoke_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, isMoved_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, valueOfTem_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, valueOfHum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, valueOfSmoke_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, standarOfSmoke_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(7, alarmOfHighTem_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(8, alarmOfLowTem_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, alarmOfHighHum_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, alarmOfLowHum_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, cmd_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, valueOfphotor_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, devceState_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(14, bleAdvType_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(15, bleAdvStartTime_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(16, bleAdvEndTime_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(17, valueOfBatb_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(18, levelOfAlarm_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(19, isSelfCheck_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(20, calibrationOfSmoke_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(21, alarmOfSmoke_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(22, humanDetectionTime_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(23, defenseMode_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(24, defenseTimerMode_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(25, defenseModeStartTime_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(26, defenseModeStopTime_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(27, invadeAlarm_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(28, cdsSwitch_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(29, nightLightSwitch_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(30, humanDetectionSwitch_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(31, humanDetectionSync_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(32, voicePlayIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static Cayman parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Cayman parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Cayman parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Cayman parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Cayman parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Cayman parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static Cayman parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static Cayman parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static Cayman parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Cayman parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Cayman prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Cayman}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements CaymanOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_Cayman_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_Cayman_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Cayman.class, Builder.class);
      }

      // Construct using MsgNode1V1M32.Cayman.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        isSmoke_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        isMoved_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        valueOfTem_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        valueOfHum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        valueOfSmoke_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        standarOfSmoke_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        alarmOfHighTem_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        alarmOfLowTem_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        alarmOfHighHum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        alarmOfLowHum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        cmd_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        valueOfphotor_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        devceState_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        bleAdvType_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        bleAdvStartTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        bleAdvEndTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        valueOfBatb_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        levelOfAlarm_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        isSelfCheck_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        calibrationOfSmoke_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        alarmOfSmoke_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        humanDetectionTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        defenseMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00400000);
        defenseTimerMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        defenseModeStartTime_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        defenseModeStopTime_ = 0;
        bitField0_ = (bitField0_ & ~0x02000000);
        invadeAlarm_ = 0;
        bitField0_ = (bitField0_ & ~0x04000000);
        cdsSwitch_ = 0;
        bitField0_ = (bitField0_ & ~0x08000000);
        nightLightSwitch_ = 0;
        bitField0_ = (bitField0_ & ~0x10000000);
        humanDetectionSwitch_ = 0;
        bitField0_ = (bitField0_ & ~0x20000000);
        humanDetectionSync_ = 0;
        bitField0_ = (bitField0_ & ~0x40000000);
        voicePlayIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x80000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_Cayman_descriptor;
      }

      public Cayman getDefaultInstanceForType() {
        return Cayman.getDefaultInstance();
      }

      public Cayman build() {
        Cayman result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Cayman buildPartial() {
        Cayman result = new Cayman(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.isSmoke_ = isSmoke_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.isMoved_ = isMoved_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.valueOfTem_ = valueOfTem_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.valueOfHum_ = valueOfHum_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.valueOfSmoke_ = valueOfSmoke_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.standarOfSmoke_ = standarOfSmoke_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.alarmOfHighTem_ = alarmOfHighTem_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.alarmOfLowTem_ = alarmOfLowTem_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.alarmOfHighHum_ = alarmOfHighHum_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.alarmOfLowHum_ = alarmOfLowHum_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.cmd_ = cmd_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.valueOfphotor_ = valueOfphotor_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.devceState_ = devceState_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.bleAdvType_ = bleAdvType_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.bleAdvStartTime_ = bleAdvStartTime_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.bleAdvEndTime_ = bleAdvEndTime_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.valueOfBatb_ = valueOfBatb_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.levelOfAlarm_ = levelOfAlarm_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.isSelfCheck_ = isSelfCheck_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.calibrationOfSmoke_ = calibrationOfSmoke_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.alarmOfSmoke_ = alarmOfSmoke_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.humanDetectionTime_ = humanDetectionTime_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.defenseMode_ = defenseMode_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.defenseTimerMode_ = defenseTimerMode_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.defenseModeStartTime_ = defenseModeStartTime_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.defenseModeStopTime_ = defenseModeStopTime_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.invadeAlarm_ = invadeAlarm_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.cdsSwitch_ = cdsSwitch_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.nightLightSwitch_ = nightLightSwitch_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.humanDetectionSwitch_ = humanDetectionSwitch_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x40000000;
        }
        result.humanDetectionSync_ = humanDetectionSync_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x80000000;
        }
        result.voicePlayIndex_ = voicePlayIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Cayman) {
          return mergeFrom((Cayman)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Cayman other) {
        if (other == Cayman.getDefaultInstance()) return this;
        if (other.hasIsSmoke()) {
          setIsSmoke(other.getIsSmoke());
        }
        if (other.hasIsMoved()) {
          setIsMoved(other.getIsMoved());
        }
        if (other.hasValueOfTem()) {
          setValueOfTem(other.getValueOfTem());
        }
        if (other.hasValueOfHum()) {
          setValueOfHum(other.getValueOfHum());
        }
        if (other.hasValueOfSmoke()) {
          setValueOfSmoke(other.getValueOfSmoke());
        }
        if (other.hasStandarOfSmoke()) {
          setStandarOfSmoke(other.getStandarOfSmoke());
        }
        if (other.hasAlarmOfHighTem()) {
          setAlarmOfHighTem(other.getAlarmOfHighTem());
        }
        if (other.hasAlarmOfLowTem()) {
          setAlarmOfLowTem(other.getAlarmOfLowTem());
        }
        if (other.hasAlarmOfHighHum()) {
          setAlarmOfHighHum(other.getAlarmOfHighHum());
        }
        if (other.hasAlarmOfLowHum()) {
          setAlarmOfLowHum(other.getAlarmOfLowHum());
        }
        if (other.hasCmd()) {
          setCmd(other.getCmd());
        }
        if (other.hasValueOfphotor()) {
          setValueOfphotor(other.getValueOfphotor());
        }
        if (other.hasDevceState()) {
          setDevceState(other.getDevceState());
        }
        if (other.hasBleAdvType()) {
          setBleAdvType(other.getBleAdvType());
        }
        if (other.hasBleAdvStartTime()) {
          setBleAdvStartTime(other.getBleAdvStartTime());
        }
        if (other.hasBleAdvEndTime()) {
          setBleAdvEndTime(other.getBleAdvEndTime());
        }
        if (other.hasValueOfBatb()) {
          setValueOfBatb(other.getValueOfBatb());
        }
        if (other.hasLevelOfAlarm()) {
          setLevelOfAlarm(other.getLevelOfAlarm());
        }
        if (other.hasIsSelfCheck()) {
          setIsSelfCheck(other.getIsSelfCheck());
        }
        if (other.hasCalibrationOfSmoke()) {
          setCalibrationOfSmoke(other.getCalibrationOfSmoke());
        }
        if (other.hasAlarmOfSmoke()) {
          setAlarmOfSmoke(other.getAlarmOfSmoke());
        }
        if (other.hasHumanDetectionTime()) {
          setHumanDetectionTime(other.getHumanDetectionTime());
        }
        if (other.hasDefenseMode()) {
          setDefenseMode(other.getDefenseMode());
        }
        if (other.hasDefenseTimerMode()) {
          setDefenseTimerMode(other.getDefenseTimerMode());
        }
        if (other.hasDefenseModeStartTime()) {
          setDefenseModeStartTime(other.getDefenseModeStartTime());
        }
        if (other.hasDefenseModeStopTime()) {
          setDefenseModeStopTime(other.getDefenseModeStopTime());
        }
        if (other.hasInvadeAlarm()) {
          setInvadeAlarm(other.getInvadeAlarm());
        }
        if (other.hasCdsSwitch()) {
          setCdsSwitch(other.getCdsSwitch());
        }
        if (other.hasNightLightSwitch()) {
          setNightLightSwitch(other.getNightLightSwitch());
        }
        if (other.hasHumanDetectionSwitch()) {
          setHumanDetectionSwitch(other.getHumanDetectionSwitch());
        }
        if (other.hasHumanDetectionSync()) {
          setHumanDetectionSync(other.getHumanDetectionSync());
        }
        if (other.hasVoicePlayIndex()) {
          setVoicePlayIndex(other.getVoicePlayIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Cayman parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Cayman) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 isSmoke = 1;
      private int isSmoke_ ;
      /**
       * <code>optional uint32 isSmoke = 1;</code>
       */
      public boolean hasIsSmoke() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 isSmoke = 1;</code>
       */
      public int getIsSmoke() {
        return isSmoke_;
      }
      /**
       * <code>optional uint32 isSmoke = 1;</code>
       */
      public Builder setIsSmoke(int value) {
        bitField0_ |= 0x00000001;
        isSmoke_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 isSmoke = 1;</code>
       */
      public Builder clearIsSmoke() {
        bitField0_ = (bitField0_ & ~0x00000001);
        isSmoke_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 isMoved = 2;
      private int isMoved_ ;
      /**
       * <code>optional uint32 isMoved = 2;</code>
       */
      public boolean hasIsMoved() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 isMoved = 2;</code>
       */
      public int getIsMoved() {
        return isMoved_;
      }
      /**
       * <code>optional uint32 isMoved = 2;</code>
       */
      public Builder setIsMoved(int value) {
        bitField0_ |= 0x00000002;
        isMoved_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 isMoved = 2;</code>
       */
      public Builder clearIsMoved() {
        bitField0_ = (bitField0_ & ~0x00000002);
        isMoved_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 valueOfTem = 3;
      private int valueOfTem_ ;
      /**
       * <code>optional sint32 valueOfTem = 3;</code>
       */
      public boolean hasValueOfTem() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sint32 valueOfTem = 3;</code>
       */
      public int getValueOfTem() {
        return valueOfTem_;
      }
      /**
       * <code>optional sint32 valueOfTem = 3;</code>
       */
      public Builder setValueOfTem(int value) {
        bitField0_ |= 0x00000004;
        valueOfTem_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 valueOfTem = 3;</code>
       */
      public Builder clearValueOfTem() {
        bitField0_ = (bitField0_ & ~0x00000004);
        valueOfTem_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 valueOfHum = 4;
      private int valueOfHum_ ;
      /**
       * <code>optional uint32 valueOfHum = 4;</code>
       */
      public boolean hasValueOfHum() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 valueOfHum = 4;</code>
       */
      public int getValueOfHum() {
        return valueOfHum_;
      }
      /**
       * <code>optional uint32 valueOfHum = 4;</code>
       */
      public Builder setValueOfHum(int value) {
        bitField0_ |= 0x00000008;
        valueOfHum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 valueOfHum = 4;</code>
       */
      public Builder clearValueOfHum() {
        bitField0_ = (bitField0_ & ~0x00000008);
        valueOfHum_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 valueOfSmoke = 5;
      private int valueOfSmoke_ ;
      /**
       * <code>optional uint32 valueOfSmoke = 5;</code>
       */
      public boolean hasValueOfSmoke() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 valueOfSmoke = 5;</code>
       */
      public int getValueOfSmoke() {
        return valueOfSmoke_;
      }
      /**
       * <code>optional uint32 valueOfSmoke = 5;</code>
       */
      public Builder setValueOfSmoke(int value) {
        bitField0_ |= 0x00000010;
        valueOfSmoke_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 valueOfSmoke = 5;</code>
       */
      public Builder clearValueOfSmoke() {
        bitField0_ = (bitField0_ & ~0x00000010);
        valueOfSmoke_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 standarOfSmoke = 6;
      private int standarOfSmoke_ ;
      /**
       * <code>optional uint32 standarOfSmoke = 6;</code>
       */
      public boolean hasStandarOfSmoke() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 standarOfSmoke = 6;</code>
       */
      public int getStandarOfSmoke() {
        return standarOfSmoke_;
      }
      /**
       * <code>optional uint32 standarOfSmoke = 6;</code>
       */
      public Builder setStandarOfSmoke(int value) {
        bitField0_ |= 0x00000020;
        standarOfSmoke_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 standarOfSmoke = 6;</code>
       */
      public Builder clearStandarOfSmoke() {
        bitField0_ = (bitField0_ & ~0x00000020);
        standarOfSmoke_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 alarmOfHighTem = 7;
      private int alarmOfHighTem_ ;
      /**
       * <code>optional sint32 alarmOfHighTem = 7;</code>
       */
      public boolean hasAlarmOfHighTem() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional sint32 alarmOfHighTem = 7;</code>
       */
      public int getAlarmOfHighTem() {
        return alarmOfHighTem_;
      }
      /**
       * <code>optional sint32 alarmOfHighTem = 7;</code>
       */
      public Builder setAlarmOfHighTem(int value) {
        bitField0_ |= 0x00000040;
        alarmOfHighTem_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 alarmOfHighTem = 7;</code>
       */
      public Builder clearAlarmOfHighTem() {
        bitField0_ = (bitField0_ & ~0x00000040);
        alarmOfHighTem_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 alarmOfLowTem = 8;
      private int alarmOfLowTem_ ;
      /**
       * <code>optional sint32 alarmOfLowTem = 8;</code>
       */
      public boolean hasAlarmOfLowTem() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional sint32 alarmOfLowTem = 8;</code>
       */
      public int getAlarmOfLowTem() {
        return alarmOfLowTem_;
      }
      /**
       * <code>optional sint32 alarmOfLowTem = 8;</code>
       */
      public Builder setAlarmOfLowTem(int value) {
        bitField0_ |= 0x00000080;
        alarmOfLowTem_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 alarmOfLowTem = 8;</code>
       */
      public Builder clearAlarmOfLowTem() {
        bitField0_ = (bitField0_ & ~0x00000080);
        alarmOfLowTem_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 alarmOfHighHum = 9;
      private int alarmOfHighHum_ ;
      /**
       * <code>optional uint32 alarmOfHighHum = 9;</code>
       */
      public boolean hasAlarmOfHighHum() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 alarmOfHighHum = 9;</code>
       */
      public int getAlarmOfHighHum() {
        return alarmOfHighHum_;
      }
      /**
       * <code>optional uint32 alarmOfHighHum = 9;</code>
       */
      public Builder setAlarmOfHighHum(int value) {
        bitField0_ |= 0x00000100;
        alarmOfHighHum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 alarmOfHighHum = 9;</code>
       */
      public Builder clearAlarmOfHighHum() {
        bitField0_ = (bitField0_ & ~0x00000100);
        alarmOfHighHum_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 alarmOfLowHum = 10;
      private int alarmOfLowHum_ ;
      /**
       * <code>optional uint32 alarmOfLowHum = 10;</code>
       */
      public boolean hasAlarmOfLowHum() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 alarmOfLowHum = 10;</code>
       */
      public int getAlarmOfLowHum() {
        return alarmOfLowHum_;
      }
      /**
       * <code>optional uint32 alarmOfLowHum = 10;</code>
       */
      public Builder setAlarmOfLowHum(int value) {
        bitField0_ |= 0x00000200;
        alarmOfLowHum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 alarmOfLowHum = 10;</code>
       */
      public Builder clearAlarmOfLowHum() {
        bitField0_ = (bitField0_ & ~0x00000200);
        alarmOfLowHum_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 cmd = 11;
      private int cmd_ ;
      /**
       * <code>optional uint32 cmd = 11;</code>
       */
      public boolean hasCmd() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 cmd = 11;</code>
       */
      public int getCmd() {
        return cmd_;
      }
      /**
       * <code>optional uint32 cmd = 11;</code>
       */
      public Builder setCmd(int value) {
        bitField0_ |= 0x00000400;
        cmd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cmd = 11;</code>
       */
      public Builder clearCmd() {
        bitField0_ = (bitField0_ & ~0x00000400);
        cmd_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 valueOfphotor = 12;
      private int valueOfphotor_ ;
      /**
       * <code>optional uint32 valueOfphotor = 12;</code>
       */
      public boolean hasValueOfphotor() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 valueOfphotor = 12;</code>
       */
      public int getValueOfphotor() {
        return valueOfphotor_;
      }
      /**
       * <code>optional uint32 valueOfphotor = 12;</code>
       */
      public Builder setValueOfphotor(int value) {
        bitField0_ |= 0x00000800;
        valueOfphotor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 valueOfphotor = 12;</code>
       */
      public Builder clearValueOfphotor() {
        bitField0_ = (bitField0_ & ~0x00000800);
        valueOfphotor_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 devceState = 13;
      private int devceState_ ;
      /**
       * <code>optional uint32 devceState = 13;</code>
       */
      public boolean hasDevceState() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 devceState = 13;</code>
       */
      public int getDevceState() {
        return devceState_;
      }
      /**
       * <code>optional uint32 devceState = 13;</code>
       */
      public Builder setDevceState(int value) {
        bitField0_ |= 0x00001000;
        devceState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 devceState = 13;</code>
       */
      public Builder clearDevceState() {
        bitField0_ = (bitField0_ & ~0x00001000);
        devceState_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 bleAdvType = 14;
      private int bleAdvType_ ;
      /**
       * <code>optional uint32 bleAdvType = 14;</code>
       */
      public boolean hasBleAdvType() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional uint32 bleAdvType = 14;</code>
       */
      public int getBleAdvType() {
        return bleAdvType_;
      }
      /**
       * <code>optional uint32 bleAdvType = 14;</code>
       */
      public Builder setBleAdvType(int value) {
        bitField0_ |= 0x00002000;
        bleAdvType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bleAdvType = 14;</code>
       */
      public Builder clearBleAdvType() {
        bitField0_ = (bitField0_ & ~0x00002000);
        bleAdvType_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 bleAdvStartTime = 15;
      private int bleAdvStartTime_ ;
      /**
       * <code>optional uint32 bleAdvStartTime = 15;</code>
       */
      public boolean hasBleAdvStartTime() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional uint32 bleAdvStartTime = 15;</code>
       */
      public int getBleAdvStartTime() {
        return bleAdvStartTime_;
      }
      /**
       * <code>optional uint32 bleAdvStartTime = 15;</code>
       */
      public Builder setBleAdvStartTime(int value) {
        bitField0_ |= 0x00004000;
        bleAdvStartTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bleAdvStartTime = 15;</code>
       */
      public Builder clearBleAdvStartTime() {
        bitField0_ = (bitField0_ & ~0x00004000);
        bleAdvStartTime_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 bleAdvEndTime = 16;
      private int bleAdvEndTime_ ;
      /**
       * <code>optional uint32 bleAdvEndTime = 16;</code>
       */
      public boolean hasBleAdvEndTime() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional uint32 bleAdvEndTime = 16;</code>
       */
      public int getBleAdvEndTime() {
        return bleAdvEndTime_;
      }
      /**
       * <code>optional uint32 bleAdvEndTime = 16;</code>
       */
      public Builder setBleAdvEndTime(int value) {
        bitField0_ |= 0x00008000;
        bleAdvEndTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bleAdvEndTime = 16;</code>
       */
      public Builder clearBleAdvEndTime() {
        bitField0_ = (bitField0_ & ~0x00008000);
        bleAdvEndTime_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 valueOfBatb = 17;
      private int valueOfBatb_ ;
      /**
       * <code>optional uint32 valueOfBatb = 17;</code>
       */
      public boolean hasValueOfBatb() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional uint32 valueOfBatb = 17;</code>
       */
      public int getValueOfBatb() {
        return valueOfBatb_;
      }
      /**
       * <code>optional uint32 valueOfBatb = 17;</code>
       */
      public Builder setValueOfBatb(int value) {
        bitField0_ |= 0x00010000;
        valueOfBatb_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 valueOfBatb = 17;</code>
       */
      public Builder clearValueOfBatb() {
        bitField0_ = (bitField0_ & ~0x00010000);
        valueOfBatb_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 levelOfAlarm = 18;
      private int levelOfAlarm_ ;
      /**
       * <code>optional uint32 levelOfAlarm = 18;</code>
       */
      public boolean hasLevelOfAlarm() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional uint32 levelOfAlarm = 18;</code>
       */
      public int getLevelOfAlarm() {
        return levelOfAlarm_;
      }
      /**
       * <code>optional uint32 levelOfAlarm = 18;</code>
       */
      public Builder setLevelOfAlarm(int value) {
        bitField0_ |= 0x00020000;
        levelOfAlarm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 levelOfAlarm = 18;</code>
       */
      public Builder clearLevelOfAlarm() {
        bitField0_ = (bitField0_ & ~0x00020000);
        levelOfAlarm_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 isSelfCheck = 19;
      private int isSelfCheck_ ;
      /**
       * <code>optional uint32 isSelfCheck = 19;</code>
       */
      public boolean hasIsSelfCheck() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional uint32 isSelfCheck = 19;</code>
       */
      public int getIsSelfCheck() {
        return isSelfCheck_;
      }
      /**
       * <code>optional uint32 isSelfCheck = 19;</code>
       */
      public Builder setIsSelfCheck(int value) {
        bitField0_ |= 0x00040000;
        isSelfCheck_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 isSelfCheck = 19;</code>
       */
      public Builder clearIsSelfCheck() {
        bitField0_ = (bitField0_ & ~0x00040000);
        isSelfCheck_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 calibrationOfSmoke = 20;
      private int calibrationOfSmoke_ ;
      /**
       * <code>optional uint32 calibrationOfSmoke = 20;</code>
       */
      public boolean hasCalibrationOfSmoke() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional uint32 calibrationOfSmoke = 20;</code>
       */
      public int getCalibrationOfSmoke() {
        return calibrationOfSmoke_;
      }
      /**
       * <code>optional uint32 calibrationOfSmoke = 20;</code>
       */
      public Builder setCalibrationOfSmoke(int value) {
        bitField0_ |= 0x00080000;
        calibrationOfSmoke_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 calibrationOfSmoke = 20;</code>
       */
      public Builder clearCalibrationOfSmoke() {
        bitField0_ = (bitField0_ & ~0x00080000);
        calibrationOfSmoke_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 alarmOfSmoke = 21;
      private int alarmOfSmoke_ ;
      /**
       * <code>optional uint32 alarmOfSmoke = 21;</code>
       */
      public boolean hasAlarmOfSmoke() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional uint32 alarmOfSmoke = 21;</code>
       */
      public int getAlarmOfSmoke() {
        return alarmOfSmoke_;
      }
      /**
       * <code>optional uint32 alarmOfSmoke = 21;</code>
       */
      public Builder setAlarmOfSmoke(int value) {
        bitField0_ |= 0x00100000;
        alarmOfSmoke_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 alarmOfSmoke = 21;</code>
       */
      public Builder clearAlarmOfSmoke() {
        bitField0_ = (bitField0_ & ~0x00100000);
        alarmOfSmoke_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 humanDetectionTime = 22;
      private int humanDetectionTime_ ;
      /**
       * <code>optional uint32 humanDetectionTime = 22;</code>
       *
       * <pre>
       * 人体检测时间参数, 单位 s, 范围 [1 - 30], (上|下)
       * </pre>
       */
      public boolean hasHumanDetectionTime() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional uint32 humanDetectionTime = 22;</code>
       *
       * <pre>
       * 人体检测时间参数, 单位 s, 范围 [1 - 30], (上|下)
       * </pre>
       */
      public int getHumanDetectionTime() {
        return humanDetectionTime_;
      }
      /**
       * <code>optional uint32 humanDetectionTime = 22;</code>
       *
       * <pre>
       * 人体检测时间参数, 单位 s, 范围 [1 - 30], (上|下)
       * </pre>
       */
      public Builder setHumanDetectionTime(int value) {
        bitField0_ |= 0x00200000;
        humanDetectionTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 humanDetectionTime = 22;</code>
       *
       * <pre>
       * 人体检测时间参数, 单位 s, 范围 [1 - 30], (上|下)
       * </pre>
       */
      public Builder clearHumanDetectionTime() {
        bitField0_ = (bitField0_ & ~0x00200000);
        humanDetectionTime_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 defenseMode = 23;
      private int defenseMode_ ;
      /**
       * <code>optional uint32 defenseMode = 23;</code>
       *
       * <pre>
       * 设防模式开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public boolean hasDefenseMode() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional uint32 defenseMode = 23;</code>
       *
       * <pre>
       * 设防模式开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public int getDefenseMode() {
        return defenseMode_;
      }
      /**
       * <code>optional uint32 defenseMode = 23;</code>
       *
       * <pre>
       * 设防模式开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder setDefenseMode(int value) {
        bitField0_ |= 0x00400000;
        defenseMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 defenseMode = 23;</code>
       *
       * <pre>
       * 设防模式开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder clearDefenseMode() {
        bitField0_ = (bitField0_ & ~0x00400000);
        defenseMode_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 defenseTimerMode = 24;
      private int defenseTimerMode_ ;
      /**
       * <code>optional uint32 defenseTimerMode = 24;</code>
       *
       * <pre>
       * 定时设防模式开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public boolean hasDefenseTimerMode() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional uint32 defenseTimerMode = 24;</code>
       *
       * <pre>
       * 定时设防模式开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public int getDefenseTimerMode() {
        return defenseTimerMode_;
      }
      /**
       * <code>optional uint32 defenseTimerMode = 24;</code>
       *
       * <pre>
       * 定时设防模式开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder setDefenseTimerMode(int value) {
        bitField0_ |= 0x00800000;
        defenseTimerMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 defenseTimerMode = 24;</code>
       *
       * <pre>
       * 定时设防模式开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder clearDefenseTimerMode() {
        bitField0_ = (bitField0_ & ~0x00800000);
        defenseTimerMode_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 defenseModeStartTime = 25;
      private int defenseModeStartTime_ ;
      /**
       * <code>optional uint32 defenseModeStartTime = 25;</code>
       *
       * <pre>
       * 定时设防开始时间, 单位 min, 范围 [0 - 1439], (上|下)
       * </pre>
       */
      public boolean hasDefenseModeStartTime() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional uint32 defenseModeStartTime = 25;</code>
       *
       * <pre>
       * 定时设防开始时间, 单位 min, 范围 [0 - 1439], (上|下)
       * </pre>
       */
      public int getDefenseModeStartTime() {
        return defenseModeStartTime_;
      }
      /**
       * <code>optional uint32 defenseModeStartTime = 25;</code>
       *
       * <pre>
       * 定时设防开始时间, 单位 min, 范围 [0 - 1439], (上|下)
       * </pre>
       */
      public Builder setDefenseModeStartTime(int value) {
        bitField0_ |= 0x01000000;
        defenseModeStartTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 defenseModeStartTime = 25;</code>
       *
       * <pre>
       * 定时设防开始时间, 单位 min, 范围 [0 - 1439], (上|下)
       * </pre>
       */
      public Builder clearDefenseModeStartTime() {
        bitField0_ = (bitField0_ & ~0x01000000);
        defenseModeStartTime_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 defenseModeStopTime = 26;
      private int defenseModeStopTime_ ;
      /**
       * <code>optional uint32 defenseModeStopTime = 26;</code>
       *
       * <pre>
       * 定时设防结束时间, 单位 min, 范围 [0 - 1439], (上|下)
       * </pre>
       */
      public boolean hasDefenseModeStopTime() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional uint32 defenseModeStopTime = 26;</code>
       *
       * <pre>
       * 定时设防结束时间, 单位 min, 范围 [0 - 1439], (上|下)
       * </pre>
       */
      public int getDefenseModeStopTime() {
        return defenseModeStopTime_;
      }
      /**
       * <code>optional uint32 defenseModeStopTime = 26;</code>
       *
       * <pre>
       * 定时设防结束时间, 单位 min, 范围 [0 - 1439], (上|下)
       * </pre>
       */
      public Builder setDefenseModeStopTime(int value) {
        bitField0_ |= 0x02000000;
        defenseModeStopTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 defenseModeStopTime = 26;</code>
       *
       * <pre>
       * 定时设防结束时间, 单位 min, 范围 [0 - 1439], (上|下)
       * </pre>
       */
      public Builder clearDefenseModeStopTime() {
        bitField0_ = (bitField0_ & ~0x02000000);
        defenseModeStopTime_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 invadeAlarm = 27;
      private int invadeAlarm_ ;
      /**
       * <code>optional uint32 invadeAlarm = 27;</code>
       *
       * <pre>
       * 入侵报警开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public boolean hasInvadeAlarm() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional uint32 invadeAlarm = 27;</code>
       *
       * <pre>
       * 入侵报警开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public int getInvadeAlarm() {
        return invadeAlarm_;
      }
      /**
       * <code>optional uint32 invadeAlarm = 27;</code>
       *
       * <pre>
       * 入侵报警开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder setInvadeAlarm(int value) {
        bitField0_ |= 0x04000000;
        invadeAlarm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 invadeAlarm = 27;</code>
       *
       * <pre>
       * 入侵报警开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder clearInvadeAlarm() {
        bitField0_ = (bitField0_ & ~0x04000000);
        invadeAlarm_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 cdsSwitch = 28;
      private int cdsSwitch_ ;
      /**
       * <code>optional uint32 cdsSwitch = 28;</code>
       *
       * <pre>
       * 凝露检测开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public boolean hasCdsSwitch() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional uint32 cdsSwitch = 28;</code>
       *
       * <pre>
       * 凝露检测开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public int getCdsSwitch() {
        return cdsSwitch_;
      }
      /**
       * <code>optional uint32 cdsSwitch = 28;</code>
       *
       * <pre>
       * 凝露检测开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder setCdsSwitch(int value) {
        bitField0_ |= 0x08000000;
        cdsSwitch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cdsSwitch = 28;</code>
       *
       * <pre>
       * 凝露检测开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder clearCdsSwitch() {
        bitField0_ = (bitField0_ & ~0x08000000);
        cdsSwitch_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 nightLightSwitch = 29;
      private int nightLightSwitch_ ;
      /**
       * <code>optional uint32 nightLightSwitch = 29;</code>
       *
       * <pre>
       * 夜灯开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public boolean hasNightLightSwitch() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional uint32 nightLightSwitch = 29;</code>
       *
       * <pre>
       * 夜灯开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public int getNightLightSwitch() {
        return nightLightSwitch_;
      }
      /**
       * <code>optional uint32 nightLightSwitch = 29;</code>
       *
       * <pre>
       * 夜灯开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder setNightLightSwitch(int value) {
        bitField0_ |= 0x10000000;
        nightLightSwitch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 nightLightSwitch = 29;</code>
       *
       * <pre>
       * 夜灯开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder clearNightLightSwitch() {
        bitField0_ = (bitField0_ & ~0x10000000);
        nightLightSwitch_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 humanDetectionSwitch = 30;
      private int humanDetectionSwitch_ ;
      /**
       * <code>optional uint32 humanDetectionSwitch = 30;</code>
       *
       * <pre>
       * 人体检测开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public boolean hasHumanDetectionSwitch() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional uint32 humanDetectionSwitch = 30;</code>
       *
       * <pre>
       * 人体检测开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public int getHumanDetectionSwitch() {
        return humanDetectionSwitch_;
      }
      /**
       * <code>optional uint32 humanDetectionSwitch = 30;</code>
       *
       * <pre>
       * 人体检测开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder setHumanDetectionSwitch(int value) {
        bitField0_ |= 0x20000000;
        humanDetectionSwitch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 humanDetectionSwitch = 30;</code>
       *
       * <pre>
       * 人体检测开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder clearHumanDetectionSwitch() {
        bitField0_ = (bitField0_ & ~0x20000000);
        humanDetectionSwitch_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 humanDetectionSync = 31;
      private int humanDetectionSync_ ;
      /**
       * <code>optional uint32 humanDetectionSync = 31;</code>
       *
       * <pre>
       * 人体检测同步开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public boolean hasHumanDetectionSync() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional uint32 humanDetectionSync = 31;</code>
       *
       * <pre>
       * 人体检测同步开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public int getHumanDetectionSync() {
        return humanDetectionSync_;
      }
      /**
       * <code>optional uint32 humanDetectionSync = 31;</code>
       *
       * <pre>
       * 人体检测同步开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder setHumanDetectionSync(int value) {
        bitField0_ |= 0x40000000;
        humanDetectionSync_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 humanDetectionSync = 31;</code>
       *
       * <pre>
       * 人体检测同步开关, 范围 [0 - 1], (上|下)
       * </pre>
       */
      public Builder clearHumanDetectionSync() {
        bitField0_ = (bitField0_ & ~0x40000000);
        humanDetectionSync_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 voicePlayIndex = 32;
      private int voicePlayIndex_ ;
      /**
       * <code>optional uint32 voicePlayIndex = 32;</code>
       *
       * <pre>
       * 语音播放 index, (下)
       * </pre>
       */
      public boolean hasVoicePlayIndex() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional uint32 voicePlayIndex = 32;</code>
       *
       * <pre>
       * 语音播放 index, (下)
       * </pre>
       */
      public int getVoicePlayIndex() {
        return voicePlayIndex_;
      }
      /**
       * <code>optional uint32 voicePlayIndex = 32;</code>
       *
       * <pre>
       * 语音播放 index, (下)
       * </pre>
       */
      public Builder setVoicePlayIndex(int value) {
        bitField0_ |= 0x80000000;
        voicePlayIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 voicePlayIndex = 32;</code>
       *
       * <pre>
       * 语音播放 index, (下)
       * </pre>
       */
      public Builder clearVoicePlayIndex() {
        bitField0_ = (bitField0_ & ~0x80000000);
        voicePlayIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Cayman)
    }

    static {
      defaultInstance = new Cayman(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Cayman)
  }

  public interface AcrelDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 channelType = 1;
    /**
     * <code>optional uint32 channelType = 1;</code>
     */
    boolean hasChannelType();
    /**
     * <code>optional uint32 channelType = 1;</code>
     */
    int getChannelType();

    // optional uint32 shortCircuit = 2;
    /**
     * <code>optional uint32 shortCircuit = 2;</code>
     */
    boolean hasShortCircuit();
    /**
     * <code>optional uint32 shortCircuit = 2;</code>
     */
    int getShortCircuit();

    // optional uint32 openCircuit = 3;
    /**
     * <code>optional uint32 openCircuit = 3;</code>
     */
    boolean hasOpenCircuit();
    /**
     * <code>optional uint32 openCircuit = 3;</code>
     */
    int getOpenCircuit();

    // optional uint32 chStatus = 4;
    /**
     * <code>optional uint32 chStatus = 4;</code>
     */
    boolean hasChStatus();
    /**
     * <code>optional uint32 chStatus = 4;</code>
     */
    int getChStatus();

    // optional sint32 leakageVal = 5;
    /**
     * <code>optional sint32 leakageVal = 5;</code>
     */
    boolean hasLeakageVal();
    /**
     * <code>optional sint32 leakageVal = 5;</code>
     */
    int getLeakageVal();

    // optional sint32 t1Val = 6;
    /**
     * <code>optional sint32 t1Val = 6;</code>
     */
    boolean hasT1Val();
    /**
     * <code>optional sint32 t1Val = 6;</code>
     */
    int getT1Val();

    // optional sint32 t2Val = 7;
    /**
     * <code>optional sint32 t2Val = 7;</code>
     */
    boolean hasT2Val();
    /**
     * <code>optional sint32 t2Val = 7;</code>
     */
    int getT2Val();

    // optional sint32 t3Val = 8;
    /**
     * <code>optional sint32 t3Val = 8;</code>
     */
    boolean hasT3Val();
    /**
     * <code>optional sint32 t3Val = 8;</code>
     */
    int getT3Val();

    // optional sint32 t4Val = 9;
    /**
     * <code>optional sint32 t4Val = 9;</code>
     */
    boolean hasT4Val();
    /**
     * <code>optional sint32 t4Val = 9;</code>
     */
    int getT4Val();

    // optional uint32 connectSw = 10;
    /**
     * <code>optional uint32 connectSw = 10;</code>
     */
    boolean hasConnectSw();
    /**
     * <code>optional uint32 connectSw = 10;</code>
     */
    int getConnectSw();

    // optional uint32 chEnable = 11;
    /**
     * <code>optional uint32 chEnable = 11;</code>
     */
    boolean hasChEnable();
    /**
     * <code>optional uint32 chEnable = 11;</code>
     */
    int getChEnable();

    // optional uint32 leakageTh = 12;
    /**
     * <code>optional uint32 leakageTh = 12;</code>
     */
    boolean hasLeakageTh();
    /**
     * <code>optional uint32 leakageTh = 12;</code>
     */
    int getLeakageTh();

    // optional uint32 t1Th = 13;
    /**
     * <code>optional uint32 t1Th = 13;</code>
     */
    boolean hasT1Th();
    /**
     * <code>optional uint32 t1Th = 13;</code>
     */
    int getT1Th();

    // optional uint32 t2Th = 14;
    /**
     * <code>optional uint32 t2Th = 14;</code>
     */
    boolean hasT2Th();
    /**
     * <code>optional uint32 t2Th = 14;</code>
     */
    int getT2Th();

    // optional uint32 t3Th = 15;
    /**
     * <code>optional uint32 t3Th = 15;</code>
     */
    boolean hasT3Th();
    /**
     * <code>optional uint32 t3Th = 15;</code>
     */
    int getT3Th();

    // optional uint32 t4Th = 16;
    /**
     * <code>optional uint32 t4Th = 16;</code>
     */
    boolean hasT4Th();
    /**
     * <code>optional uint32 t4Th = 16;</code>
     */
    int getT4Th();

    // optional uint32 passwd = 17;
    /**
     * <code>optional uint32 passwd = 17;</code>
     */
    boolean hasPasswd();
    /**
     * <code>optional uint32 passwd = 17;</code>
     */
    int getPasswd();

    // optional uint32 aVal = 18;
    /**
     * <code>optional uint32 aVal = 18;</code>
     */
    boolean hasAVal();
    /**
     * <code>optional uint32 aVal = 18;</code>
     */
    int getAVal();

    // optional uint32 bVal = 19;
    /**
     * <code>optional uint32 bVal = 19;</code>
     */
    boolean hasBVal();
    /**
     * <code>optional uint32 bVal = 19;</code>
     */
    int getBVal();

    // optional uint32 cVal = 20;
    /**
     * <code>optional uint32 cVal = 20;</code>
     */
    boolean hasCVal();
    /**
     * <code>optional uint32 cVal = 20;</code>
     */
    int getCVal();

    // optional uint32 valStatus = 21;
    /**
     * <code>optional uint32 valStatus = 21;</code>
     */
    boolean hasValStatus();
    /**
     * <code>optional uint32 valStatus = 21;</code>
     */
    int getValStatus();

    // optional uint32 aCurr = 22;
    /**
     * <code>optional uint32 aCurr = 22;</code>
     */
    boolean hasACurr();
    /**
     * <code>optional uint32 aCurr = 22;</code>
     */
    int getACurr();

    // optional uint32 bCurr = 23;
    /**
     * <code>optional uint32 bCurr = 23;</code>
     */
    boolean hasBCurr();
    /**
     * <code>optional uint32 bCurr = 23;</code>
     */
    int getBCurr();

    // optional uint32 cCurr = 24;
    /**
     * <code>optional uint32 cCurr = 24;</code>
     */
    boolean hasCCurr();
    /**
     * <code>optional uint32 cCurr = 24;</code>
     */
    int getCCurr();

    // optional uint32 currStatus = 25;
    /**
     * <code>optional uint32 currStatus = 25;</code>
     */
    boolean hasCurrStatus();
    /**
     * <code>optional uint32 currStatus = 25;</code>
     */
    int getCurrStatus();

    // optional uint32 totalYg = 26;
    /**
     * <code>optional uint32 totalYg = 26;</code>
     */
    boolean hasTotalYg();
    /**
     * <code>optional uint32 totalYg = 26;</code>
     */
    int getTotalYg();

    // optional uint32 totalWg = 27;
    /**
     * <code>optional uint32 totalWg = 27;</code>
     */
    boolean hasTotalWg();
    /**
     * <code>optional uint32 totalWg = 27;</code>
     */
    int getTotalWg();

    // optional uint32 totalSz = 28;
    /**
     * <code>optional uint32 totalSz = 28;</code>
     */
    boolean hasTotalSz();
    /**
     * <code>optional uint32 totalSz = 28;</code>
     */
    int getTotalSz();

    // optional uint32 totalFactor = 29;
    /**
     * <code>optional uint32 totalFactor = 29;</code>
     */
    boolean hasTotalFactor();
    /**
     * <code>optional uint32 totalFactor = 29;</code>
     */
    int getTotalFactor();

    // optional uint32 valHighSet = 30;
    /**
     * <code>optional uint32 valHighSet = 30;</code>
     */
    boolean hasValHighSet();
    /**
     * <code>optional uint32 valHighSet = 30;</code>
     */
    int getValHighSet();

    // optional uint32 valLowSet = 31;
    /**
     * <code>optional uint32 valLowSet = 31;</code>
     */
    boolean hasValLowSet();
    /**
     * <code>optional uint32 valLowSet = 31;</code>
     */
    int getValLowSet();

    // optional uint32 currHighSet = 32;
    /**
     * <code>optional uint32 currHighSet = 32;</code>
     */
    boolean hasCurrHighSet();
    /**
     * <code>optional uint32 currHighSet = 32;</code>
     */
    int getCurrHighSet();

    // optional uint32 energyKwh = 33;
    /**
     * <code>optional uint32 energyKwh = 33;</code>
     */
    boolean hasEnergyKwh();
    /**
     * <code>optional uint32 energyKwh = 33;</code>
     */
    int getEnergyKwh();

    // optional uint32 cmd = 35;
    /**
     * <code>optional uint32 cmd = 35;</code>
     */
    boolean hasCmd();
    /**
     * <code>optional uint32 cmd = 35;</code>
     */
    int getCmd();

    // optional uint32 devError = 36;
    /**
     * <code>optional uint32 devError = 36;</code>
     */
    boolean hasDevError();
    /**
     * <code>optional uint32 devError = 36;</code>
     */
    int getDevError();

    // optional uint32 ct = 37;
    /**
     * <code>optional uint32 ct = 37;</code>
     */
    boolean hasCt();
    /**
     * <code>optional uint32 ct = 37;</code>
     */
    int getCt();

    // optional uint32 outputSw = 38;
    /**
     * <code>optional uint32 outputSw = 38;</code>
     */
    boolean hasOutputSw();
    /**
     * <code>optional uint32 outputSw = 38;</code>
     */
    int getOutputSw();

    // optional uint32 selfCheck = 39;
    /**
     * <code>optional uint32 selfCheck = 39;</code>
     */
    boolean hasSelfCheck();
    /**
     * <code>optional uint32 selfCheck = 39;</code>
     */
    int getSelfCheck();

    // optional uint32 valHighType = 40;
    /**
     * <code>optional uint32 valHighType = 40;</code>
     */
    boolean hasValHighType();
    /**
     * <code>optional uint32 valHighType = 40;</code>
     */
    int getValHighType();

    // optional uint32 valLowType = 41;
    /**
     * <code>optional uint32 valLowType = 41;</code>
     */
    boolean hasValLowType();
    /**
     * <code>optional uint32 valLowType = 41;</code>
     */
    int getValLowType();

    // optional uint32 currHighType = 42;
    /**
     * <code>optional uint32 currHighType = 42;</code>
     */
    boolean hasCurrHighType();
    /**
     * <code>optional uint32 currHighType = 42;</code>
     */
    int getCurrHighType();

    // optional uint32 ict = 43;
    /**
     * <code>optional uint32 ict = 43;</code>
     */
    boolean hasIct();
    /**
     * <code>optional uint32 ict = 43;</code>
     */
    int getIct();

    // optional uint32 un = 44;
    /**
     * <code>optional uint32 un = 44;</code>
     */
    boolean hasUn();
    /**
     * <code>optional uint32 un = 44;</code>
     */
    int getUn();

    // optional uint32 in = 45;
    /**
     * <code>optional uint32 in = 45;</code>
     */
    boolean hasIn();
    /**
     * <code>optional uint32 in = 45;</code>
     */
    int getIn();

    // optional uint32 pt = 46;
    /**
     * <code>optional uint32 pt = 46;</code>
     */
    boolean hasPt();
    /**
     * <code>optional uint32 pt = 46;</code>
     */
    int getPt();

    // optional uint32 lineMode = 47;
    /**
     * <code>optional uint32 lineMode = 47;</code>
     */
    boolean hasLineMode();
    /**
     * <code>optional uint32 lineMode = 47;</code>
     */
    int getLineMode();

    // optional uint32 lineOrder = 48;
    /**
     * <code>optional uint32 lineOrder = 48;</code>
     */
    boolean hasLineOrder();
    /**
     * <code>optional uint32 lineOrder = 48;</code>
     */
    int getLineOrder();

    // optional uint32 volFreq = 49;
    /**
     * <code>optional uint32 volFreq = 49;</code>
     */
    boolean hasVolFreq();
    /**
     * <code>optional uint32 volFreq = 49;</code>
     */
    int getVolFreq();

    // optional uint32 leakageDelay = 50;
    /**
     * <code>optional uint32 leakageDelay = 50;</code>
     */
    boolean hasLeakageDelay();
    /**
     * <code>optional uint32 leakageDelay = 50;</code>
     */
    int getLeakageDelay();

    // optional uint32 T1Delay = 51;
    /**
     * <code>optional uint32 T1Delay = 51;</code>
     */
    boolean hasT1Delay();
    /**
     * <code>optional uint32 T1Delay = 51;</code>
     */
    int getT1Delay();

    // optional uint32 T2Delay = 52;
    /**
     * <code>optional uint32 T2Delay = 52;</code>
     */
    boolean hasT2Delay();
    /**
     * <code>optional uint32 T2Delay = 52;</code>
     */
    int getT2Delay();

    // optional uint32 T3Delay = 53;
    /**
     * <code>optional uint32 T3Delay = 53;</code>
     */
    boolean hasT3Delay();
    /**
     * <code>optional uint32 T3Delay = 53;</code>
     */
    int getT3Delay();

    // optional uint32 T4Delay = 54;
    /**
     * <code>optional uint32 T4Delay = 54;</code>
     */
    boolean hasT4Delay();
    /**
     * <code>optional uint32 T4Delay = 54;</code>
     */
    int getT4Delay();

    // optional uint32 volHDelay = 55;
    /**
     * <code>optional uint32 volHDelay = 55;</code>
     */
    boolean hasVolHDelay();
    /**
     * <code>optional uint32 volHDelay = 55;</code>
     */
    int getVolHDelay();

    // optional uint32 volLDelay = 56;
    /**
     * <code>optional uint32 volLDelay = 56;</code>
     */
    boolean hasVolLDelay();
    /**
     * <code>optional uint32 volLDelay = 56;</code>
     */
    int getVolLDelay();

    // optional uint32 currDelay = 57;
    /**
     * <code>optional uint32 currDelay = 57;</code>
     */
    boolean hasCurrDelay();
    /**
     * <code>optional uint32 currDelay = 57;</code>
     */
    int getCurrDelay();

    // optional uint32 buzzer = 58;
    /**
     * <code>optional uint32 buzzer = 58;</code>
     */
    boolean hasBuzzer();
    /**
     * <code>optional uint32 buzzer = 58;</code>
     */
    int getBuzzer();
  }
  /**
   * Protobuf type {@code AcrelData}
   */
  public static final class AcrelData extends
      com.google.protobuf.GeneratedMessage
      implements AcrelDataOrBuilder {
    // Use AcrelData.newBuilder() to construct.
    private AcrelData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AcrelData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AcrelData defaultInstance;
    public static AcrelData getDefaultInstance() {
      return defaultInstance;
    }

    public AcrelData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AcrelData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              channelType_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              shortCircuit_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              openCircuit_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              chStatus_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              leakageVal_ = input.readSInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              t1Val_ = input.readSInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              t2Val_ = input.readSInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              t3Val_ = input.readSInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              t4Val_ = input.readSInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              connectSw_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              chEnable_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              leakageTh_ = input.readUInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              t1Th_ = input.readUInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              t2Th_ = input.readUInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              t3Th_ = input.readUInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              t4Th_ = input.readUInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              passwd_ = input.readUInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              aVal_ = input.readUInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00040000;
              bVal_ = input.readUInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00080000;
              cVal_ = input.readUInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00100000;
              valStatus_ = input.readUInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00200000;
              aCurr_ = input.readUInt32();
              break;
            }
            case 184: {
              bitField0_ |= 0x00400000;
              bCurr_ = input.readUInt32();
              break;
            }
            case 192: {
              bitField0_ |= 0x00800000;
              cCurr_ = input.readUInt32();
              break;
            }
            case 200: {
              bitField0_ |= 0x01000000;
              currStatus_ = input.readUInt32();
              break;
            }
            case 208: {
              bitField0_ |= 0x02000000;
              totalYg_ = input.readUInt32();
              break;
            }
            case 216: {
              bitField0_ |= 0x04000000;
              totalWg_ = input.readUInt32();
              break;
            }
            case 224: {
              bitField0_ |= 0x08000000;
              totalSz_ = input.readUInt32();
              break;
            }
            case 232: {
              bitField0_ |= 0x10000000;
              totalFactor_ = input.readUInt32();
              break;
            }
            case 240: {
              bitField0_ |= 0x20000000;
              valHighSet_ = input.readUInt32();
              break;
            }
            case 248: {
              bitField0_ |= 0x40000000;
              valLowSet_ = input.readUInt32();
              break;
            }
            case 256: {
              bitField0_ |= 0x80000000;
              currHighSet_ = input.readUInt32();
              break;
            }
            case 264: {
              bitField1_ |= 0x00000001;
              energyKwh_ = input.readUInt32();
              break;
            }
            case 280: {
              bitField1_ |= 0x00000002;
              cmd_ = input.readUInt32();
              break;
            }
            case 288: {
              bitField1_ |= 0x00000004;
              devError_ = input.readUInt32();
              break;
            }
            case 296: {
              bitField1_ |= 0x00000008;
              ct_ = input.readUInt32();
              break;
            }
            case 304: {
              bitField1_ |= 0x00000010;
              outputSw_ = input.readUInt32();
              break;
            }
            case 312: {
              bitField1_ |= 0x00000020;
              selfCheck_ = input.readUInt32();
              break;
            }
            case 320: {
              bitField1_ |= 0x00000040;
              valHighType_ = input.readUInt32();
              break;
            }
            case 328: {
              bitField1_ |= 0x00000080;
              valLowType_ = input.readUInt32();
              break;
            }
            case 336: {
              bitField1_ |= 0x00000100;
              currHighType_ = input.readUInt32();
              break;
            }
            case 344: {
              bitField1_ |= 0x00000200;
              ict_ = input.readUInt32();
              break;
            }
            case 352: {
              bitField1_ |= 0x00000400;
              un_ = input.readUInt32();
              break;
            }
            case 360: {
              bitField1_ |= 0x00000800;
              in_ = input.readUInt32();
              break;
            }
            case 368: {
              bitField1_ |= 0x00001000;
              pt_ = input.readUInt32();
              break;
            }
            case 376: {
              bitField1_ |= 0x00002000;
              lineMode_ = input.readUInt32();
              break;
            }
            case 384: {
              bitField1_ |= 0x00004000;
              lineOrder_ = input.readUInt32();
              break;
            }
            case 392: {
              bitField1_ |= 0x00008000;
              volFreq_ = input.readUInt32();
              break;
            }
            case 400: {
              bitField1_ |= 0x00010000;
              leakageDelay_ = input.readUInt32();
              break;
            }
            case 408: {
              bitField1_ |= 0x00020000;
              t1Delay_ = input.readUInt32();
              break;
            }
            case 416: {
              bitField1_ |= 0x00040000;
              t2Delay_ = input.readUInt32();
              break;
            }
            case 424: {
              bitField1_ |= 0x00080000;
              t3Delay_ = input.readUInt32();
              break;
            }
            case 432: {
              bitField1_ |= 0x00100000;
              t4Delay_ = input.readUInt32();
              break;
            }
            case 440: {
              bitField1_ |= 0x00200000;
              volHDelay_ = input.readUInt32();
              break;
            }
            case 448: {
              bitField1_ |= 0x00400000;
              volLDelay_ = input.readUInt32();
              break;
            }
            case 456: {
              bitField1_ |= 0x00800000;
              currDelay_ = input.readUInt32();
              break;
            }
            case 464: {
              bitField1_ |= 0x01000000;
              buzzer_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_AcrelData_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_AcrelData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AcrelData.class, Builder.class);
    }

    public static com.google.protobuf.Parser<AcrelData> PARSER =
        new com.google.protobuf.AbstractParser<AcrelData>() {
      public AcrelData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AcrelData(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<AcrelData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int bitField1_;
    // optional uint32 channelType = 1;
    public static final int CHANNELTYPE_FIELD_NUMBER = 1;
    private int channelType_;
    /**
     * <code>optional uint32 channelType = 1;</code>
     */
    public boolean hasChannelType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 channelType = 1;</code>
     */
    public int getChannelType() {
      return channelType_;
    }

    // optional uint32 shortCircuit = 2;
    public static final int SHORTCIRCUIT_FIELD_NUMBER = 2;
    private int shortCircuit_;
    /**
     * <code>optional uint32 shortCircuit = 2;</code>
     */
    public boolean hasShortCircuit() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 shortCircuit = 2;</code>
     */
    public int getShortCircuit() {
      return shortCircuit_;
    }

    // optional uint32 openCircuit = 3;
    public static final int OPENCIRCUIT_FIELD_NUMBER = 3;
    private int openCircuit_;
    /**
     * <code>optional uint32 openCircuit = 3;</code>
     */
    public boolean hasOpenCircuit() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 openCircuit = 3;</code>
     */
    public int getOpenCircuit() {
      return openCircuit_;
    }

    // optional uint32 chStatus = 4;
    public static final int CHSTATUS_FIELD_NUMBER = 4;
    private int chStatus_;
    /**
     * <code>optional uint32 chStatus = 4;</code>
     */
    public boolean hasChStatus() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 chStatus = 4;</code>
     */
    public int getChStatus() {
      return chStatus_;
    }

    // optional sint32 leakageVal = 5;
    public static final int LEAKAGEVAL_FIELD_NUMBER = 5;
    private int leakageVal_;
    /**
     * <code>optional sint32 leakageVal = 5;</code>
     */
    public boolean hasLeakageVal() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 leakageVal = 5;</code>
     */
    public int getLeakageVal() {
      return leakageVal_;
    }

    // optional sint32 t1Val = 6;
    public static final int T1VAL_FIELD_NUMBER = 6;
    private int t1Val_;
    /**
     * <code>optional sint32 t1Val = 6;</code>
     */
    public boolean hasT1Val() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint32 t1Val = 6;</code>
     */
    public int getT1Val() {
      return t1Val_;
    }

    // optional sint32 t2Val = 7;
    public static final int T2VAL_FIELD_NUMBER = 7;
    private int t2Val_;
    /**
     * <code>optional sint32 t2Val = 7;</code>
     */
    public boolean hasT2Val() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional sint32 t2Val = 7;</code>
     */
    public int getT2Val() {
      return t2Val_;
    }

    // optional sint32 t3Val = 8;
    public static final int T3VAL_FIELD_NUMBER = 8;
    private int t3Val_;
    /**
     * <code>optional sint32 t3Val = 8;</code>
     */
    public boolean hasT3Val() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional sint32 t3Val = 8;</code>
     */
    public int getT3Val() {
      return t3Val_;
    }

    // optional sint32 t4Val = 9;
    public static final int T4VAL_FIELD_NUMBER = 9;
    private int t4Val_;
    /**
     * <code>optional sint32 t4Val = 9;</code>
     */
    public boolean hasT4Val() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional sint32 t4Val = 9;</code>
     */
    public int getT4Val() {
      return t4Val_;
    }

    // optional uint32 connectSw = 10;
    public static final int CONNECTSW_FIELD_NUMBER = 10;
    private int connectSw_;
    /**
     * <code>optional uint32 connectSw = 10;</code>
     */
    public boolean hasConnectSw() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 connectSw = 10;</code>
     */
    public int getConnectSw() {
      return connectSw_;
    }

    // optional uint32 chEnable = 11;
    public static final int CHENABLE_FIELD_NUMBER = 11;
    private int chEnable_;
    /**
     * <code>optional uint32 chEnable = 11;</code>
     */
    public boolean hasChEnable() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 chEnable = 11;</code>
     */
    public int getChEnable() {
      return chEnable_;
    }

    // optional uint32 leakageTh = 12;
    public static final int LEAKAGETH_FIELD_NUMBER = 12;
    private int leakageTh_;
    /**
     * <code>optional uint32 leakageTh = 12;</code>
     */
    public boolean hasLeakageTh() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 leakageTh = 12;</code>
     */
    public int getLeakageTh() {
      return leakageTh_;
    }

    // optional uint32 t1Th = 13;
    public static final int T1TH_FIELD_NUMBER = 13;
    private int t1Th_;
    /**
     * <code>optional uint32 t1Th = 13;</code>
     */
    public boolean hasT1Th() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint32 t1Th = 13;</code>
     */
    public int getT1Th() {
      return t1Th_;
    }

    // optional uint32 t2Th = 14;
    public static final int T2TH_FIELD_NUMBER = 14;
    private int t2Th_;
    /**
     * <code>optional uint32 t2Th = 14;</code>
     */
    public boolean hasT2Th() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional uint32 t2Th = 14;</code>
     */
    public int getT2Th() {
      return t2Th_;
    }

    // optional uint32 t3Th = 15;
    public static final int T3TH_FIELD_NUMBER = 15;
    private int t3Th_;
    /**
     * <code>optional uint32 t3Th = 15;</code>
     */
    public boolean hasT3Th() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional uint32 t3Th = 15;</code>
     */
    public int getT3Th() {
      return t3Th_;
    }

    // optional uint32 t4Th = 16;
    public static final int T4TH_FIELD_NUMBER = 16;
    private int t4Th_;
    /**
     * <code>optional uint32 t4Th = 16;</code>
     */
    public boolean hasT4Th() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional uint32 t4Th = 16;</code>
     */
    public int getT4Th() {
      return t4Th_;
    }

    // optional uint32 passwd = 17;
    public static final int PASSWD_FIELD_NUMBER = 17;
    private int passwd_;
    /**
     * <code>optional uint32 passwd = 17;</code>
     */
    public boolean hasPasswd() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional uint32 passwd = 17;</code>
     */
    public int getPasswd() {
      return passwd_;
    }

    // optional uint32 aVal = 18;
    public static final int AVAL_FIELD_NUMBER = 18;
    private int aVal_;
    /**
     * <code>optional uint32 aVal = 18;</code>
     */
    public boolean hasAVal() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional uint32 aVal = 18;</code>
     */
    public int getAVal() {
      return aVal_;
    }

    // optional uint32 bVal = 19;
    public static final int BVAL_FIELD_NUMBER = 19;
    private int bVal_;
    /**
     * <code>optional uint32 bVal = 19;</code>
     */
    public boolean hasBVal() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional uint32 bVal = 19;</code>
     */
    public int getBVal() {
      return bVal_;
    }

    // optional uint32 cVal = 20;
    public static final int CVAL_FIELD_NUMBER = 20;
    private int cVal_;
    /**
     * <code>optional uint32 cVal = 20;</code>
     */
    public boolean hasCVal() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional uint32 cVal = 20;</code>
     */
    public int getCVal() {
      return cVal_;
    }

    // optional uint32 valStatus = 21;
    public static final int VALSTATUS_FIELD_NUMBER = 21;
    private int valStatus_;
    /**
     * <code>optional uint32 valStatus = 21;</code>
     */
    public boolean hasValStatus() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional uint32 valStatus = 21;</code>
     */
    public int getValStatus() {
      return valStatus_;
    }

    // optional uint32 aCurr = 22;
    public static final int ACURR_FIELD_NUMBER = 22;
    private int aCurr_;
    /**
     * <code>optional uint32 aCurr = 22;</code>
     */
    public boolean hasACurr() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional uint32 aCurr = 22;</code>
     */
    public int getACurr() {
      return aCurr_;
    }

    // optional uint32 bCurr = 23;
    public static final int BCURR_FIELD_NUMBER = 23;
    private int bCurr_;
    /**
     * <code>optional uint32 bCurr = 23;</code>
     */
    public boolean hasBCurr() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional uint32 bCurr = 23;</code>
     */
    public int getBCurr() {
      return bCurr_;
    }

    // optional uint32 cCurr = 24;
    public static final int CCURR_FIELD_NUMBER = 24;
    private int cCurr_;
    /**
     * <code>optional uint32 cCurr = 24;</code>
     */
    public boolean hasCCurr() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional uint32 cCurr = 24;</code>
     */
    public int getCCurr() {
      return cCurr_;
    }

    // optional uint32 currStatus = 25;
    public static final int CURRSTATUS_FIELD_NUMBER = 25;
    private int currStatus_;
    /**
     * <code>optional uint32 currStatus = 25;</code>
     */
    public boolean hasCurrStatus() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional uint32 currStatus = 25;</code>
     */
    public int getCurrStatus() {
      return currStatus_;
    }

    // optional uint32 totalYg = 26;
    public static final int TOTALYG_FIELD_NUMBER = 26;
    private int totalYg_;
    /**
     * <code>optional uint32 totalYg = 26;</code>
     */
    public boolean hasTotalYg() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional uint32 totalYg = 26;</code>
     */
    public int getTotalYg() {
      return totalYg_;
    }

    // optional uint32 totalWg = 27;
    public static final int TOTALWG_FIELD_NUMBER = 27;
    private int totalWg_;
    /**
     * <code>optional uint32 totalWg = 27;</code>
     */
    public boolean hasTotalWg() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional uint32 totalWg = 27;</code>
     */
    public int getTotalWg() {
      return totalWg_;
    }

    // optional uint32 totalSz = 28;
    public static final int TOTALSZ_FIELD_NUMBER = 28;
    private int totalSz_;
    /**
     * <code>optional uint32 totalSz = 28;</code>
     */
    public boolean hasTotalSz() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional uint32 totalSz = 28;</code>
     */
    public int getTotalSz() {
      return totalSz_;
    }

    // optional uint32 totalFactor = 29;
    public static final int TOTALFACTOR_FIELD_NUMBER = 29;
    private int totalFactor_;
    /**
     * <code>optional uint32 totalFactor = 29;</code>
     */
    public boolean hasTotalFactor() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional uint32 totalFactor = 29;</code>
     */
    public int getTotalFactor() {
      return totalFactor_;
    }

    // optional uint32 valHighSet = 30;
    public static final int VALHIGHSET_FIELD_NUMBER = 30;
    private int valHighSet_;
    /**
     * <code>optional uint32 valHighSet = 30;</code>
     */
    public boolean hasValHighSet() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional uint32 valHighSet = 30;</code>
     */
    public int getValHighSet() {
      return valHighSet_;
    }

    // optional uint32 valLowSet = 31;
    public static final int VALLOWSET_FIELD_NUMBER = 31;
    private int valLowSet_;
    /**
     * <code>optional uint32 valLowSet = 31;</code>
     */
    public boolean hasValLowSet() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional uint32 valLowSet = 31;</code>
     */
    public int getValLowSet() {
      return valLowSet_;
    }

    // optional uint32 currHighSet = 32;
    public static final int CURRHIGHSET_FIELD_NUMBER = 32;
    private int currHighSet_;
    /**
     * <code>optional uint32 currHighSet = 32;</code>
     */
    public boolean hasCurrHighSet() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional uint32 currHighSet = 32;</code>
     */
    public int getCurrHighSet() {
      return currHighSet_;
    }

    // optional uint32 energyKwh = 33;
    public static final int ENERGYKWH_FIELD_NUMBER = 33;
    private int energyKwh_;
    /**
     * <code>optional uint32 energyKwh = 33;</code>
     */
    public boolean hasEnergyKwh() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 energyKwh = 33;</code>
     */
    public int getEnergyKwh() {
      return energyKwh_;
    }

    // optional uint32 cmd = 35;
    public static final int CMD_FIELD_NUMBER = 35;
    private int cmd_;
    /**
     * <code>optional uint32 cmd = 35;</code>
     */
    public boolean hasCmd() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 cmd = 35;</code>
     */
    public int getCmd() {
      return cmd_;
    }

    // optional uint32 devError = 36;
    public static final int DEVERROR_FIELD_NUMBER = 36;
    private int devError_;
    /**
     * <code>optional uint32 devError = 36;</code>
     */
    public boolean hasDevError() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 devError = 36;</code>
     */
    public int getDevError() {
      return devError_;
    }

    // optional uint32 ct = 37;
    public static final int CT_FIELD_NUMBER = 37;
    private int ct_;
    /**
     * <code>optional uint32 ct = 37;</code>
     */
    public boolean hasCt() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 ct = 37;</code>
     */
    public int getCt() {
      return ct_;
    }

    // optional uint32 outputSw = 38;
    public static final int OUTPUTSW_FIELD_NUMBER = 38;
    private int outputSw_;
    /**
     * <code>optional uint32 outputSw = 38;</code>
     */
    public boolean hasOutputSw() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 outputSw = 38;</code>
     */
    public int getOutputSw() {
      return outputSw_;
    }

    // optional uint32 selfCheck = 39;
    public static final int SELFCHECK_FIELD_NUMBER = 39;
    private int selfCheck_;
    /**
     * <code>optional uint32 selfCheck = 39;</code>
     */
    public boolean hasSelfCheck() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 selfCheck = 39;</code>
     */
    public int getSelfCheck() {
      return selfCheck_;
    }

    // optional uint32 valHighType = 40;
    public static final int VALHIGHTYPE_FIELD_NUMBER = 40;
    private int valHighType_;
    /**
     * <code>optional uint32 valHighType = 40;</code>
     */
    public boolean hasValHighType() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 valHighType = 40;</code>
     */
    public int getValHighType() {
      return valHighType_;
    }

    // optional uint32 valLowType = 41;
    public static final int VALLOWTYPE_FIELD_NUMBER = 41;
    private int valLowType_;
    /**
     * <code>optional uint32 valLowType = 41;</code>
     */
    public boolean hasValLowType() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 valLowType = 41;</code>
     */
    public int getValLowType() {
      return valLowType_;
    }

    // optional uint32 currHighType = 42;
    public static final int CURRHIGHTYPE_FIELD_NUMBER = 42;
    private int currHighType_;
    /**
     * <code>optional uint32 currHighType = 42;</code>
     */
    public boolean hasCurrHighType() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 currHighType = 42;</code>
     */
    public int getCurrHighType() {
      return currHighType_;
    }

    // optional uint32 ict = 43;
    public static final int ICT_FIELD_NUMBER = 43;
    private int ict_;
    /**
     * <code>optional uint32 ict = 43;</code>
     */
    public boolean hasIct() {
      return ((bitField1_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 ict = 43;</code>
     */
    public int getIct() {
      return ict_;
    }

    // optional uint32 un = 44;
    public static final int UN_FIELD_NUMBER = 44;
    private int un_;
    /**
     * <code>optional uint32 un = 44;</code>
     */
    public boolean hasUn() {
      return ((bitField1_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 un = 44;</code>
     */
    public int getUn() {
      return un_;
    }

    // optional uint32 in = 45;
    public static final int IN_FIELD_NUMBER = 45;
    private int in_;
    /**
     * <code>optional uint32 in = 45;</code>
     */
    public boolean hasIn() {
      return ((bitField1_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 in = 45;</code>
     */
    public int getIn() {
      return in_;
    }

    // optional uint32 pt = 46;
    public static final int PT_FIELD_NUMBER = 46;
    private int pt_;
    /**
     * <code>optional uint32 pt = 46;</code>
     */
    public boolean hasPt() {
      return ((bitField1_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint32 pt = 46;</code>
     */
    public int getPt() {
      return pt_;
    }

    // optional uint32 lineMode = 47;
    public static final int LINEMODE_FIELD_NUMBER = 47;
    private int lineMode_;
    /**
     * <code>optional uint32 lineMode = 47;</code>
     */
    public boolean hasLineMode() {
      return ((bitField1_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional uint32 lineMode = 47;</code>
     */
    public int getLineMode() {
      return lineMode_;
    }

    // optional uint32 lineOrder = 48;
    public static final int LINEORDER_FIELD_NUMBER = 48;
    private int lineOrder_;
    /**
     * <code>optional uint32 lineOrder = 48;</code>
     */
    public boolean hasLineOrder() {
      return ((bitField1_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional uint32 lineOrder = 48;</code>
     */
    public int getLineOrder() {
      return lineOrder_;
    }

    // optional uint32 volFreq = 49;
    public static final int VOLFREQ_FIELD_NUMBER = 49;
    private int volFreq_;
    /**
     * <code>optional uint32 volFreq = 49;</code>
     */
    public boolean hasVolFreq() {
      return ((bitField1_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional uint32 volFreq = 49;</code>
     */
    public int getVolFreq() {
      return volFreq_;
    }

    // optional uint32 leakageDelay = 50;
    public static final int LEAKAGEDELAY_FIELD_NUMBER = 50;
    private int leakageDelay_;
    /**
     * <code>optional uint32 leakageDelay = 50;</code>
     */
    public boolean hasLeakageDelay() {
      return ((bitField1_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional uint32 leakageDelay = 50;</code>
     */
    public int getLeakageDelay() {
      return leakageDelay_;
    }

    // optional uint32 T1Delay = 51;
    public static final int T1DELAY_FIELD_NUMBER = 51;
    private int t1Delay_;
    /**
     * <code>optional uint32 T1Delay = 51;</code>
     */
    public boolean hasT1Delay() {
      return ((bitField1_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional uint32 T1Delay = 51;</code>
     */
    public int getT1Delay() {
      return t1Delay_;
    }

    // optional uint32 T2Delay = 52;
    public static final int T2DELAY_FIELD_NUMBER = 52;
    private int t2Delay_;
    /**
     * <code>optional uint32 T2Delay = 52;</code>
     */
    public boolean hasT2Delay() {
      return ((bitField1_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional uint32 T2Delay = 52;</code>
     */
    public int getT2Delay() {
      return t2Delay_;
    }

    // optional uint32 T3Delay = 53;
    public static final int T3DELAY_FIELD_NUMBER = 53;
    private int t3Delay_;
    /**
     * <code>optional uint32 T3Delay = 53;</code>
     */
    public boolean hasT3Delay() {
      return ((bitField1_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional uint32 T3Delay = 53;</code>
     */
    public int getT3Delay() {
      return t3Delay_;
    }

    // optional uint32 T4Delay = 54;
    public static final int T4DELAY_FIELD_NUMBER = 54;
    private int t4Delay_;
    /**
     * <code>optional uint32 T4Delay = 54;</code>
     */
    public boolean hasT4Delay() {
      return ((bitField1_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional uint32 T4Delay = 54;</code>
     */
    public int getT4Delay() {
      return t4Delay_;
    }

    // optional uint32 volHDelay = 55;
    public static final int VOLHDELAY_FIELD_NUMBER = 55;
    private int volHDelay_;
    /**
     * <code>optional uint32 volHDelay = 55;</code>
     */
    public boolean hasVolHDelay() {
      return ((bitField1_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional uint32 volHDelay = 55;</code>
     */
    public int getVolHDelay() {
      return volHDelay_;
    }

    // optional uint32 volLDelay = 56;
    public static final int VOLLDELAY_FIELD_NUMBER = 56;
    private int volLDelay_;
    /**
     * <code>optional uint32 volLDelay = 56;</code>
     */
    public boolean hasVolLDelay() {
      return ((bitField1_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional uint32 volLDelay = 56;</code>
     */
    public int getVolLDelay() {
      return volLDelay_;
    }

    // optional uint32 currDelay = 57;
    public static final int CURRDELAY_FIELD_NUMBER = 57;
    private int currDelay_;
    /**
     * <code>optional uint32 currDelay = 57;</code>
     */
    public boolean hasCurrDelay() {
      return ((bitField1_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional uint32 currDelay = 57;</code>
     */
    public int getCurrDelay() {
      return currDelay_;
    }

    // optional uint32 buzzer = 58;
    public static final int BUZZER_FIELD_NUMBER = 58;
    private int buzzer_;
    /**
     * <code>optional uint32 buzzer = 58;</code>
     */
    public boolean hasBuzzer() {
      return ((bitField1_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional uint32 buzzer = 58;</code>
     */
    public int getBuzzer() {
      return buzzer_;
    }

    private void initFields() {
      channelType_ = 0;
      shortCircuit_ = 0;
      openCircuit_ = 0;
      chStatus_ = 0;
      leakageVal_ = 0;
      t1Val_ = 0;
      t2Val_ = 0;
      t3Val_ = 0;
      t4Val_ = 0;
      connectSw_ = 0;
      chEnable_ = 0;
      leakageTh_ = 0;
      t1Th_ = 0;
      t2Th_ = 0;
      t3Th_ = 0;
      t4Th_ = 0;
      passwd_ = 0;
      aVal_ = 0;
      bVal_ = 0;
      cVal_ = 0;
      valStatus_ = 0;
      aCurr_ = 0;
      bCurr_ = 0;
      cCurr_ = 0;
      currStatus_ = 0;
      totalYg_ = 0;
      totalWg_ = 0;
      totalSz_ = 0;
      totalFactor_ = 0;
      valHighSet_ = 0;
      valLowSet_ = 0;
      currHighSet_ = 0;
      energyKwh_ = 0;
      cmd_ = 0;
      devError_ = 0;
      ct_ = 0;
      outputSw_ = 0;
      selfCheck_ = 0;
      valHighType_ = 0;
      valLowType_ = 0;
      currHighType_ = 0;
      ict_ = 0;
      un_ = 0;
      in_ = 0;
      pt_ = 0;
      lineMode_ = 0;
      lineOrder_ = 0;
      volFreq_ = 0;
      leakageDelay_ = 0;
      t1Delay_ = 0;
      t2Delay_ = 0;
      t3Delay_ = 0;
      t4Delay_ = 0;
      volHDelay_ = 0;
      volLDelay_ = 0;
      currDelay_ = 0;
      buzzer_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, channelType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, shortCircuit_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, openCircuit_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, chStatus_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(5, leakageVal_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt32(6, t1Val_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeSInt32(7, t2Val_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeSInt32(8, t3Val_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeSInt32(9, t4Val_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, connectSw_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(11, chEnable_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(12, leakageTh_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(13, t1Th_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeUInt32(14, t2Th_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeUInt32(15, t3Th_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeUInt32(16, t4Th_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeUInt32(17, passwd_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeUInt32(18, aVal_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeUInt32(19, bVal_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeUInt32(20, cVal_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeUInt32(21, valStatus_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeUInt32(22, aCurr_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeUInt32(23, bCurr_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeUInt32(24, cCurr_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeUInt32(25, currStatus_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeUInt32(26, totalYg_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeUInt32(27, totalWg_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeUInt32(28, totalSz_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeUInt32(29, totalFactor_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeUInt32(30, valHighSet_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeUInt32(31, valLowSet_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeUInt32(32, currHighSet_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(33, energyKwh_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(35, cmd_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(36, devError_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(37, ct_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(38, outputSw_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(39, selfCheck_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(40, valHighType_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(41, valLowType_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(42, currHighType_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(43, ict_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(44, un_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(45, in_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(46, pt_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        output.writeUInt32(47, lineMode_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        output.writeUInt32(48, lineOrder_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        output.writeUInt32(49, volFreq_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        output.writeUInt32(50, leakageDelay_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        output.writeUInt32(51, t1Delay_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        output.writeUInt32(52, t2Delay_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        output.writeUInt32(53, t3Delay_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        output.writeUInt32(54, t4Delay_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        output.writeUInt32(55, volHDelay_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        output.writeUInt32(56, volLDelay_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        output.writeUInt32(57, currDelay_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        output.writeUInt32(58, buzzer_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, channelType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, shortCircuit_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, openCircuit_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, chStatus_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, leakageVal_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, t1Val_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(7, t2Val_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(8, t3Val_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(9, t4Val_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, connectSw_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, chEnable_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, leakageTh_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, t1Th_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(14, t2Th_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(15, t3Th_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(16, t4Th_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(17, passwd_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(18, aVal_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(19, bVal_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(20, cVal_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(21, valStatus_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(22, aCurr_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(23, bCurr_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(24, cCurr_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(25, currStatus_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(26, totalYg_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(27, totalWg_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(28, totalSz_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(29, totalFactor_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(30, valHighSet_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(31, valLowSet_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(32, currHighSet_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(33, energyKwh_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(35, cmd_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(36, devError_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(37, ct_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(38, outputSw_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(39, selfCheck_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(40, valHighType_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(41, valLowType_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(42, currHighType_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(43, ict_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(44, un_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(45, in_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(46, pt_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(47, lineMode_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(48, lineOrder_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(49, volFreq_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(50, leakageDelay_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(51, t1Delay_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(52, t2Delay_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(53, t3Delay_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(54, t4Delay_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(55, volHDelay_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(56, volLDelay_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(57, currDelay_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(58, buzzer_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AcrelData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AcrelData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AcrelData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AcrelData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AcrelData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AcrelData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AcrelData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AcrelData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AcrelData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AcrelData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AcrelData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AcrelData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements AcrelDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_AcrelData_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_AcrelData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AcrelData.class, Builder.class);
      }

      // Construct using MsgNode1V1M32.AcrelData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        channelType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        shortCircuit_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        openCircuit_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        chStatus_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        leakageVal_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        t1Val_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        t2Val_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        t3Val_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        t4Val_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        connectSw_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        chEnable_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        leakageTh_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        t1Th_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        t2Th_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        t3Th_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        t4Th_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        passwd_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        aVal_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        bVal_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        cVal_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        valStatus_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        aCurr_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        bCurr_ = 0;
        bitField0_ = (bitField0_ & ~0x00400000);
        cCurr_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        currStatus_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        totalYg_ = 0;
        bitField0_ = (bitField0_ & ~0x02000000);
        totalWg_ = 0;
        bitField0_ = (bitField0_ & ~0x04000000);
        totalSz_ = 0;
        bitField0_ = (bitField0_ & ~0x08000000);
        totalFactor_ = 0;
        bitField0_ = (bitField0_ & ~0x10000000);
        valHighSet_ = 0;
        bitField0_ = (bitField0_ & ~0x20000000);
        valLowSet_ = 0;
        bitField0_ = (bitField0_ & ~0x40000000);
        currHighSet_ = 0;
        bitField0_ = (bitField0_ & ~0x80000000);
        energyKwh_ = 0;
        bitField1_ = (bitField1_ & ~0x00000001);
        cmd_ = 0;
        bitField1_ = (bitField1_ & ~0x00000002);
        devError_ = 0;
        bitField1_ = (bitField1_ & ~0x00000004);
        ct_ = 0;
        bitField1_ = (bitField1_ & ~0x00000008);
        outputSw_ = 0;
        bitField1_ = (bitField1_ & ~0x00000010);
        selfCheck_ = 0;
        bitField1_ = (bitField1_ & ~0x00000020);
        valHighType_ = 0;
        bitField1_ = (bitField1_ & ~0x00000040);
        valLowType_ = 0;
        bitField1_ = (bitField1_ & ~0x00000080);
        currHighType_ = 0;
        bitField1_ = (bitField1_ & ~0x00000100);
        ict_ = 0;
        bitField1_ = (bitField1_ & ~0x00000200);
        un_ = 0;
        bitField1_ = (bitField1_ & ~0x00000400);
        in_ = 0;
        bitField1_ = (bitField1_ & ~0x00000800);
        pt_ = 0;
        bitField1_ = (bitField1_ & ~0x00001000);
        lineMode_ = 0;
        bitField1_ = (bitField1_ & ~0x00002000);
        lineOrder_ = 0;
        bitField1_ = (bitField1_ & ~0x00004000);
        volFreq_ = 0;
        bitField1_ = (bitField1_ & ~0x00008000);
        leakageDelay_ = 0;
        bitField1_ = (bitField1_ & ~0x00010000);
        t1Delay_ = 0;
        bitField1_ = (bitField1_ & ~0x00020000);
        t2Delay_ = 0;
        bitField1_ = (bitField1_ & ~0x00040000);
        t3Delay_ = 0;
        bitField1_ = (bitField1_ & ~0x00080000);
        t4Delay_ = 0;
        bitField1_ = (bitField1_ & ~0x00100000);
        volHDelay_ = 0;
        bitField1_ = (bitField1_ & ~0x00200000);
        volLDelay_ = 0;
        bitField1_ = (bitField1_ & ~0x00400000);
        currDelay_ = 0;
        bitField1_ = (bitField1_ & ~0x00800000);
        buzzer_ = 0;
        bitField1_ = (bitField1_ & ~0x01000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_AcrelData_descriptor;
      }

      public AcrelData getDefaultInstanceForType() {
        return AcrelData.getDefaultInstance();
      }

      public AcrelData build() {
        AcrelData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AcrelData buildPartial() {
        AcrelData result = new AcrelData(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.channelType_ = channelType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.shortCircuit_ = shortCircuit_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.openCircuit_ = openCircuit_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.chStatus_ = chStatus_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.leakageVal_ = leakageVal_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.t1Val_ = t1Val_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.t2Val_ = t2Val_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.t3Val_ = t3Val_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.t4Val_ = t4Val_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.connectSw_ = connectSw_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.chEnable_ = chEnable_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.leakageTh_ = leakageTh_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.t1Th_ = t1Th_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.t2Th_ = t2Th_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.t3Th_ = t3Th_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.t4Th_ = t4Th_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.passwd_ = passwd_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.aVal_ = aVal_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.bVal_ = bVal_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.cVal_ = cVal_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.valStatus_ = valStatus_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.aCurr_ = aCurr_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.bCurr_ = bCurr_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.cCurr_ = cCurr_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.currStatus_ = currStatus_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.totalYg_ = totalYg_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.totalWg_ = totalWg_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.totalSz_ = totalSz_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.totalFactor_ = totalFactor_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.valHighSet_ = valHighSet_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x40000000;
        }
        result.valLowSet_ = valLowSet_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x80000000;
        }
        result.currHighSet_ = currHighSet_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField1_ |= 0x00000001;
        }
        result.energyKwh_ = energyKwh_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField1_ |= 0x00000002;
        }
        result.cmd_ = cmd_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x00000004;
        }
        result.devError_ = devError_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField1_ |= 0x00000008;
        }
        result.ct_ = ct_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000010;
        }
        result.outputSw_ = outputSw_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField1_ |= 0x00000020;
        }
        result.selfCheck_ = selfCheck_;
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField1_ |= 0x00000040;
        }
        result.valHighType_ = valHighType_;
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000080;
        }
        result.valLowType_ = valLowType_;
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000100;
        }
        result.currHighType_ = currHighType_;
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000200;
        }
        result.ict_ = ict_;
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000400;
        }
        result.un_ = un_;
        if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
          to_bitField1_ |= 0x00000800;
        }
        result.in_ = in_;
        if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
          to_bitField1_ |= 0x00001000;
        }
        result.pt_ = pt_;
        if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
          to_bitField1_ |= 0x00002000;
        }
        result.lineMode_ = lineMode_;
        if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
          to_bitField1_ |= 0x00004000;
        }
        result.lineOrder_ = lineOrder_;
        if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
          to_bitField1_ |= 0x00008000;
        }
        result.volFreq_ = volFreq_;
        if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
          to_bitField1_ |= 0x00010000;
        }
        result.leakageDelay_ = leakageDelay_;
        if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
          to_bitField1_ |= 0x00020000;
        }
        result.t1Delay_ = t1Delay_;
        if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
          to_bitField1_ |= 0x00040000;
        }
        result.t2Delay_ = t2Delay_;
        if (((from_bitField1_ & 0x00080000) == 0x00080000)) {
          to_bitField1_ |= 0x00080000;
        }
        result.t3Delay_ = t3Delay_;
        if (((from_bitField1_ & 0x00100000) == 0x00100000)) {
          to_bitField1_ |= 0x00100000;
        }
        result.t4Delay_ = t4Delay_;
        if (((from_bitField1_ & 0x00200000) == 0x00200000)) {
          to_bitField1_ |= 0x00200000;
        }
        result.volHDelay_ = volHDelay_;
        if (((from_bitField1_ & 0x00400000) == 0x00400000)) {
          to_bitField1_ |= 0x00400000;
        }
        result.volLDelay_ = volLDelay_;
        if (((from_bitField1_ & 0x00800000) == 0x00800000)) {
          to_bitField1_ |= 0x00800000;
        }
        result.currDelay_ = currDelay_;
        if (((from_bitField1_ & 0x01000000) == 0x01000000)) {
          to_bitField1_ |= 0x01000000;
        }
        result.buzzer_ = buzzer_;
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AcrelData) {
          return mergeFrom((AcrelData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AcrelData other) {
        if (other == AcrelData.getDefaultInstance()) return this;
        if (other.hasChannelType()) {
          setChannelType(other.getChannelType());
        }
        if (other.hasShortCircuit()) {
          setShortCircuit(other.getShortCircuit());
        }
        if (other.hasOpenCircuit()) {
          setOpenCircuit(other.getOpenCircuit());
        }
        if (other.hasChStatus()) {
          setChStatus(other.getChStatus());
        }
        if (other.hasLeakageVal()) {
          setLeakageVal(other.getLeakageVal());
        }
        if (other.hasT1Val()) {
          setT1Val(other.getT1Val());
        }
        if (other.hasT2Val()) {
          setT2Val(other.getT2Val());
        }
        if (other.hasT3Val()) {
          setT3Val(other.getT3Val());
        }
        if (other.hasT4Val()) {
          setT4Val(other.getT4Val());
        }
        if (other.hasConnectSw()) {
          setConnectSw(other.getConnectSw());
        }
        if (other.hasChEnable()) {
          setChEnable(other.getChEnable());
        }
        if (other.hasLeakageTh()) {
          setLeakageTh(other.getLeakageTh());
        }
        if (other.hasT1Th()) {
          setT1Th(other.getT1Th());
        }
        if (other.hasT2Th()) {
          setT2Th(other.getT2Th());
        }
        if (other.hasT3Th()) {
          setT3Th(other.getT3Th());
        }
        if (other.hasT4Th()) {
          setT4Th(other.getT4Th());
        }
        if (other.hasPasswd()) {
          setPasswd(other.getPasswd());
        }
        if (other.hasAVal()) {
          setAVal(other.getAVal());
        }
        if (other.hasBVal()) {
          setBVal(other.getBVal());
        }
        if (other.hasCVal()) {
          setCVal(other.getCVal());
        }
        if (other.hasValStatus()) {
          setValStatus(other.getValStatus());
        }
        if (other.hasACurr()) {
          setACurr(other.getACurr());
        }
        if (other.hasBCurr()) {
          setBCurr(other.getBCurr());
        }
        if (other.hasCCurr()) {
          setCCurr(other.getCCurr());
        }
        if (other.hasCurrStatus()) {
          setCurrStatus(other.getCurrStatus());
        }
        if (other.hasTotalYg()) {
          setTotalYg(other.getTotalYg());
        }
        if (other.hasTotalWg()) {
          setTotalWg(other.getTotalWg());
        }
        if (other.hasTotalSz()) {
          setTotalSz(other.getTotalSz());
        }
        if (other.hasTotalFactor()) {
          setTotalFactor(other.getTotalFactor());
        }
        if (other.hasValHighSet()) {
          setValHighSet(other.getValHighSet());
        }
        if (other.hasValLowSet()) {
          setValLowSet(other.getValLowSet());
        }
        if (other.hasCurrHighSet()) {
          setCurrHighSet(other.getCurrHighSet());
        }
        if (other.hasEnergyKwh()) {
          setEnergyKwh(other.getEnergyKwh());
        }
        if (other.hasCmd()) {
          setCmd(other.getCmd());
        }
        if (other.hasDevError()) {
          setDevError(other.getDevError());
        }
        if (other.hasCt()) {
          setCt(other.getCt());
        }
        if (other.hasOutputSw()) {
          setOutputSw(other.getOutputSw());
        }
        if (other.hasSelfCheck()) {
          setSelfCheck(other.getSelfCheck());
        }
        if (other.hasValHighType()) {
          setValHighType(other.getValHighType());
        }
        if (other.hasValLowType()) {
          setValLowType(other.getValLowType());
        }
        if (other.hasCurrHighType()) {
          setCurrHighType(other.getCurrHighType());
        }
        if (other.hasIct()) {
          setIct(other.getIct());
        }
        if (other.hasUn()) {
          setUn(other.getUn());
        }
        if (other.hasIn()) {
          setIn(other.getIn());
        }
        if (other.hasPt()) {
          setPt(other.getPt());
        }
        if (other.hasLineMode()) {
          setLineMode(other.getLineMode());
        }
        if (other.hasLineOrder()) {
          setLineOrder(other.getLineOrder());
        }
        if (other.hasVolFreq()) {
          setVolFreq(other.getVolFreq());
        }
        if (other.hasLeakageDelay()) {
          setLeakageDelay(other.getLeakageDelay());
        }
        if (other.hasT1Delay()) {
          setT1Delay(other.getT1Delay());
        }
        if (other.hasT2Delay()) {
          setT2Delay(other.getT2Delay());
        }
        if (other.hasT3Delay()) {
          setT3Delay(other.getT3Delay());
        }
        if (other.hasT4Delay()) {
          setT4Delay(other.getT4Delay());
        }
        if (other.hasVolHDelay()) {
          setVolHDelay(other.getVolHDelay());
        }
        if (other.hasVolLDelay()) {
          setVolLDelay(other.getVolLDelay());
        }
        if (other.hasCurrDelay()) {
          setCurrDelay(other.getCurrDelay());
        }
        if (other.hasBuzzer()) {
          setBuzzer(other.getBuzzer());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AcrelData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AcrelData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      // optional uint32 channelType = 1;
      private int channelType_ ;
      /**
       * <code>optional uint32 channelType = 1;</code>
       */
      public boolean hasChannelType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 channelType = 1;</code>
       */
      public int getChannelType() {
        return channelType_;
      }
      /**
       * <code>optional uint32 channelType = 1;</code>
       */
      public Builder setChannelType(int value) {
        bitField0_ |= 0x00000001;
        channelType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 channelType = 1;</code>
       */
      public Builder clearChannelType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        channelType_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 shortCircuit = 2;
      private int shortCircuit_ ;
      /**
       * <code>optional uint32 shortCircuit = 2;</code>
       */
      public boolean hasShortCircuit() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 shortCircuit = 2;</code>
       */
      public int getShortCircuit() {
        return shortCircuit_;
      }
      /**
       * <code>optional uint32 shortCircuit = 2;</code>
       */
      public Builder setShortCircuit(int value) {
        bitField0_ |= 0x00000002;
        shortCircuit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 shortCircuit = 2;</code>
       */
      public Builder clearShortCircuit() {
        bitField0_ = (bitField0_ & ~0x00000002);
        shortCircuit_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 openCircuit = 3;
      private int openCircuit_ ;
      /**
       * <code>optional uint32 openCircuit = 3;</code>
       */
      public boolean hasOpenCircuit() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 openCircuit = 3;</code>
       */
      public int getOpenCircuit() {
        return openCircuit_;
      }
      /**
       * <code>optional uint32 openCircuit = 3;</code>
       */
      public Builder setOpenCircuit(int value) {
        bitField0_ |= 0x00000004;
        openCircuit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 openCircuit = 3;</code>
       */
      public Builder clearOpenCircuit() {
        bitField0_ = (bitField0_ & ~0x00000004);
        openCircuit_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 chStatus = 4;
      private int chStatus_ ;
      /**
       * <code>optional uint32 chStatus = 4;</code>
       */
      public boolean hasChStatus() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 chStatus = 4;</code>
       */
      public int getChStatus() {
        return chStatus_;
      }
      /**
       * <code>optional uint32 chStatus = 4;</code>
       */
      public Builder setChStatus(int value) {
        bitField0_ |= 0x00000008;
        chStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 chStatus = 4;</code>
       */
      public Builder clearChStatus() {
        bitField0_ = (bitField0_ & ~0x00000008);
        chStatus_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 leakageVal = 5;
      private int leakageVal_ ;
      /**
       * <code>optional sint32 leakageVal = 5;</code>
       */
      public boolean hasLeakageVal() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 leakageVal = 5;</code>
       */
      public int getLeakageVal() {
        return leakageVal_;
      }
      /**
       * <code>optional sint32 leakageVal = 5;</code>
       */
      public Builder setLeakageVal(int value) {
        bitField0_ |= 0x00000010;
        leakageVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 leakageVal = 5;</code>
       */
      public Builder clearLeakageVal() {
        bitField0_ = (bitField0_ & ~0x00000010);
        leakageVal_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 t1Val = 6;
      private int t1Val_ ;
      /**
       * <code>optional sint32 t1Val = 6;</code>
       */
      public boolean hasT1Val() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint32 t1Val = 6;</code>
       */
      public int getT1Val() {
        return t1Val_;
      }
      /**
       * <code>optional sint32 t1Val = 6;</code>
       */
      public Builder setT1Val(int value) {
        bitField0_ |= 0x00000020;
        t1Val_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 t1Val = 6;</code>
       */
      public Builder clearT1Val() {
        bitField0_ = (bitField0_ & ~0x00000020);
        t1Val_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 t2Val = 7;
      private int t2Val_ ;
      /**
       * <code>optional sint32 t2Val = 7;</code>
       */
      public boolean hasT2Val() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional sint32 t2Val = 7;</code>
       */
      public int getT2Val() {
        return t2Val_;
      }
      /**
       * <code>optional sint32 t2Val = 7;</code>
       */
      public Builder setT2Val(int value) {
        bitField0_ |= 0x00000040;
        t2Val_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 t2Val = 7;</code>
       */
      public Builder clearT2Val() {
        bitField0_ = (bitField0_ & ~0x00000040);
        t2Val_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 t3Val = 8;
      private int t3Val_ ;
      /**
       * <code>optional sint32 t3Val = 8;</code>
       */
      public boolean hasT3Val() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional sint32 t3Val = 8;</code>
       */
      public int getT3Val() {
        return t3Val_;
      }
      /**
       * <code>optional sint32 t3Val = 8;</code>
       */
      public Builder setT3Val(int value) {
        bitField0_ |= 0x00000080;
        t3Val_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 t3Val = 8;</code>
       */
      public Builder clearT3Val() {
        bitField0_ = (bitField0_ & ~0x00000080);
        t3Val_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 t4Val = 9;
      private int t4Val_ ;
      /**
       * <code>optional sint32 t4Val = 9;</code>
       */
      public boolean hasT4Val() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional sint32 t4Val = 9;</code>
       */
      public int getT4Val() {
        return t4Val_;
      }
      /**
       * <code>optional sint32 t4Val = 9;</code>
       */
      public Builder setT4Val(int value) {
        bitField0_ |= 0x00000100;
        t4Val_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 t4Val = 9;</code>
       */
      public Builder clearT4Val() {
        bitField0_ = (bitField0_ & ~0x00000100);
        t4Val_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 connectSw = 10;
      private int connectSw_ ;
      /**
       * <code>optional uint32 connectSw = 10;</code>
       */
      public boolean hasConnectSw() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 connectSw = 10;</code>
       */
      public int getConnectSw() {
        return connectSw_;
      }
      /**
       * <code>optional uint32 connectSw = 10;</code>
       */
      public Builder setConnectSw(int value) {
        bitField0_ |= 0x00000200;
        connectSw_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 connectSw = 10;</code>
       */
      public Builder clearConnectSw() {
        bitField0_ = (bitField0_ & ~0x00000200);
        connectSw_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 chEnable = 11;
      private int chEnable_ ;
      /**
       * <code>optional uint32 chEnable = 11;</code>
       */
      public boolean hasChEnable() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 chEnable = 11;</code>
       */
      public int getChEnable() {
        return chEnable_;
      }
      /**
       * <code>optional uint32 chEnable = 11;</code>
       */
      public Builder setChEnable(int value) {
        bitField0_ |= 0x00000400;
        chEnable_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 chEnable = 11;</code>
       */
      public Builder clearChEnable() {
        bitField0_ = (bitField0_ & ~0x00000400);
        chEnable_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 leakageTh = 12;
      private int leakageTh_ ;
      /**
       * <code>optional uint32 leakageTh = 12;</code>
       */
      public boolean hasLeakageTh() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 leakageTh = 12;</code>
       */
      public int getLeakageTh() {
        return leakageTh_;
      }
      /**
       * <code>optional uint32 leakageTh = 12;</code>
       */
      public Builder setLeakageTh(int value) {
        bitField0_ |= 0x00000800;
        leakageTh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 leakageTh = 12;</code>
       */
      public Builder clearLeakageTh() {
        bitField0_ = (bitField0_ & ~0x00000800);
        leakageTh_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 t1Th = 13;
      private int t1Th_ ;
      /**
       * <code>optional uint32 t1Th = 13;</code>
       */
      public boolean hasT1Th() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 t1Th = 13;</code>
       */
      public int getT1Th() {
        return t1Th_;
      }
      /**
       * <code>optional uint32 t1Th = 13;</code>
       */
      public Builder setT1Th(int value) {
        bitField0_ |= 0x00001000;
        t1Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 t1Th = 13;</code>
       */
      public Builder clearT1Th() {
        bitField0_ = (bitField0_ & ~0x00001000);
        t1Th_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 t2Th = 14;
      private int t2Th_ ;
      /**
       * <code>optional uint32 t2Th = 14;</code>
       */
      public boolean hasT2Th() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional uint32 t2Th = 14;</code>
       */
      public int getT2Th() {
        return t2Th_;
      }
      /**
       * <code>optional uint32 t2Th = 14;</code>
       */
      public Builder setT2Th(int value) {
        bitField0_ |= 0x00002000;
        t2Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 t2Th = 14;</code>
       */
      public Builder clearT2Th() {
        bitField0_ = (bitField0_ & ~0x00002000);
        t2Th_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 t3Th = 15;
      private int t3Th_ ;
      /**
       * <code>optional uint32 t3Th = 15;</code>
       */
      public boolean hasT3Th() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional uint32 t3Th = 15;</code>
       */
      public int getT3Th() {
        return t3Th_;
      }
      /**
       * <code>optional uint32 t3Th = 15;</code>
       */
      public Builder setT3Th(int value) {
        bitField0_ |= 0x00004000;
        t3Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 t3Th = 15;</code>
       */
      public Builder clearT3Th() {
        bitField0_ = (bitField0_ & ~0x00004000);
        t3Th_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 t4Th = 16;
      private int t4Th_ ;
      /**
       * <code>optional uint32 t4Th = 16;</code>
       */
      public boolean hasT4Th() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional uint32 t4Th = 16;</code>
       */
      public int getT4Th() {
        return t4Th_;
      }
      /**
       * <code>optional uint32 t4Th = 16;</code>
       */
      public Builder setT4Th(int value) {
        bitField0_ |= 0x00008000;
        t4Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 t4Th = 16;</code>
       */
      public Builder clearT4Th() {
        bitField0_ = (bitField0_ & ~0x00008000);
        t4Th_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 passwd = 17;
      private int passwd_ ;
      /**
       * <code>optional uint32 passwd = 17;</code>
       */
      public boolean hasPasswd() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional uint32 passwd = 17;</code>
       */
      public int getPasswd() {
        return passwd_;
      }
      /**
       * <code>optional uint32 passwd = 17;</code>
       */
      public Builder setPasswd(int value) {
        bitField0_ |= 0x00010000;
        passwd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 passwd = 17;</code>
       */
      public Builder clearPasswd() {
        bitField0_ = (bitField0_ & ~0x00010000);
        passwd_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 aVal = 18;
      private int aVal_ ;
      /**
       * <code>optional uint32 aVal = 18;</code>
       */
      public boolean hasAVal() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional uint32 aVal = 18;</code>
       */
      public int getAVal() {
        return aVal_;
      }
      /**
       * <code>optional uint32 aVal = 18;</code>
       */
      public Builder setAVal(int value) {
        bitField0_ |= 0x00020000;
        aVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 aVal = 18;</code>
       */
      public Builder clearAVal() {
        bitField0_ = (bitField0_ & ~0x00020000);
        aVal_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 bVal = 19;
      private int bVal_ ;
      /**
       * <code>optional uint32 bVal = 19;</code>
       */
      public boolean hasBVal() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional uint32 bVal = 19;</code>
       */
      public int getBVal() {
        return bVal_;
      }
      /**
       * <code>optional uint32 bVal = 19;</code>
       */
      public Builder setBVal(int value) {
        bitField0_ |= 0x00040000;
        bVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bVal = 19;</code>
       */
      public Builder clearBVal() {
        bitField0_ = (bitField0_ & ~0x00040000);
        bVal_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 cVal = 20;
      private int cVal_ ;
      /**
       * <code>optional uint32 cVal = 20;</code>
       */
      public boolean hasCVal() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional uint32 cVal = 20;</code>
       */
      public int getCVal() {
        return cVal_;
      }
      /**
       * <code>optional uint32 cVal = 20;</code>
       */
      public Builder setCVal(int value) {
        bitField0_ |= 0x00080000;
        cVal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cVal = 20;</code>
       */
      public Builder clearCVal() {
        bitField0_ = (bitField0_ & ~0x00080000);
        cVal_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 valStatus = 21;
      private int valStatus_ ;
      /**
       * <code>optional uint32 valStatus = 21;</code>
       */
      public boolean hasValStatus() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional uint32 valStatus = 21;</code>
       */
      public int getValStatus() {
        return valStatus_;
      }
      /**
       * <code>optional uint32 valStatus = 21;</code>
       */
      public Builder setValStatus(int value) {
        bitField0_ |= 0x00100000;
        valStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 valStatus = 21;</code>
       */
      public Builder clearValStatus() {
        bitField0_ = (bitField0_ & ~0x00100000);
        valStatus_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 aCurr = 22;
      private int aCurr_ ;
      /**
       * <code>optional uint32 aCurr = 22;</code>
       */
      public boolean hasACurr() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional uint32 aCurr = 22;</code>
       */
      public int getACurr() {
        return aCurr_;
      }
      /**
       * <code>optional uint32 aCurr = 22;</code>
       */
      public Builder setACurr(int value) {
        bitField0_ |= 0x00200000;
        aCurr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 aCurr = 22;</code>
       */
      public Builder clearACurr() {
        bitField0_ = (bitField0_ & ~0x00200000);
        aCurr_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 bCurr = 23;
      private int bCurr_ ;
      /**
       * <code>optional uint32 bCurr = 23;</code>
       */
      public boolean hasBCurr() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional uint32 bCurr = 23;</code>
       */
      public int getBCurr() {
        return bCurr_;
      }
      /**
       * <code>optional uint32 bCurr = 23;</code>
       */
      public Builder setBCurr(int value) {
        bitField0_ |= 0x00400000;
        bCurr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bCurr = 23;</code>
       */
      public Builder clearBCurr() {
        bitField0_ = (bitField0_ & ~0x00400000);
        bCurr_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 cCurr = 24;
      private int cCurr_ ;
      /**
       * <code>optional uint32 cCurr = 24;</code>
       */
      public boolean hasCCurr() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional uint32 cCurr = 24;</code>
       */
      public int getCCurr() {
        return cCurr_;
      }
      /**
       * <code>optional uint32 cCurr = 24;</code>
       */
      public Builder setCCurr(int value) {
        bitField0_ |= 0x00800000;
        cCurr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cCurr = 24;</code>
       */
      public Builder clearCCurr() {
        bitField0_ = (bitField0_ & ~0x00800000);
        cCurr_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 currStatus = 25;
      private int currStatus_ ;
      /**
       * <code>optional uint32 currStatus = 25;</code>
       */
      public boolean hasCurrStatus() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional uint32 currStatus = 25;</code>
       */
      public int getCurrStatus() {
        return currStatus_;
      }
      /**
       * <code>optional uint32 currStatus = 25;</code>
       */
      public Builder setCurrStatus(int value) {
        bitField0_ |= 0x01000000;
        currStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 currStatus = 25;</code>
       */
      public Builder clearCurrStatus() {
        bitField0_ = (bitField0_ & ~0x01000000);
        currStatus_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 totalYg = 26;
      private int totalYg_ ;
      /**
       * <code>optional uint32 totalYg = 26;</code>
       */
      public boolean hasTotalYg() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional uint32 totalYg = 26;</code>
       */
      public int getTotalYg() {
        return totalYg_;
      }
      /**
       * <code>optional uint32 totalYg = 26;</code>
       */
      public Builder setTotalYg(int value) {
        bitField0_ |= 0x02000000;
        totalYg_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 totalYg = 26;</code>
       */
      public Builder clearTotalYg() {
        bitField0_ = (bitField0_ & ~0x02000000);
        totalYg_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 totalWg = 27;
      private int totalWg_ ;
      /**
       * <code>optional uint32 totalWg = 27;</code>
       */
      public boolean hasTotalWg() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional uint32 totalWg = 27;</code>
       */
      public int getTotalWg() {
        return totalWg_;
      }
      /**
       * <code>optional uint32 totalWg = 27;</code>
       */
      public Builder setTotalWg(int value) {
        bitField0_ |= 0x04000000;
        totalWg_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 totalWg = 27;</code>
       */
      public Builder clearTotalWg() {
        bitField0_ = (bitField0_ & ~0x04000000);
        totalWg_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 totalSz = 28;
      private int totalSz_ ;
      /**
       * <code>optional uint32 totalSz = 28;</code>
       */
      public boolean hasTotalSz() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional uint32 totalSz = 28;</code>
       */
      public int getTotalSz() {
        return totalSz_;
      }
      /**
       * <code>optional uint32 totalSz = 28;</code>
       */
      public Builder setTotalSz(int value) {
        bitField0_ |= 0x08000000;
        totalSz_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 totalSz = 28;</code>
       */
      public Builder clearTotalSz() {
        bitField0_ = (bitField0_ & ~0x08000000);
        totalSz_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 totalFactor = 29;
      private int totalFactor_ ;
      /**
       * <code>optional uint32 totalFactor = 29;</code>
       */
      public boolean hasTotalFactor() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional uint32 totalFactor = 29;</code>
       */
      public int getTotalFactor() {
        return totalFactor_;
      }
      /**
       * <code>optional uint32 totalFactor = 29;</code>
       */
      public Builder setTotalFactor(int value) {
        bitField0_ |= 0x10000000;
        totalFactor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 totalFactor = 29;</code>
       */
      public Builder clearTotalFactor() {
        bitField0_ = (bitField0_ & ~0x10000000);
        totalFactor_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 valHighSet = 30;
      private int valHighSet_ ;
      /**
       * <code>optional uint32 valHighSet = 30;</code>
       */
      public boolean hasValHighSet() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional uint32 valHighSet = 30;</code>
       */
      public int getValHighSet() {
        return valHighSet_;
      }
      /**
       * <code>optional uint32 valHighSet = 30;</code>
       */
      public Builder setValHighSet(int value) {
        bitField0_ |= 0x20000000;
        valHighSet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 valHighSet = 30;</code>
       */
      public Builder clearValHighSet() {
        bitField0_ = (bitField0_ & ~0x20000000);
        valHighSet_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 valLowSet = 31;
      private int valLowSet_ ;
      /**
       * <code>optional uint32 valLowSet = 31;</code>
       */
      public boolean hasValLowSet() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional uint32 valLowSet = 31;</code>
       */
      public int getValLowSet() {
        return valLowSet_;
      }
      /**
       * <code>optional uint32 valLowSet = 31;</code>
       */
      public Builder setValLowSet(int value) {
        bitField0_ |= 0x40000000;
        valLowSet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 valLowSet = 31;</code>
       */
      public Builder clearValLowSet() {
        bitField0_ = (bitField0_ & ~0x40000000);
        valLowSet_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 currHighSet = 32;
      private int currHighSet_ ;
      /**
       * <code>optional uint32 currHighSet = 32;</code>
       */
      public boolean hasCurrHighSet() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional uint32 currHighSet = 32;</code>
       */
      public int getCurrHighSet() {
        return currHighSet_;
      }
      /**
       * <code>optional uint32 currHighSet = 32;</code>
       */
      public Builder setCurrHighSet(int value) {
        bitField0_ |= 0x80000000;
        currHighSet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 currHighSet = 32;</code>
       */
      public Builder clearCurrHighSet() {
        bitField0_ = (bitField0_ & ~0x80000000);
        currHighSet_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 energyKwh = 33;
      private int energyKwh_ ;
      /**
       * <code>optional uint32 energyKwh = 33;</code>
       */
      public boolean hasEnergyKwh() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 energyKwh = 33;</code>
       */
      public int getEnergyKwh() {
        return energyKwh_;
      }
      /**
       * <code>optional uint32 energyKwh = 33;</code>
       */
      public Builder setEnergyKwh(int value) {
        bitField1_ |= 0x00000001;
        energyKwh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 energyKwh = 33;</code>
       */
      public Builder clearEnergyKwh() {
        bitField1_ = (bitField1_ & ~0x00000001);
        energyKwh_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 cmd = 35;
      private int cmd_ ;
      /**
       * <code>optional uint32 cmd = 35;</code>
       */
      public boolean hasCmd() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 cmd = 35;</code>
       */
      public int getCmd() {
        return cmd_;
      }
      /**
       * <code>optional uint32 cmd = 35;</code>
       */
      public Builder setCmd(int value) {
        bitField1_ |= 0x00000002;
        cmd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cmd = 35;</code>
       */
      public Builder clearCmd() {
        bitField1_ = (bitField1_ & ~0x00000002);
        cmd_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 devError = 36;
      private int devError_ ;
      /**
       * <code>optional uint32 devError = 36;</code>
       */
      public boolean hasDevError() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 devError = 36;</code>
       */
      public int getDevError() {
        return devError_;
      }
      /**
       * <code>optional uint32 devError = 36;</code>
       */
      public Builder setDevError(int value) {
        bitField1_ |= 0x00000004;
        devError_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 devError = 36;</code>
       */
      public Builder clearDevError() {
        bitField1_ = (bitField1_ & ~0x00000004);
        devError_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 ct = 37;
      private int ct_ ;
      /**
       * <code>optional uint32 ct = 37;</code>
       */
      public boolean hasCt() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 ct = 37;</code>
       */
      public int getCt() {
        return ct_;
      }
      /**
       * <code>optional uint32 ct = 37;</code>
       */
      public Builder setCt(int value) {
        bitField1_ |= 0x00000008;
        ct_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ct = 37;</code>
       */
      public Builder clearCt() {
        bitField1_ = (bitField1_ & ~0x00000008);
        ct_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 outputSw = 38;
      private int outputSw_ ;
      /**
       * <code>optional uint32 outputSw = 38;</code>
       */
      public boolean hasOutputSw() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 outputSw = 38;</code>
       */
      public int getOutputSw() {
        return outputSw_;
      }
      /**
       * <code>optional uint32 outputSw = 38;</code>
       */
      public Builder setOutputSw(int value) {
        bitField1_ |= 0x00000010;
        outputSw_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 outputSw = 38;</code>
       */
      public Builder clearOutputSw() {
        bitField1_ = (bitField1_ & ~0x00000010);
        outputSw_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 selfCheck = 39;
      private int selfCheck_ ;
      /**
       * <code>optional uint32 selfCheck = 39;</code>
       */
      public boolean hasSelfCheck() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 selfCheck = 39;</code>
       */
      public int getSelfCheck() {
        return selfCheck_;
      }
      /**
       * <code>optional uint32 selfCheck = 39;</code>
       */
      public Builder setSelfCheck(int value) {
        bitField1_ |= 0x00000020;
        selfCheck_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 selfCheck = 39;</code>
       */
      public Builder clearSelfCheck() {
        bitField1_ = (bitField1_ & ~0x00000020);
        selfCheck_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 valHighType = 40;
      private int valHighType_ ;
      /**
       * <code>optional uint32 valHighType = 40;</code>
       */
      public boolean hasValHighType() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 valHighType = 40;</code>
       */
      public int getValHighType() {
        return valHighType_;
      }
      /**
       * <code>optional uint32 valHighType = 40;</code>
       */
      public Builder setValHighType(int value) {
        bitField1_ |= 0x00000040;
        valHighType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 valHighType = 40;</code>
       */
      public Builder clearValHighType() {
        bitField1_ = (bitField1_ & ~0x00000040);
        valHighType_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 valLowType = 41;
      private int valLowType_ ;
      /**
       * <code>optional uint32 valLowType = 41;</code>
       */
      public boolean hasValLowType() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 valLowType = 41;</code>
       */
      public int getValLowType() {
        return valLowType_;
      }
      /**
       * <code>optional uint32 valLowType = 41;</code>
       */
      public Builder setValLowType(int value) {
        bitField1_ |= 0x00000080;
        valLowType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 valLowType = 41;</code>
       */
      public Builder clearValLowType() {
        bitField1_ = (bitField1_ & ~0x00000080);
        valLowType_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 currHighType = 42;
      private int currHighType_ ;
      /**
       * <code>optional uint32 currHighType = 42;</code>
       */
      public boolean hasCurrHighType() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 currHighType = 42;</code>
       */
      public int getCurrHighType() {
        return currHighType_;
      }
      /**
       * <code>optional uint32 currHighType = 42;</code>
       */
      public Builder setCurrHighType(int value) {
        bitField1_ |= 0x00000100;
        currHighType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 currHighType = 42;</code>
       */
      public Builder clearCurrHighType() {
        bitField1_ = (bitField1_ & ~0x00000100);
        currHighType_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 ict = 43;
      private int ict_ ;
      /**
       * <code>optional uint32 ict = 43;</code>
       */
      public boolean hasIct() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 ict = 43;</code>
       */
      public int getIct() {
        return ict_;
      }
      /**
       * <code>optional uint32 ict = 43;</code>
       */
      public Builder setIct(int value) {
        bitField1_ |= 0x00000200;
        ict_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ict = 43;</code>
       */
      public Builder clearIct() {
        bitField1_ = (bitField1_ & ~0x00000200);
        ict_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 un = 44;
      private int un_ ;
      /**
       * <code>optional uint32 un = 44;</code>
       */
      public boolean hasUn() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 un = 44;</code>
       */
      public int getUn() {
        return un_;
      }
      /**
       * <code>optional uint32 un = 44;</code>
       */
      public Builder setUn(int value) {
        bitField1_ |= 0x00000400;
        un_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 un = 44;</code>
       */
      public Builder clearUn() {
        bitField1_ = (bitField1_ & ~0x00000400);
        un_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 in = 45;
      private int in_ ;
      /**
       * <code>optional uint32 in = 45;</code>
       */
      public boolean hasIn() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 in = 45;</code>
       */
      public int getIn() {
        return in_;
      }
      /**
       * <code>optional uint32 in = 45;</code>
       */
      public Builder setIn(int value) {
        bitField1_ |= 0x00000800;
        in_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 in = 45;</code>
       */
      public Builder clearIn() {
        bitField1_ = (bitField1_ & ~0x00000800);
        in_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 pt = 46;
      private int pt_ ;
      /**
       * <code>optional uint32 pt = 46;</code>
       */
      public boolean hasPt() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 pt = 46;</code>
       */
      public int getPt() {
        return pt_;
      }
      /**
       * <code>optional uint32 pt = 46;</code>
       */
      public Builder setPt(int value) {
        bitField1_ |= 0x00001000;
        pt_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 pt = 46;</code>
       */
      public Builder clearPt() {
        bitField1_ = (bitField1_ & ~0x00001000);
        pt_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 lineMode = 47;
      private int lineMode_ ;
      /**
       * <code>optional uint32 lineMode = 47;</code>
       */
      public boolean hasLineMode() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional uint32 lineMode = 47;</code>
       */
      public int getLineMode() {
        return lineMode_;
      }
      /**
       * <code>optional uint32 lineMode = 47;</code>
       */
      public Builder setLineMode(int value) {
        bitField1_ |= 0x00002000;
        lineMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 lineMode = 47;</code>
       */
      public Builder clearLineMode() {
        bitField1_ = (bitField1_ & ~0x00002000);
        lineMode_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 lineOrder = 48;
      private int lineOrder_ ;
      /**
       * <code>optional uint32 lineOrder = 48;</code>
       */
      public boolean hasLineOrder() {
        return ((bitField1_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional uint32 lineOrder = 48;</code>
       */
      public int getLineOrder() {
        return lineOrder_;
      }
      /**
       * <code>optional uint32 lineOrder = 48;</code>
       */
      public Builder setLineOrder(int value) {
        bitField1_ |= 0x00004000;
        lineOrder_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 lineOrder = 48;</code>
       */
      public Builder clearLineOrder() {
        bitField1_ = (bitField1_ & ~0x00004000);
        lineOrder_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 volFreq = 49;
      private int volFreq_ ;
      /**
       * <code>optional uint32 volFreq = 49;</code>
       */
      public boolean hasVolFreq() {
        return ((bitField1_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional uint32 volFreq = 49;</code>
       */
      public int getVolFreq() {
        return volFreq_;
      }
      /**
       * <code>optional uint32 volFreq = 49;</code>
       */
      public Builder setVolFreq(int value) {
        bitField1_ |= 0x00008000;
        volFreq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 volFreq = 49;</code>
       */
      public Builder clearVolFreq() {
        bitField1_ = (bitField1_ & ~0x00008000);
        volFreq_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 leakageDelay = 50;
      private int leakageDelay_ ;
      /**
       * <code>optional uint32 leakageDelay = 50;</code>
       */
      public boolean hasLeakageDelay() {
        return ((bitField1_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional uint32 leakageDelay = 50;</code>
       */
      public int getLeakageDelay() {
        return leakageDelay_;
      }
      /**
       * <code>optional uint32 leakageDelay = 50;</code>
       */
      public Builder setLeakageDelay(int value) {
        bitField1_ |= 0x00010000;
        leakageDelay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 leakageDelay = 50;</code>
       */
      public Builder clearLeakageDelay() {
        bitField1_ = (bitField1_ & ~0x00010000);
        leakageDelay_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 T1Delay = 51;
      private int t1Delay_ ;
      /**
       * <code>optional uint32 T1Delay = 51;</code>
       */
      public boolean hasT1Delay() {
        return ((bitField1_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional uint32 T1Delay = 51;</code>
       */
      public int getT1Delay() {
        return t1Delay_;
      }
      /**
       * <code>optional uint32 T1Delay = 51;</code>
       */
      public Builder setT1Delay(int value) {
        bitField1_ |= 0x00020000;
        t1Delay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 T1Delay = 51;</code>
       */
      public Builder clearT1Delay() {
        bitField1_ = (bitField1_ & ~0x00020000);
        t1Delay_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 T2Delay = 52;
      private int t2Delay_ ;
      /**
       * <code>optional uint32 T2Delay = 52;</code>
       */
      public boolean hasT2Delay() {
        return ((bitField1_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional uint32 T2Delay = 52;</code>
       */
      public int getT2Delay() {
        return t2Delay_;
      }
      /**
       * <code>optional uint32 T2Delay = 52;</code>
       */
      public Builder setT2Delay(int value) {
        bitField1_ |= 0x00040000;
        t2Delay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 T2Delay = 52;</code>
       */
      public Builder clearT2Delay() {
        bitField1_ = (bitField1_ & ~0x00040000);
        t2Delay_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 T3Delay = 53;
      private int t3Delay_ ;
      /**
       * <code>optional uint32 T3Delay = 53;</code>
       */
      public boolean hasT3Delay() {
        return ((bitField1_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional uint32 T3Delay = 53;</code>
       */
      public int getT3Delay() {
        return t3Delay_;
      }
      /**
       * <code>optional uint32 T3Delay = 53;</code>
       */
      public Builder setT3Delay(int value) {
        bitField1_ |= 0x00080000;
        t3Delay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 T3Delay = 53;</code>
       */
      public Builder clearT3Delay() {
        bitField1_ = (bitField1_ & ~0x00080000);
        t3Delay_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 T4Delay = 54;
      private int t4Delay_ ;
      /**
       * <code>optional uint32 T4Delay = 54;</code>
       */
      public boolean hasT4Delay() {
        return ((bitField1_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional uint32 T4Delay = 54;</code>
       */
      public int getT4Delay() {
        return t4Delay_;
      }
      /**
       * <code>optional uint32 T4Delay = 54;</code>
       */
      public Builder setT4Delay(int value) {
        bitField1_ |= 0x00100000;
        t4Delay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 T4Delay = 54;</code>
       */
      public Builder clearT4Delay() {
        bitField1_ = (bitField1_ & ~0x00100000);
        t4Delay_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 volHDelay = 55;
      private int volHDelay_ ;
      /**
       * <code>optional uint32 volHDelay = 55;</code>
       */
      public boolean hasVolHDelay() {
        return ((bitField1_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional uint32 volHDelay = 55;</code>
       */
      public int getVolHDelay() {
        return volHDelay_;
      }
      /**
       * <code>optional uint32 volHDelay = 55;</code>
       */
      public Builder setVolHDelay(int value) {
        bitField1_ |= 0x00200000;
        volHDelay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 volHDelay = 55;</code>
       */
      public Builder clearVolHDelay() {
        bitField1_ = (bitField1_ & ~0x00200000);
        volHDelay_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 volLDelay = 56;
      private int volLDelay_ ;
      /**
       * <code>optional uint32 volLDelay = 56;</code>
       */
      public boolean hasVolLDelay() {
        return ((bitField1_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional uint32 volLDelay = 56;</code>
       */
      public int getVolLDelay() {
        return volLDelay_;
      }
      /**
       * <code>optional uint32 volLDelay = 56;</code>
       */
      public Builder setVolLDelay(int value) {
        bitField1_ |= 0x00400000;
        volLDelay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 volLDelay = 56;</code>
       */
      public Builder clearVolLDelay() {
        bitField1_ = (bitField1_ & ~0x00400000);
        volLDelay_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 currDelay = 57;
      private int currDelay_ ;
      /**
       * <code>optional uint32 currDelay = 57;</code>
       */
      public boolean hasCurrDelay() {
        return ((bitField1_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional uint32 currDelay = 57;</code>
       */
      public int getCurrDelay() {
        return currDelay_;
      }
      /**
       * <code>optional uint32 currDelay = 57;</code>
       */
      public Builder setCurrDelay(int value) {
        bitField1_ |= 0x00800000;
        currDelay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 currDelay = 57;</code>
       */
      public Builder clearCurrDelay() {
        bitField1_ = (bitField1_ & ~0x00800000);
        currDelay_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 buzzer = 58;
      private int buzzer_ ;
      /**
       * <code>optional uint32 buzzer = 58;</code>
       */
      public boolean hasBuzzer() {
        return ((bitField1_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional uint32 buzzer = 58;</code>
       */
      public int getBuzzer() {
        return buzzer_;
      }
      /**
       * <code>optional uint32 buzzer = 58;</code>
       */
      public Builder setBuzzer(int value) {
        bitField1_ |= 0x01000000;
        buzzer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 buzzer = 58;</code>
       */
      public Builder clearBuzzer() {
        bitField1_ = (bitField1_ & ~0x01000000);
        buzzer_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:AcrelData)
    }

    static {
      defaultInstance = new AcrelData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AcrelData)
  }

  public interface BaymaxOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 gasDevClass = 1;
    /**
     * <code>optional uint32 gasDevClass = 1;</code>
     */
    boolean hasGasDevClass();
    /**
     * <code>optional uint32 gasDevClass = 1;</code>
     */
    int getGasDevClass();

    // optional uint32 gasDensity = 2;
    /**
     * <code>optional uint32 gasDensity = 2;</code>
     */
    boolean hasGasDensity();
    /**
     * <code>optional uint32 gasDensity = 2;</code>
     */
    int getGasDensity();

    // optional uint32 gasDensityL1 = 3;
    /**
     * <code>optional uint32 gasDensityL1 = 3;</code>
     */
    boolean hasGasDensityL1();
    /**
     * <code>optional uint32 gasDensityL1 = 3;</code>
     */
    int getGasDensityL1();

    // optional uint32 gasDensityL2 = 4;
    /**
     * <code>optional uint32 gasDensityL2 = 4;</code>
     */
    boolean hasGasDensityL2();
    /**
     * <code>optional uint32 gasDensityL2 = 4;</code>
     */
    int getGasDensityL2();

    // optional uint32 gasDensityL3 = 5;
    /**
     * <code>optional uint32 gasDensityL3 = 5;</code>
     */
    boolean hasGasDensityL3();
    /**
     * <code>optional uint32 gasDensityL3 = 5;</code>
     */
    int getGasDensityL3();

    // optional uint32 gasDisassembly = 6;
    /**
     * <code>optional uint32 gasDisassembly = 6;</code>
     */
    boolean hasGasDisassembly();
    /**
     * <code>optional uint32 gasDisassembly = 6;</code>
     */
    int getGasDisassembly();

    // optional uint32 gasLosePwr = 7;
    /**
     * <code>optional uint32 gasLosePwr = 7;</code>
     */
    boolean hasGasLosePwr();
    /**
     * <code>optional uint32 gasLosePwr = 7;</code>
     */
    int getGasLosePwr();

    // optional uint32 gasEMValve = 8;
    /**
     * <code>optional uint32 gasEMValve = 8;</code>
     */
    boolean hasGasEMValve();
    /**
     * <code>optional uint32 gasEMValve = 8;</code>
     */
    int getGasEMValve();

    // optional uint32 gasDeviceStatus = 9;
    /**
     * <code>optional uint32 gasDeviceStatus = 9;</code>
     */
    boolean hasGasDeviceStatus();
    /**
     * <code>optional uint32 gasDeviceStatus = 9;</code>
     */
    int getGasDeviceStatus();

    // optional uint32 gasDeviceOpState = 10;
    /**
     * <code>optional uint32 gasDeviceOpState = 10;</code>
     */
    boolean hasGasDeviceOpState();
    /**
     * <code>optional uint32 gasDeviceOpState = 10;</code>
     */
    int getGasDeviceOpState();

    // optional uint32 gasDeviceComsDown = 11;
    /**
     * <code>optional uint32 gasDeviceComsDown = 11;</code>
     */
    boolean hasGasDeviceComsDown();
    /**
     * <code>optional uint32 gasDeviceComsDown = 11;</code>
     */
    int getGasDeviceComsDown();

    // optional uint32 gasDeviceCMD = 12;
    /**
     * <code>optional uint32 gasDeviceCMD = 12;</code>
     */
    boolean hasGasDeviceCMD();
    /**
     * <code>optional uint32 gasDeviceCMD = 12;</code>
     */
    int getGasDeviceCMD();

    // optional uint32 gasDeviceSilentMode = 13;
    /**
     * <code>optional uint32 gasDeviceSilentMode = 13;</code>
     */
    boolean hasGasDeviceSilentMode();
    /**
     * <code>optional uint32 gasDeviceSilentMode = 13;</code>
     */
    int getGasDeviceSilentMode();
  }
  /**
   * Protobuf type {@code Baymax}
   */
  public static final class Baymax extends
      com.google.protobuf.GeneratedMessage
      implements BaymaxOrBuilder {
    // Use Baymax.newBuilder() to construct.
    private Baymax(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Baymax(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Baymax defaultInstance;
    public static Baymax getDefaultInstance() {
      return defaultInstance;
    }

    public Baymax getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Baymax(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              gasDevClass_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              gasDensity_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              gasDensityL1_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              gasDensityL2_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              gasDensityL3_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              gasDisassembly_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              gasLosePwr_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              gasEMValve_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              gasDeviceStatus_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              gasDeviceOpState_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              gasDeviceComsDown_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              gasDeviceCMD_ = input.readUInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              gasDeviceSilentMode_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_Baymax_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_Baymax_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Baymax.class, Builder.class);
    }

    public static com.google.protobuf.Parser<Baymax> PARSER =
        new com.google.protobuf.AbstractParser<Baymax>() {
      public Baymax parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Baymax(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<Baymax> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 gasDevClass = 1;
    public static final int GASDEVCLASS_FIELD_NUMBER = 1;
    private int gasDevClass_;
    /**
     * <code>optional uint32 gasDevClass = 1;</code>
     */
    public boolean hasGasDevClass() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 gasDevClass = 1;</code>
     */
    public int getGasDevClass() {
      return gasDevClass_;
    }

    // optional uint32 gasDensity = 2;
    public static final int GASDENSITY_FIELD_NUMBER = 2;
    private int gasDensity_;
    /**
     * <code>optional uint32 gasDensity = 2;</code>
     */
    public boolean hasGasDensity() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 gasDensity = 2;</code>
     */
    public int getGasDensity() {
      return gasDensity_;
    }

    // optional uint32 gasDensityL1 = 3;
    public static final int GASDENSITYL1_FIELD_NUMBER = 3;
    private int gasDensityL1_;
    /**
     * <code>optional uint32 gasDensityL1 = 3;</code>
     */
    public boolean hasGasDensityL1() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 gasDensityL1 = 3;</code>
     */
    public int getGasDensityL1() {
      return gasDensityL1_;
    }

    // optional uint32 gasDensityL2 = 4;
    public static final int GASDENSITYL2_FIELD_NUMBER = 4;
    private int gasDensityL2_;
    /**
     * <code>optional uint32 gasDensityL2 = 4;</code>
     */
    public boolean hasGasDensityL2() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 gasDensityL2 = 4;</code>
     */
    public int getGasDensityL2() {
      return gasDensityL2_;
    }

    // optional uint32 gasDensityL3 = 5;
    public static final int GASDENSITYL3_FIELD_NUMBER = 5;
    private int gasDensityL3_;
    /**
     * <code>optional uint32 gasDensityL3 = 5;</code>
     */
    public boolean hasGasDensityL3() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 gasDensityL3 = 5;</code>
     */
    public int getGasDensityL3() {
      return gasDensityL3_;
    }

    // optional uint32 gasDisassembly = 6;
    public static final int GASDISASSEMBLY_FIELD_NUMBER = 6;
    private int gasDisassembly_;
    /**
     * <code>optional uint32 gasDisassembly = 6;</code>
     */
    public boolean hasGasDisassembly() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 gasDisassembly = 6;</code>
     */
    public int getGasDisassembly() {
      return gasDisassembly_;
    }

    // optional uint32 gasLosePwr = 7;
    public static final int GASLOSEPWR_FIELD_NUMBER = 7;
    private int gasLosePwr_;
    /**
     * <code>optional uint32 gasLosePwr = 7;</code>
     */
    public boolean hasGasLosePwr() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 gasLosePwr = 7;</code>
     */
    public int getGasLosePwr() {
      return gasLosePwr_;
    }

    // optional uint32 gasEMValve = 8;
    public static final int GASEMVALVE_FIELD_NUMBER = 8;
    private int gasEMValve_;
    /**
     * <code>optional uint32 gasEMValve = 8;</code>
     */
    public boolean hasGasEMValve() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 gasEMValve = 8;</code>
     */
    public int getGasEMValve() {
      return gasEMValve_;
    }

    // optional uint32 gasDeviceStatus = 9;
    public static final int GASDEVICESTATUS_FIELD_NUMBER = 9;
    private int gasDeviceStatus_;
    /**
     * <code>optional uint32 gasDeviceStatus = 9;</code>
     */
    public boolean hasGasDeviceStatus() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 gasDeviceStatus = 9;</code>
     */
    public int getGasDeviceStatus() {
      return gasDeviceStatus_;
    }

    // optional uint32 gasDeviceOpState = 10;
    public static final int GASDEVICEOPSTATE_FIELD_NUMBER = 10;
    private int gasDeviceOpState_;
    /**
     * <code>optional uint32 gasDeviceOpState = 10;</code>
     */
    public boolean hasGasDeviceOpState() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 gasDeviceOpState = 10;</code>
     */
    public int getGasDeviceOpState() {
      return gasDeviceOpState_;
    }

    // optional uint32 gasDeviceComsDown = 11;
    public static final int GASDEVICECOMSDOWN_FIELD_NUMBER = 11;
    private int gasDeviceComsDown_;
    /**
     * <code>optional uint32 gasDeviceComsDown = 11;</code>
     */
    public boolean hasGasDeviceComsDown() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 gasDeviceComsDown = 11;</code>
     */
    public int getGasDeviceComsDown() {
      return gasDeviceComsDown_;
    }

    // optional uint32 gasDeviceCMD = 12;
    public static final int GASDEVICECMD_FIELD_NUMBER = 12;
    private int gasDeviceCMD_;
    /**
     * <code>optional uint32 gasDeviceCMD = 12;</code>
     */
    public boolean hasGasDeviceCMD() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 gasDeviceCMD = 12;</code>
     */
    public int getGasDeviceCMD() {
      return gasDeviceCMD_;
    }

    // optional uint32 gasDeviceSilentMode = 13;
    public static final int GASDEVICESILENTMODE_FIELD_NUMBER = 13;
    private int gasDeviceSilentMode_;
    /**
     * <code>optional uint32 gasDeviceSilentMode = 13;</code>
     */
    public boolean hasGasDeviceSilentMode() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint32 gasDeviceSilentMode = 13;</code>
     */
    public int getGasDeviceSilentMode() {
      return gasDeviceSilentMode_;
    }

    private void initFields() {
      gasDevClass_ = 0;
      gasDensity_ = 0;
      gasDensityL1_ = 0;
      gasDensityL2_ = 0;
      gasDensityL3_ = 0;
      gasDisassembly_ = 0;
      gasLosePwr_ = 0;
      gasEMValve_ = 0;
      gasDeviceStatus_ = 0;
      gasDeviceOpState_ = 0;
      gasDeviceComsDown_ = 0;
      gasDeviceCMD_ = 0;
      gasDeviceSilentMode_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, gasDevClass_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, gasDensity_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, gasDensityL1_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, gasDensityL2_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, gasDensityL3_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, gasDisassembly_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, gasLosePwr_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, gasEMValve_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, gasDeviceStatus_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, gasDeviceOpState_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(11, gasDeviceComsDown_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(12, gasDeviceCMD_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(13, gasDeviceSilentMode_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, gasDevClass_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, gasDensity_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, gasDensityL1_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, gasDensityL2_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, gasDensityL3_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, gasDisassembly_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, gasLosePwr_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, gasEMValve_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, gasDeviceStatus_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, gasDeviceOpState_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, gasDeviceComsDown_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, gasDeviceCMD_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, gasDeviceSilentMode_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static Baymax parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Baymax parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Baymax parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Baymax parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Baymax parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Baymax parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static Baymax parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static Baymax parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static Baymax parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Baymax parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Baymax prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Baymax}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements BaymaxOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_Baymax_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_Baymax_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Baymax.class, Builder.class);
      }

      // Construct using MsgNode1V1M32.Baymax.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        gasDevClass_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        gasDensity_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        gasDensityL1_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        gasDensityL2_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        gasDensityL3_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        gasDisassembly_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        gasLosePwr_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        gasEMValve_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        gasDeviceStatus_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        gasDeviceOpState_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        gasDeviceComsDown_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        gasDeviceCMD_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        gasDeviceSilentMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_Baymax_descriptor;
      }

      public Baymax getDefaultInstanceForType() {
        return Baymax.getDefaultInstance();
      }

      public Baymax build() {
        Baymax result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Baymax buildPartial() {
        Baymax result = new Baymax(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.gasDevClass_ = gasDevClass_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.gasDensity_ = gasDensity_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gasDensityL1_ = gasDensityL1_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.gasDensityL2_ = gasDensityL2_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.gasDensityL3_ = gasDensityL3_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.gasDisassembly_ = gasDisassembly_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.gasLosePwr_ = gasLosePwr_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.gasEMValve_ = gasEMValve_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.gasDeviceStatus_ = gasDeviceStatus_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.gasDeviceOpState_ = gasDeviceOpState_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.gasDeviceComsDown_ = gasDeviceComsDown_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.gasDeviceCMD_ = gasDeviceCMD_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.gasDeviceSilentMode_ = gasDeviceSilentMode_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Baymax) {
          return mergeFrom((Baymax)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Baymax other) {
        if (other == Baymax.getDefaultInstance()) return this;
        if (other.hasGasDevClass()) {
          setGasDevClass(other.getGasDevClass());
        }
        if (other.hasGasDensity()) {
          setGasDensity(other.getGasDensity());
        }
        if (other.hasGasDensityL1()) {
          setGasDensityL1(other.getGasDensityL1());
        }
        if (other.hasGasDensityL2()) {
          setGasDensityL2(other.getGasDensityL2());
        }
        if (other.hasGasDensityL3()) {
          setGasDensityL3(other.getGasDensityL3());
        }
        if (other.hasGasDisassembly()) {
          setGasDisassembly(other.getGasDisassembly());
        }
        if (other.hasGasLosePwr()) {
          setGasLosePwr(other.getGasLosePwr());
        }
        if (other.hasGasEMValve()) {
          setGasEMValve(other.getGasEMValve());
        }
        if (other.hasGasDeviceStatus()) {
          setGasDeviceStatus(other.getGasDeviceStatus());
        }
        if (other.hasGasDeviceOpState()) {
          setGasDeviceOpState(other.getGasDeviceOpState());
        }
        if (other.hasGasDeviceComsDown()) {
          setGasDeviceComsDown(other.getGasDeviceComsDown());
        }
        if (other.hasGasDeviceCMD()) {
          setGasDeviceCMD(other.getGasDeviceCMD());
        }
        if (other.hasGasDeviceSilentMode()) {
          setGasDeviceSilentMode(other.getGasDeviceSilentMode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Baymax parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Baymax) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 gasDevClass = 1;
      private int gasDevClass_ ;
      /**
       * <code>optional uint32 gasDevClass = 1;</code>
       */
      public boolean hasGasDevClass() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 gasDevClass = 1;</code>
       */
      public int getGasDevClass() {
        return gasDevClass_;
      }
      /**
       * <code>optional uint32 gasDevClass = 1;</code>
       */
      public Builder setGasDevClass(int value) {
        bitField0_ |= 0x00000001;
        gasDevClass_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 gasDevClass = 1;</code>
       */
      public Builder clearGasDevClass() {
        bitField0_ = (bitField0_ & ~0x00000001);
        gasDevClass_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 gasDensity = 2;
      private int gasDensity_ ;
      /**
       * <code>optional uint32 gasDensity = 2;</code>
       */
      public boolean hasGasDensity() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 gasDensity = 2;</code>
       */
      public int getGasDensity() {
        return gasDensity_;
      }
      /**
       * <code>optional uint32 gasDensity = 2;</code>
       */
      public Builder setGasDensity(int value) {
        bitField0_ |= 0x00000002;
        gasDensity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 gasDensity = 2;</code>
       */
      public Builder clearGasDensity() {
        bitField0_ = (bitField0_ & ~0x00000002);
        gasDensity_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 gasDensityL1 = 3;
      private int gasDensityL1_ ;
      /**
       * <code>optional uint32 gasDensityL1 = 3;</code>
       */
      public boolean hasGasDensityL1() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 gasDensityL1 = 3;</code>
       */
      public int getGasDensityL1() {
        return gasDensityL1_;
      }
      /**
       * <code>optional uint32 gasDensityL1 = 3;</code>
       */
      public Builder setGasDensityL1(int value) {
        bitField0_ |= 0x00000004;
        gasDensityL1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 gasDensityL1 = 3;</code>
       */
      public Builder clearGasDensityL1() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gasDensityL1_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 gasDensityL2 = 4;
      private int gasDensityL2_ ;
      /**
       * <code>optional uint32 gasDensityL2 = 4;</code>
       */
      public boolean hasGasDensityL2() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 gasDensityL2 = 4;</code>
       */
      public int getGasDensityL2() {
        return gasDensityL2_;
      }
      /**
       * <code>optional uint32 gasDensityL2 = 4;</code>
       */
      public Builder setGasDensityL2(int value) {
        bitField0_ |= 0x00000008;
        gasDensityL2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 gasDensityL2 = 4;</code>
       */
      public Builder clearGasDensityL2() {
        bitField0_ = (bitField0_ & ~0x00000008);
        gasDensityL2_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 gasDensityL3 = 5;
      private int gasDensityL3_ ;
      /**
       * <code>optional uint32 gasDensityL3 = 5;</code>
       */
      public boolean hasGasDensityL3() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 gasDensityL3 = 5;</code>
       */
      public int getGasDensityL3() {
        return gasDensityL3_;
      }
      /**
       * <code>optional uint32 gasDensityL3 = 5;</code>
       */
      public Builder setGasDensityL3(int value) {
        bitField0_ |= 0x00000010;
        gasDensityL3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 gasDensityL3 = 5;</code>
       */
      public Builder clearGasDensityL3() {
        bitField0_ = (bitField0_ & ~0x00000010);
        gasDensityL3_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 gasDisassembly = 6;
      private int gasDisassembly_ ;
      /**
       * <code>optional uint32 gasDisassembly = 6;</code>
       */
      public boolean hasGasDisassembly() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 gasDisassembly = 6;</code>
       */
      public int getGasDisassembly() {
        return gasDisassembly_;
      }
      /**
       * <code>optional uint32 gasDisassembly = 6;</code>
       */
      public Builder setGasDisassembly(int value) {
        bitField0_ |= 0x00000020;
        gasDisassembly_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 gasDisassembly = 6;</code>
       */
      public Builder clearGasDisassembly() {
        bitField0_ = (bitField0_ & ~0x00000020);
        gasDisassembly_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 gasLosePwr = 7;
      private int gasLosePwr_ ;
      /**
       * <code>optional uint32 gasLosePwr = 7;</code>
       */
      public boolean hasGasLosePwr() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 gasLosePwr = 7;</code>
       */
      public int getGasLosePwr() {
        return gasLosePwr_;
      }
      /**
       * <code>optional uint32 gasLosePwr = 7;</code>
       */
      public Builder setGasLosePwr(int value) {
        bitField0_ |= 0x00000040;
        gasLosePwr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 gasLosePwr = 7;</code>
       */
      public Builder clearGasLosePwr() {
        bitField0_ = (bitField0_ & ~0x00000040);
        gasLosePwr_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 gasEMValve = 8;
      private int gasEMValve_ ;
      /**
       * <code>optional uint32 gasEMValve = 8;</code>
       */
      public boolean hasGasEMValve() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 gasEMValve = 8;</code>
       */
      public int getGasEMValve() {
        return gasEMValve_;
      }
      /**
       * <code>optional uint32 gasEMValve = 8;</code>
       */
      public Builder setGasEMValve(int value) {
        bitField0_ |= 0x00000080;
        gasEMValve_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 gasEMValve = 8;</code>
       */
      public Builder clearGasEMValve() {
        bitField0_ = (bitField0_ & ~0x00000080);
        gasEMValve_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 gasDeviceStatus = 9;
      private int gasDeviceStatus_ ;
      /**
       * <code>optional uint32 gasDeviceStatus = 9;</code>
       */
      public boolean hasGasDeviceStatus() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 gasDeviceStatus = 9;</code>
       */
      public int getGasDeviceStatus() {
        return gasDeviceStatus_;
      }
      /**
       * <code>optional uint32 gasDeviceStatus = 9;</code>
       */
      public Builder setGasDeviceStatus(int value) {
        bitField0_ |= 0x00000100;
        gasDeviceStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 gasDeviceStatus = 9;</code>
       */
      public Builder clearGasDeviceStatus() {
        bitField0_ = (bitField0_ & ~0x00000100);
        gasDeviceStatus_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 gasDeviceOpState = 10;
      private int gasDeviceOpState_ ;
      /**
       * <code>optional uint32 gasDeviceOpState = 10;</code>
       */
      public boolean hasGasDeviceOpState() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 gasDeviceOpState = 10;</code>
       */
      public int getGasDeviceOpState() {
        return gasDeviceOpState_;
      }
      /**
       * <code>optional uint32 gasDeviceOpState = 10;</code>
       */
      public Builder setGasDeviceOpState(int value) {
        bitField0_ |= 0x00000200;
        gasDeviceOpState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 gasDeviceOpState = 10;</code>
       */
      public Builder clearGasDeviceOpState() {
        bitField0_ = (bitField0_ & ~0x00000200);
        gasDeviceOpState_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 gasDeviceComsDown = 11;
      private int gasDeviceComsDown_ ;
      /**
       * <code>optional uint32 gasDeviceComsDown = 11;</code>
       */
      public boolean hasGasDeviceComsDown() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 gasDeviceComsDown = 11;</code>
       */
      public int getGasDeviceComsDown() {
        return gasDeviceComsDown_;
      }
      /**
       * <code>optional uint32 gasDeviceComsDown = 11;</code>
       */
      public Builder setGasDeviceComsDown(int value) {
        bitField0_ |= 0x00000400;
        gasDeviceComsDown_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 gasDeviceComsDown = 11;</code>
       */
      public Builder clearGasDeviceComsDown() {
        bitField0_ = (bitField0_ & ~0x00000400);
        gasDeviceComsDown_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 gasDeviceCMD = 12;
      private int gasDeviceCMD_ ;
      /**
       * <code>optional uint32 gasDeviceCMD = 12;</code>
       */
      public boolean hasGasDeviceCMD() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 gasDeviceCMD = 12;</code>
       */
      public int getGasDeviceCMD() {
        return gasDeviceCMD_;
      }
      /**
       * <code>optional uint32 gasDeviceCMD = 12;</code>
       */
      public Builder setGasDeviceCMD(int value) {
        bitField0_ |= 0x00000800;
        gasDeviceCMD_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 gasDeviceCMD = 12;</code>
       */
      public Builder clearGasDeviceCMD() {
        bitField0_ = (bitField0_ & ~0x00000800);
        gasDeviceCMD_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 gasDeviceSilentMode = 13;
      private int gasDeviceSilentMode_ ;
      /**
       * <code>optional uint32 gasDeviceSilentMode = 13;</code>
       */
      public boolean hasGasDeviceSilentMode() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 gasDeviceSilentMode = 13;</code>
       */
      public int getGasDeviceSilentMode() {
        return gasDeviceSilentMode_;
      }
      /**
       * <code>optional uint32 gasDeviceSilentMode = 13;</code>
       */
      public Builder setGasDeviceSilentMode(int value) {
        bitField0_ |= 0x00001000;
        gasDeviceSilentMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 gasDeviceSilentMode = 13;</code>
       */
      public Builder clearGasDeviceSilentMode() {
        bitField0_ = (bitField0_ & ~0x00001000);
        gasDeviceSilentMode_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Baymax)
    }

    static {
      defaultInstance = new Baymax(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Baymax)
  }

  public interface MsgNodeOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 id = 1;
    /**
     * <code>optional uint32 id = 1;</code>
     *
     * <pre>
     * 任务id (上|下)
     * </pre>
     */
    boolean hasId();
    /**
     * <code>optional uint32 id = 1;</code>
     *
     * <pre>
     * 任务id (上|下)
     * </pre>
     */
    int getId();

    // optional uint32 cmd = 2;
    /**
     * <code>optional uint32 cmd = 2;</code>
     *
     * <pre>
     * 任务类型(没用)
     * </pre>
     */
    boolean hasCmd();
    /**
     * <code>optional uint32 cmd = 2;</code>
     *
     * <pre>
     * 任务类型(没用)
     * </pre>
     */
    int getCmd();

    // optional uint32 cmdRet = 3;
    /**
     * <code>optional uint32 cmdRet = 3;</code>
     *
     * <pre>
     * 任务返回 (上)
     * </pre>
     */
    boolean hasCmdRet();
    /**
     * <code>optional uint32 cmdRet = 3;</code>
     *
     * <pre>
     * 任务返回 (上)
     * </pre>
     */
    int getCmdRet();

    // optional .LpwanParam lpwanParam = 4;
    /**
     * <code>optional .LpwanParam lpwanParam = 4;</code>
     *
     * <pre>
     * lpwan 参数 (上|下)
     * </pre>
     */
    boolean hasLpwanParam();
    /**
     * <code>optional .LpwanParam lpwanParam = 4;</code>
     *
     * <pre>
     * lpwan 参数 (上|下)
     * </pre>
     */
    LpwanParam getLpwanParam();
    /**
     * <code>optional .LpwanParam lpwanParam = 4;</code>
     *
     * <pre>
     * lpwan 参数 (上|下)
     * </pre>
     */
    LpwanParamOrBuilder getLpwanParamOrBuilder();

    // optional .BleParam bleParam = 5;
    /**
     * <code>optional .BleParam bleParam = 5;</code>
     *
     * <pre>
     * ble 参数 (上|下)
     * </pre>
     */
    boolean hasBleParam();
    /**
     * <code>optional .BleParam bleParam = 5;</code>
     *
     * <pre>
     * ble 参数 (上|下)
     * </pre>
     */
    BleParam getBleParam();
    /**
     * <code>optional .BleParam bleParam = 5;</code>
     *
     * <pre>
     * ble 参数 (上|下)
     * </pre>
     */
    BleParamOrBuilder getBleParamOrBuilder();

    // optional .AppParam appParam = 6;
    /**
     * <code>optional .AppParam appParam = 6;</code>
     *
     * <pre>
     * 应用参数 (上|下)
     * </pre>
     */
    boolean hasAppParam();
    /**
     * <code>optional .AppParam appParam = 6;</code>
     *
     * <pre>
     * 应用参数 (上|下)
     * </pre>
     */
    AppParam getAppParam();
    /**
     * <code>optional .AppParam appParam = 6;</code>
     *
     * <pre>
     * 应用参数 (上|下)
     * </pre>
     */
    AppParamOrBuilder getAppParamOrBuilder();

    // optional sint32 battery = 7;
    /**
     * <code>optional sint32 battery = 7;</code>
     *
     * <pre>
     * 电量 (上)
     * </pre>
     */
    boolean hasBattery();
    /**
     * <code>optional sint32 battery = 7;</code>
     *
     * <pre>
     * 电量 (上)
     * </pre>
     */
    int getBattery();

    // optional .GpsData gps = 8;
    /**
     * <code>optional .GpsData gps = 8;</code>
     */
    boolean hasGps();
    /**
     * <code>optional .GpsData gps = 8;</code>
     */
    GpsData getGps();
    /**
     * <code>optional .GpsData gps = 8;</code>
     */
    GpsDataOrBuilder getGpsOrBuilder();

    // optional .AxisData acceleration = 9;
    /**
     * <code>optional .AxisData acceleration = 9;</code>
     */
    boolean hasAcceleration();
    /**
     * <code>optional .AxisData acceleration = 9;</code>
     */
    AxisData getAcceleration();
    /**
     * <code>optional .AxisData acceleration = 9;</code>
     */
    AxisDataOrBuilder getAccelerationOrBuilder();

    // optional .AxisData magnetism = 10;
    /**
     * <code>optional .AxisData magnetism = 10;</code>
     */
    boolean hasMagnetism();
    /**
     * <code>optional .AxisData magnetism = 10;</code>
     */
    AxisData getMagnetism();
    /**
     * <code>optional .AxisData magnetism = 10;</code>
     */
    AxisDataOrBuilder getMagnetismOrBuilder();

    // optional .AxisData gyroscope = 11;
    /**
     * <code>optional .AxisData gyroscope = 11;</code>
     */
    boolean hasGyroscope();
    /**
     * <code>optional .AxisData gyroscope = 11;</code>
     */
    AxisData getGyroscope();
    /**
     * <code>optional .AxisData gyroscope = 11;</code>
     */
    AxisDataOrBuilder getGyroscopeOrBuilder();

    // optional .SensorData temperature = 12;
    /**
     * <code>optional .SensorData temperature = 12;</code>
     *
     * <pre>
     * 温度
     * </pre>
     */
    boolean hasTemperature();
    /**
     * <code>optional .SensorData temperature = 12;</code>
     *
     * <pre>
     * 温度
     * </pre>
     */
    SensorData getTemperature();
    /**
     * <code>optional .SensorData temperature = 12;</code>
     *
     * <pre>
     * 温度
     * </pre>
     */
    SensorDataOrBuilder getTemperatureOrBuilder();

    // optional .SensorData humidity = 13;
    /**
     * <code>optional .SensorData humidity = 13;</code>
     *
     * <pre>
     * 湿度
     * </pre>
     */
    boolean hasHumidity();
    /**
     * <code>optional .SensorData humidity = 13;</code>
     *
     * <pre>
     * 湿度
     * </pre>
     */
    SensorData getHumidity();
    /**
     * <code>optional .SensorData humidity = 13;</code>
     *
     * <pre>
     * 湿度
     * </pre>
     */
    SensorDataOrBuilder getHumidityOrBuilder();

    // optional .SensorData light = 14;
    /**
     * <code>optional .SensorData light = 14;</code>
     *
     * <pre>
     * 光
     * </pre>
     */
    boolean hasLight();
    /**
     * <code>optional .SensorData light = 14;</code>
     *
     * <pre>
     * 光
     * </pre>
     */
    SensorData getLight();
    /**
     * <code>optional .SensorData light = 14;</code>
     *
     * <pre>
     * 光
     * </pre>
     */
    SensorDataOrBuilder getLightOrBuilder();

    // optional .SensorData leak = 15;
    /**
     * <code>optional .SensorData leak = 15;</code>
     */
    boolean hasLeak();
    /**
     * <code>optional .SensorData leak = 15;</code>
     */
    SensorData getLeak();
    /**
     * <code>optional .SensorData leak = 15;</code>
     */
    SensorDataOrBuilder getLeakOrBuilder();

    // optional .SensorData co = 16;
    /**
     * <code>optional .SensorData co = 16;</code>
     */
    boolean hasCo();
    /**
     * <code>optional .SensorData co = 16;</code>
     */
    SensorData getCo();
    /**
     * <code>optional .SensorData co = 16;</code>
     */
    SensorDataOrBuilder getCoOrBuilder();

    // optional .SensorData co2 = 17;
    /**
     * <code>optional .SensorData co2 = 17;</code>
     */
    boolean hasCo2();
    /**
     * <code>optional .SensorData co2 = 17;</code>
     */
    SensorData getCo2();
    /**
     * <code>optional .SensorData co2 = 17;</code>
     */
    SensorDataOrBuilder getCo2OrBuilder();

    // optional .SensorData so2 = 18;
    /**
     * <code>optional .SensorData so2 = 18;</code>
     */
    boolean hasSo2();
    /**
     * <code>optional .SensorData so2 = 18;</code>
     */
    SensorData getSo2();
    /**
     * <code>optional .SensorData so2 = 18;</code>
     */
    SensorDataOrBuilder getSo2OrBuilder();

    // optional .SensorData no2 = 19;
    /**
     * <code>optional .SensorData no2 = 19;</code>
     */
    boolean hasNo2();
    /**
     * <code>optional .SensorData no2 = 19;</code>
     */
    SensorData getNo2();
    /**
     * <code>optional .SensorData no2 = 19;</code>
     */
    SensorDataOrBuilder getNo2OrBuilder();

    // optional .SensorData ch4 = 20;
    /**
     * <code>optional .SensorData ch4 = 20;</code>
     */
    boolean hasCh4();
    /**
     * <code>optional .SensorData ch4 = 20;</code>
     */
    SensorData getCh4();
    /**
     * <code>optional .SensorData ch4 = 20;</code>
     */
    SensorDataOrBuilder getCh4OrBuilder();

    // optional .SensorData ch2o = 21;
    /**
     * <code>optional .SensorData ch2o = 21;</code>
     */
    boolean hasCh2O();
    /**
     * <code>optional .SensorData ch2o = 21;</code>
     */
    SensorData getCh2O();
    /**
     * <code>optional .SensorData ch2o = 21;</code>
     */
    SensorDataOrBuilder getCh2OOrBuilder();

    // optional .SensorData lpg = 22;
    /**
     * <code>optional .SensorData lpg = 22;</code>
     */
    boolean hasLpg();
    /**
     * <code>optional .SensorData lpg = 22;</code>
     */
    SensorData getLpg();
    /**
     * <code>optional .SensorData lpg = 22;</code>
     */
    SensorDataOrBuilder getLpgOrBuilder();

    // optional .SensorData o3 = 23;
    /**
     * <code>optional .SensorData o3 = 23;</code>
     */
    boolean hasO3();
    /**
     * <code>optional .SensorData o3 = 23;</code>
     */
    SensorData getO3();
    /**
     * <code>optional .SensorData o3 = 23;</code>
     */
    SensorDataOrBuilder getO3OrBuilder();

    // optional .SensorData pm1 = 24;
    /**
     * <code>optional .SensorData pm1 = 24;</code>
     */
    boolean hasPm1();
    /**
     * <code>optional .SensorData pm1 = 24;</code>
     */
    SensorData getPm1();
    /**
     * <code>optional .SensorData pm1 = 24;</code>
     */
    SensorDataOrBuilder getPm1OrBuilder();

    // optional .SensorData pm2_5 = 25;
    /**
     * <code>optional .SensorData pm2_5 = 25;</code>
     */
    boolean hasPm25();
    /**
     * <code>optional .SensorData pm2_5 = 25;</code>
     */
    SensorData getPm25();
    /**
     * <code>optional .SensorData pm2_5 = 25;</code>
     */
    SensorDataOrBuilder getPm25OrBuilder();

    // optional .SensorData pm10 = 26;
    /**
     * <code>optional .SensorData pm10 = 26;</code>
     */
    boolean hasPm10();
    /**
     * <code>optional .SensorData pm10 = 26;</code>
     */
    SensorData getPm10();
    /**
     * <code>optional .SensorData pm10 = 26;</code>
     */
    SensorDataOrBuilder getPm10OrBuilder();

    // optional .SensorData angle = 27;
    /**
     * <code>optional .SensorData angle = 27;</code>
     */
    boolean hasAngle();
    /**
     * <code>optional .SensorData angle = 27;</code>
     */
    SensorData getAngle();
    /**
     * <code>optional .SensorData angle = 27;</code>
     */
    SensorDataOrBuilder getAngleOrBuilder();

    // optional .SensorData cover = 28;
    /**
     * <code>optional .SensorData cover = 28;</code>
     */
    boolean hasCover();
    /**
     * <code>optional .SensorData cover = 28;</code>
     */
    SensorData getCover();
    /**
     * <code>optional .SensorData cover = 28;</code>
     */
    SensorDataOrBuilder getCoverOrBuilder();

    // optional .SensorData level = 29;
    /**
     * <code>optional .SensorData level = 29;</code>
     */
    boolean hasLevel();
    /**
     * <code>optional .SensorData level = 29;</code>
     */
    SensorData getLevel();
    /**
     * <code>optional .SensorData level = 29;</code>
     */
    SensorDataOrBuilder getLevelOrBuilder();

    // optional .SensorData smoke = 30;
    /**
     * <code>optional .SensorData smoke = 30;</code>
     */
    boolean hasSmoke();
    /**
     * <code>optional .SensorData smoke = 30;</code>
     */
    SensorData getSmoke();
    /**
     * <code>optional .SensorData smoke = 30;</code>
     */
    SensorDataOrBuilder getSmokeOrBuilder();

    // optional .SensorData pitch = 31;
    /**
     * <code>optional .SensorData pitch = 31;</code>
     */
    boolean hasPitch();
    /**
     * <code>optional .SensorData pitch = 31;</code>
     */
    SensorData getPitch();
    /**
     * <code>optional .SensorData pitch = 31;</code>
     */
    SensorDataOrBuilder getPitchOrBuilder();

    // optional .SensorData roll = 32;
    /**
     * <code>optional .SensorData roll = 32;</code>
     */
    boolean hasRoll();
    /**
     * <code>optional .SensorData roll = 32;</code>
     */
    SensorData getRoll();
    /**
     * <code>optional .SensorData roll = 32;</code>
     */
    SensorDataOrBuilder getRollOrBuilder();

    // optional .SensorData yaw = 33;
    /**
     * <code>optional .SensorData yaw = 33;</code>
     */
    boolean hasYaw();
    /**
     * <code>optional .SensorData yaw = 33;</code>
     */
    SensorData getYaw();
    /**
     * <code>optional .SensorData yaw = 33;</code>
     */
    SensorDataOrBuilder getYawOrBuilder();

    // optional .SensorDataInt flame = 34;
    /**
     * <code>optional .SensorDataInt flame = 34;</code>
     */
    boolean hasFlame();
    /**
     * <code>optional .SensorDataInt flame = 34;</code>
     */
    SensorDataInt getFlame();
    /**
     * <code>optional .SensorDataInt flame = 34;</code>
     */
    SensorDataIntOrBuilder getFlameOrBuilder();

    // optional .SensorData artificialGas = 35;
    /**
     * <code>optional .SensorData artificialGas = 35;</code>
     */
    boolean hasArtificialGas();
    /**
     * <code>optional .SensorData artificialGas = 35;</code>
     */
    SensorData getArtificialGas();
    /**
     * <code>optional .SensorData artificialGas = 35;</code>
     */
    SensorDataOrBuilder getArtificialGasOrBuilder();

    // optional .MultiSensorDataInt multiTemp = 36;
    /**
     * <code>optional .MultiSensorDataInt multiTemp = 36;</code>
     */
    boolean hasMultiTemp();
    /**
     * <code>optional .MultiSensorDataInt multiTemp = 36;</code>
     */
    MultiSensorDataInt getMultiTemp();
    /**
     * <code>optional .MultiSensorDataInt multiTemp = 36;</code>
     */
    MultiSensorDataIntOrBuilder getMultiTempOrBuilder();

    // optional .SensorData waterPressure = 37;
    /**
     * <code>optional .SensorData waterPressure = 37;</code>
     */
    boolean hasWaterPressure();
    /**
     * <code>optional .SensorData waterPressure = 37;</code>
     */
    SensorData getWaterPressure();
    /**
     * <code>optional .SensorData waterPressure = 37;</code>
     */
    SensorDataOrBuilder getWaterPressureOrBuilder();

    // optional .iBeacon ibeacon = 38;
    /**
     * <code>optional .iBeacon ibeacon = 38;</code>
     *
     * <pre>
     * ibeacon 配置 (上|下)
     * </pre>
     */
    boolean hasIbeacon();
    /**
     * <code>optional .iBeacon ibeacon = 38;</code>
     *
     * <pre>
     * ibeacon 配置 (上|下)
     * </pre>
     */
    iBeacon getIbeacon();
    /**
     * <code>optional .iBeacon ibeacon = 38;</code>
     *
     * <pre>
     * ibeacon 配置 (上|下)
     * </pre>
     */
    iBeaconOrBuilder getIbeaconOrBuilder();

    // repeated .SensorData sensors = 39;
    /**
     * <code>repeated .SensorData sensors = 39;</code>
     */
    java.util.List<SensorData>
        getSensorsList();
    /**
     * <code>repeated .SensorData sensors = 39;</code>
     */
    SensorData getSensors(int index);
    /**
     * <code>repeated .SensorData sensors = 39;</code>
     */
    int getSensorsCount();
    /**
     * <code>repeated .SensorData sensors = 39;</code>
     */
    java.util.List<? extends SensorDataOrBuilder>
        getSensorsOrBuilderList();
    /**
     * <code>repeated .SensorData sensors = 39;</code>
     */
    SensorDataOrBuilder getSensorsOrBuilder(
            int index);

    // optional bool installed = 40;
    /**
     * <code>optional bool installed = 40;</code>
     *
     * <pre>
     * 安装状态 (上)
     * </pre>
     */
    boolean hasInstalled();
    /**
     * <code>optional bool installed = 40;</code>
     *
     * <pre>
     * 安装状态 (上)
     * </pre>
     */
    boolean getInstalled();

    // optional .ExtSmoke extSmoke = 41;
    /**
     * <code>optional .ExtSmoke extSmoke = 41;</code>
     *
     * <pre>
     * H605/N16W 烟感专用字段
     * </pre>
     */
    boolean hasExtSmoke();
    /**
     * <code>optional .ExtSmoke extSmoke = 41;</code>
     *
     * <pre>
     * H605/N16W 烟感专用字段
     * </pre>
     */
    ExtSmoke getExtSmoke();
    /**
     * <code>optional .ExtSmoke extSmoke = 41;</code>
     *
     * <pre>
     * H605/N16W 烟感专用字段
     * </pre>
     */
    ExtSmokeOrBuilder getExtSmokeOrBuilder();

    // optional .ElecFireData fireData = 42;
    /**
     * <code>optional .ElecFireData fireData = 42;</code>
     *
     * <pre>
     * FHSJ 电气火灾专用字段
     * </pre>
     */
    boolean hasFireData();
    /**
     * <code>optional .ElecFireData fireData = 42;</code>
     *
     * <pre>
     * FHSJ 电气火灾专用字段
     * </pre>
     */
    ElecFireData getFireData();
    /**
     * <code>optional .ElecFireData fireData = 42;</code>
     *
     * <pre>
     * FHSJ 电气火灾专用字段
     * </pre>
     */
    ElecFireDataOrBuilder getFireDataOrBuilder();

    // repeated .MantunData mtunData = 43;
    /**
     * <code>repeated .MantunData mtunData = 43;</code>
     *
     * <pre>
     * Mantun 空开专用字段
     * </pre>
     */
    java.util.List<MantunData>
        getMtunDataList();
    /**
     * <code>repeated .MantunData mtunData = 43;</code>
     *
     * <pre>
     * Mantun 空开专用字段
     * </pre>
     */
    MantunData getMtunData(int index);
    /**
     * <code>repeated .MantunData mtunData = 43;</code>
     *
     * <pre>
     * Mantun 空开专用字段
     * </pre>
     */
    int getMtunDataCount();
    /**
     * <code>repeated .MantunData mtunData = 43;</code>
     *
     * <pre>
     * Mantun 空开专用字段
     * </pre>
     */
    java.util.List<? extends MantunDataOrBuilder>
        getMtunDataOrBuilderList();
    /**
     * <code>repeated .MantunData mtunData = 43;</code>
     *
     * <pre>
     * Mantun 空开专用字段
     * </pre>
     */
    MantunDataOrBuilder getMtunDataOrBuilder(
            int index);

    // optional .AcrelData acrelData = 44;
    /**
     * <code>optional .AcrelData acrelData = 44;</code>
     *
     * <pre>
     * Acrel 电气火灾专用字段
     * </pre>
     */
    boolean hasAcrelData();
    /**
     * <code>optional .AcrelData acrelData = 44;</code>
     *
     * <pre>
     * Acrel 电气火灾专用字段
     * </pre>
     */
    AcrelData getAcrelData();
    /**
     * <code>optional .AcrelData acrelData = 44;</code>
     *
     * <pre>
     * Acrel 电气火灾专用字段
     * </pre>
     */
    AcrelDataOrBuilder getAcrelDataOrBuilder();

    // optional .Cayman caymanData = 45;
    /**
     * <code>optional .Cayman caymanData = 45;</code>
     *
     * <pre>
     * Cayman 烟感专用字段
     * </pre>
     */
    boolean hasCaymanData();
    /**
     * <code>optional .Cayman caymanData = 45;</code>
     *
     * <pre>
     * Cayman 烟感专用字段
     * </pre>
     */
    Cayman getCaymanData();
    /**
     * <code>optional .Cayman caymanData = 45;</code>
     *
     * <pre>
     * Cayman 烟感专用字段
     * </pre>
     */
    CaymanOrBuilder getCaymanDataOrBuilder();

    // optional .Baymax baymaxData = 46;
    /**
     * <code>optional .Baymax baymaxData = 46;</code>
     *
     * <pre>
     * Baymax 气感专用字段
     * </pre>
     */
    boolean hasBaymaxData();
    /**
     * <code>optional .Baymax baymaxData = 46;</code>
     *
     * <pre>
     * Baymax 气感专用字段
     * </pre>
     */
    Baymax getBaymaxData();
    /**
     * <code>optional .Baymax baymaxData = 46;</code>
     *
     * <pre>
     * Baymax 气感专用字段
     * </pre>
     */
    BaymaxOrBuilder getBaymaxDataOrBuilder();
  }
  /**
   * Protobuf type {@code MsgNode}
   */
  public static final class MsgNode extends
      com.google.protobuf.GeneratedMessage
      implements MsgNodeOrBuilder {
    // Use MsgNode.newBuilder() to construct.
    private MsgNode(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MsgNode(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MsgNode defaultInstance;
    public static MsgNode getDefaultInstance() {
      return defaultInstance;
    }

    public MsgNode getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MsgNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              cmd_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              cmdRet_ = input.readUInt32();
              break;
            }
            case 34: {
              LpwanParam.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = lpwanParam_.toBuilder();
              }
              lpwanParam_ = input.readMessage(LpwanParam.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lpwanParam_);
                lpwanParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              BleParam.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = bleParam_.toBuilder();
              }
              bleParam_ = input.readMessage(BleParam.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(bleParam_);
                bleParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              AppParam.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = appParam_.toBuilder();
              }
              appParam_ = input.readMessage(AppParam.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(appParam_);
                appParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              battery_ = input.readSInt32();
              break;
            }
            case 66: {
              GpsData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = gps_.toBuilder();
              }
              gps_ = input.readMessage(GpsData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(gps_);
                gps_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              AxisData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = acceleration_.toBuilder();
              }
              acceleration_ = input.readMessage(AxisData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(acceleration_);
                acceleration_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 82: {
              AxisData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = magnetism_.toBuilder();
              }
              magnetism_ = input.readMessage(AxisData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(magnetism_);
                magnetism_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 90: {
              AxisData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = gyroscope_.toBuilder();
              }
              gyroscope_ = input.readMessage(AxisData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(gyroscope_);
                gyroscope_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 98: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = temperature_.toBuilder();
              }
              temperature_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(temperature_);
                temperature_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
            case 106: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00001000) == 0x00001000)) {
                subBuilder = humidity_.toBuilder();
              }
              humidity_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(humidity_);
                humidity_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00001000;
              break;
            }
            case 114: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00002000) == 0x00002000)) {
                subBuilder = light_.toBuilder();
              }
              light_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(light_);
                light_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00002000;
              break;
            }
            case 122: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00004000) == 0x00004000)) {
                subBuilder = leak_.toBuilder();
              }
              leak_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(leak_);
                leak_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00004000;
              break;
            }
            case 130: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00008000) == 0x00008000)) {
                subBuilder = co_.toBuilder();
              }
              co_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(co_);
                co_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00008000;
              break;
            }
            case 138: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00010000) == 0x00010000)) {
                subBuilder = co2_.toBuilder();
              }
              co2_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(co2_);
                co2_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00010000;
              break;
            }
            case 146: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00020000) == 0x00020000)) {
                subBuilder = so2_.toBuilder();
              }
              so2_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(so2_);
                so2_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00020000;
              break;
            }
            case 154: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00040000) == 0x00040000)) {
                subBuilder = no2_.toBuilder();
              }
              no2_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(no2_);
                no2_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00040000;
              break;
            }
            case 162: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00080000) == 0x00080000)) {
                subBuilder = ch4_.toBuilder();
              }
              ch4_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ch4_);
                ch4_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00080000;
              break;
            }
            case 170: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00100000) == 0x00100000)) {
                subBuilder = ch2O_.toBuilder();
              }
              ch2O_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ch2O_);
                ch2O_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00100000;
              break;
            }
            case 178: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00200000) == 0x00200000)) {
                subBuilder = lpg_.toBuilder();
              }
              lpg_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lpg_);
                lpg_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00200000;
              break;
            }
            case 186: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00400000) == 0x00400000)) {
                subBuilder = o3_.toBuilder();
              }
              o3_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(o3_);
                o3_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00400000;
              break;
            }
            case 194: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00800000) == 0x00800000)) {
                subBuilder = pm1_.toBuilder();
              }
              pm1_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(pm1_);
                pm1_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00800000;
              break;
            }
            case 202: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x01000000) == 0x01000000)) {
                subBuilder = pm25_.toBuilder();
              }
              pm25_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(pm25_);
                pm25_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x01000000;
              break;
            }
            case 210: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x02000000) == 0x02000000)) {
                subBuilder = pm10_.toBuilder();
              }
              pm10_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(pm10_);
                pm10_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x02000000;
              break;
            }
            case 218: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x04000000) == 0x04000000)) {
                subBuilder = angle_.toBuilder();
              }
              angle_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(angle_);
                angle_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x04000000;
              break;
            }
            case 226: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x08000000) == 0x08000000)) {
                subBuilder = cover_.toBuilder();
              }
              cover_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(cover_);
                cover_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x08000000;
              break;
            }
            case 234: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x10000000) == 0x10000000)) {
                subBuilder = level_.toBuilder();
              }
              level_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(level_);
                level_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x10000000;
              break;
            }
            case 242: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x20000000) == 0x20000000)) {
                subBuilder = smoke_.toBuilder();
              }
              smoke_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(smoke_);
                smoke_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x20000000;
              break;
            }
            case 250: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x40000000) == 0x40000000)) {
                subBuilder = pitch_.toBuilder();
              }
              pitch_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(pitch_);
                pitch_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x40000000;
              break;
            }
            case 258: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x80000000) == 0x80000000)) {
                subBuilder = roll_.toBuilder();
              }
              roll_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roll_);
                roll_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x80000000;
              break;
            }
            case 266: {
              SensorData.Builder subBuilder = null;
              if (((bitField1_ & 0x00000001) == 0x00000001)) {
                subBuilder = yaw_.toBuilder();
              }
              yaw_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(yaw_);
                yaw_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000001;
              break;
            }
            case 274: {
              SensorDataInt.Builder subBuilder = null;
              if (((bitField1_ & 0x00000002) == 0x00000002)) {
                subBuilder = flame_.toBuilder();
              }
              flame_ = input.readMessage(SensorDataInt.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(flame_);
                flame_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000002;
              break;
            }
            case 282: {
              SensorData.Builder subBuilder = null;
              if (((bitField1_ & 0x00000004) == 0x00000004)) {
                subBuilder = artificialGas_.toBuilder();
              }
              artificialGas_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(artificialGas_);
                artificialGas_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000004;
              break;
            }
            case 290: {
              MultiSensorDataInt.Builder subBuilder = null;
              if (((bitField1_ & 0x00000008) == 0x00000008)) {
                subBuilder = multiTemp_.toBuilder();
              }
              multiTemp_ = input.readMessage(MultiSensorDataInt.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(multiTemp_);
                multiTemp_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000008;
              break;
            }
            case 298: {
              SensorData.Builder subBuilder = null;
              if (((bitField1_ & 0x00000010) == 0x00000010)) {
                subBuilder = waterPressure_.toBuilder();
              }
              waterPressure_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(waterPressure_);
                waterPressure_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000010;
              break;
            }
            case 306: {
              iBeacon.Builder subBuilder = null;
              if (((bitField1_ & 0x00000020) == 0x00000020)) {
                subBuilder = ibeacon_.toBuilder();
              }
              ibeacon_ = input.readMessage(iBeacon.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ibeacon_);
                ibeacon_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000020;
              break;
            }
            case 314: {
              if (!((mutable_bitField1_ & 0x00000040) == 0x00000040)) {
                sensors_ = new java.util.ArrayList<SensorData>();
                mutable_bitField1_ |= 0x00000040;
              }
              sensors_.add(input.readMessage(SensorData.PARSER, extensionRegistry));
              break;
            }
            case 320: {
              bitField1_ |= 0x00000040;
              installed_ = input.readBool();
              break;
            }
            case 330: {
              ExtSmoke.Builder subBuilder = null;
              if (((bitField1_ & 0x00000080) == 0x00000080)) {
                subBuilder = extSmoke_.toBuilder();
              }
              extSmoke_ = input.readMessage(ExtSmoke.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(extSmoke_);
                extSmoke_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000080;
              break;
            }
            case 338: {
              ElecFireData.Builder subBuilder = null;
              if (((bitField1_ & 0x00000100) == 0x00000100)) {
                subBuilder = fireData_.toBuilder();
              }
              fireData_ = input.readMessage(ElecFireData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fireData_);
                fireData_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000100;
              break;
            }
            case 346: {
              if (!((mutable_bitField1_ & 0x00000400) == 0x00000400)) {
                mtunData_ = new java.util.ArrayList<MantunData>();
                mutable_bitField1_ |= 0x00000400;
              }
              mtunData_.add(input.readMessage(MantunData.PARSER, extensionRegistry));
              break;
            }
            case 354: {
              AcrelData.Builder subBuilder = null;
              if (((bitField1_ & 0x00000200) == 0x00000200)) {
                subBuilder = acrelData_.toBuilder();
              }
              acrelData_ = input.readMessage(AcrelData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(acrelData_);
                acrelData_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000200;
              break;
            }
            case 362: {
              Cayman.Builder subBuilder = null;
              if (((bitField1_ & 0x00000400) == 0x00000400)) {
                subBuilder = caymanData_.toBuilder();
              }
              caymanData_ = input.readMessage(Cayman.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(caymanData_);
                caymanData_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000400;
              break;
            }
            case 370: {
              Baymax.Builder subBuilder = null;
              if (((bitField1_ & 0x00000800) == 0x00000800)) {
                subBuilder = baymaxData_.toBuilder();
              }
              baymaxData_ = input.readMessage(Baymax.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(baymaxData_);
                baymaxData_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000800;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField1_ & 0x00000040) == 0x00000040)) {
          sensors_ = java.util.Collections.unmodifiableList(sensors_);
        }
        if (((mutable_bitField1_ & 0x00000400) == 0x00000400)) {
          mtunData_ = java.util.Collections.unmodifiableList(mtunData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_MsgNode_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_MsgNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              MsgNode.class, Builder.class);
    }

    public static com.google.protobuf.Parser<MsgNode> PARSER =
        new com.google.protobuf.AbstractParser<MsgNode>() {
      public MsgNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MsgNode(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<MsgNode> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int bitField1_;
    // optional uint32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>optional uint32 id = 1;</code>
     *
     * <pre>
     * 任务id (上|下)
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 id = 1;</code>
     *
     * <pre>
     * 任务id (上|下)
     * </pre>
     */
    public int getId() {
      return id_;
    }

    // optional uint32 cmd = 2;
    public static final int CMD_FIELD_NUMBER = 2;
    private int cmd_;
    /**
     * <code>optional uint32 cmd = 2;</code>
     *
     * <pre>
     * 任务类型(没用)
     * </pre>
     */
    public boolean hasCmd() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 cmd = 2;</code>
     *
     * <pre>
     * 任务类型(没用)
     * </pre>
     */
    public int getCmd() {
      return cmd_;
    }

    // optional uint32 cmdRet = 3;
    public static final int CMDRET_FIELD_NUMBER = 3;
    private int cmdRet_;
    /**
     * <code>optional uint32 cmdRet = 3;</code>
     *
     * <pre>
     * 任务返回 (上)
     * </pre>
     */
    public boolean hasCmdRet() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 cmdRet = 3;</code>
     *
     * <pre>
     * 任务返回 (上)
     * </pre>
     */
    public int getCmdRet() {
      return cmdRet_;
    }

    // optional .LpwanParam lpwanParam = 4;
    public static final int LPWANPARAM_FIELD_NUMBER = 4;
    private LpwanParam lpwanParam_;
    /**
     * <code>optional .LpwanParam lpwanParam = 4;</code>
     *
     * <pre>
     * lpwan 参数 (上|下)
     * </pre>
     */
    public boolean hasLpwanParam() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .LpwanParam lpwanParam = 4;</code>
     *
     * <pre>
     * lpwan 参数 (上|下)
     * </pre>
     */
    public LpwanParam getLpwanParam() {
      return lpwanParam_;
    }
    /**
     * <code>optional .LpwanParam lpwanParam = 4;</code>
     *
     * <pre>
     * lpwan 参数 (上|下)
     * </pre>
     */
    public LpwanParamOrBuilder getLpwanParamOrBuilder() {
      return lpwanParam_;
    }

    // optional .BleParam bleParam = 5;
    public static final int BLEPARAM_FIELD_NUMBER = 5;
    private BleParam bleParam_;
    /**
     * <code>optional .BleParam bleParam = 5;</code>
     *
     * <pre>
     * ble 参数 (上|下)
     * </pre>
     */
    public boolean hasBleParam() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .BleParam bleParam = 5;</code>
     *
     * <pre>
     * ble 参数 (上|下)
     * </pre>
     */
    public BleParam getBleParam() {
      return bleParam_;
    }
    /**
     * <code>optional .BleParam bleParam = 5;</code>
     *
     * <pre>
     * ble 参数 (上|下)
     * </pre>
     */
    public BleParamOrBuilder getBleParamOrBuilder() {
      return bleParam_;
    }

    // optional .AppParam appParam = 6;
    public static final int APPPARAM_FIELD_NUMBER = 6;
    private AppParam appParam_;
    /**
     * <code>optional .AppParam appParam = 6;</code>
     *
     * <pre>
     * 应用参数 (上|下)
     * </pre>
     */
    public boolean hasAppParam() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .AppParam appParam = 6;</code>
     *
     * <pre>
     * 应用参数 (上|下)
     * </pre>
     */
    public AppParam getAppParam() {
      return appParam_;
    }
    /**
     * <code>optional .AppParam appParam = 6;</code>
     *
     * <pre>
     * 应用参数 (上|下)
     * </pre>
     */
    public AppParamOrBuilder getAppParamOrBuilder() {
      return appParam_;
    }

    // optional sint32 battery = 7;
    public static final int BATTERY_FIELD_NUMBER = 7;
    private int battery_;
    /**
     * <code>optional sint32 battery = 7;</code>
     *
     * <pre>
     * 电量 (上)
     * </pre>
     */
    public boolean hasBattery() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional sint32 battery = 7;</code>
     *
     * <pre>
     * 电量 (上)
     * </pre>
     */
    public int getBattery() {
      return battery_;
    }

    // optional .GpsData gps = 8;
    public static final int GPS_FIELD_NUMBER = 8;
    private GpsData gps_;
    /**
     * <code>optional .GpsData gps = 8;</code>
     */
    public boolean hasGps() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .GpsData gps = 8;</code>
     */
    public GpsData getGps() {
      return gps_;
    }
    /**
     * <code>optional .GpsData gps = 8;</code>
     */
    public GpsDataOrBuilder getGpsOrBuilder() {
      return gps_;
    }

    // optional .AxisData acceleration = 9;
    public static final int ACCELERATION_FIELD_NUMBER = 9;
    private AxisData acceleration_;
    /**
     * <code>optional .AxisData acceleration = 9;</code>
     */
    public boolean hasAcceleration() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .AxisData acceleration = 9;</code>
     */
    public AxisData getAcceleration() {
      return acceleration_;
    }
    /**
     * <code>optional .AxisData acceleration = 9;</code>
     */
    public AxisDataOrBuilder getAccelerationOrBuilder() {
      return acceleration_;
    }

    // optional .AxisData magnetism = 10;
    public static final int MAGNETISM_FIELD_NUMBER = 10;
    private AxisData magnetism_;
    /**
     * <code>optional .AxisData magnetism = 10;</code>
     */
    public boolean hasMagnetism() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .AxisData magnetism = 10;</code>
     */
    public AxisData getMagnetism() {
      return magnetism_;
    }
    /**
     * <code>optional .AxisData magnetism = 10;</code>
     */
    public AxisDataOrBuilder getMagnetismOrBuilder() {
      return magnetism_;
    }

    // optional .AxisData gyroscope = 11;
    public static final int GYROSCOPE_FIELD_NUMBER = 11;
    private AxisData gyroscope_;
    /**
     * <code>optional .AxisData gyroscope = 11;</code>
     */
    public boolean hasGyroscope() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .AxisData gyroscope = 11;</code>
     */
    public AxisData getGyroscope() {
      return gyroscope_;
    }
    /**
     * <code>optional .AxisData gyroscope = 11;</code>
     */
    public AxisDataOrBuilder getGyroscopeOrBuilder() {
      return gyroscope_;
    }

    // optional .SensorData temperature = 12;
    public static final int TEMPERATURE_FIELD_NUMBER = 12;
    private SensorData temperature_;
    /**
     * <code>optional .SensorData temperature = 12;</code>
     *
     * <pre>
     * 温度
     * </pre>
     */
    public boolean hasTemperature() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .SensorData temperature = 12;</code>
     *
     * <pre>
     * 温度
     * </pre>
     */
    public SensorData getTemperature() {
      return temperature_;
    }
    /**
     * <code>optional .SensorData temperature = 12;</code>
     *
     * <pre>
     * 温度
     * </pre>
     */
    public SensorDataOrBuilder getTemperatureOrBuilder() {
      return temperature_;
    }

    // optional .SensorData humidity = 13;
    public static final int HUMIDITY_FIELD_NUMBER = 13;
    private SensorData humidity_;
    /**
     * <code>optional .SensorData humidity = 13;</code>
     *
     * <pre>
     * 湿度
     * </pre>
     */
    public boolean hasHumidity() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional .SensorData humidity = 13;</code>
     *
     * <pre>
     * 湿度
     * </pre>
     */
    public SensorData getHumidity() {
      return humidity_;
    }
    /**
     * <code>optional .SensorData humidity = 13;</code>
     *
     * <pre>
     * 湿度
     * </pre>
     */
    public SensorDataOrBuilder getHumidityOrBuilder() {
      return humidity_;
    }

    // optional .SensorData light = 14;
    public static final int LIGHT_FIELD_NUMBER = 14;
    private SensorData light_;
    /**
     * <code>optional .SensorData light = 14;</code>
     *
     * <pre>
     * 光
     * </pre>
     */
    public boolean hasLight() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional .SensorData light = 14;</code>
     *
     * <pre>
     * 光
     * </pre>
     */
    public SensorData getLight() {
      return light_;
    }
    /**
     * <code>optional .SensorData light = 14;</code>
     *
     * <pre>
     * 光
     * </pre>
     */
    public SensorDataOrBuilder getLightOrBuilder() {
      return light_;
    }

    // optional .SensorData leak = 15;
    public static final int LEAK_FIELD_NUMBER = 15;
    private SensorData leak_;
    /**
     * <code>optional .SensorData leak = 15;</code>
     */
    public boolean hasLeak() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional .SensorData leak = 15;</code>
     */
    public SensorData getLeak() {
      return leak_;
    }
    /**
     * <code>optional .SensorData leak = 15;</code>
     */
    public SensorDataOrBuilder getLeakOrBuilder() {
      return leak_;
    }

    // optional .SensorData co = 16;
    public static final int CO_FIELD_NUMBER = 16;
    private SensorData co_;
    /**
     * <code>optional .SensorData co = 16;</code>
     */
    public boolean hasCo() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .SensorData co = 16;</code>
     */
    public SensorData getCo() {
      return co_;
    }
    /**
     * <code>optional .SensorData co = 16;</code>
     */
    public SensorDataOrBuilder getCoOrBuilder() {
      return co_;
    }

    // optional .SensorData co2 = 17;
    public static final int CO2_FIELD_NUMBER = 17;
    private SensorData co2_;
    /**
     * <code>optional .SensorData co2 = 17;</code>
     */
    public boolean hasCo2() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional .SensorData co2 = 17;</code>
     */
    public SensorData getCo2() {
      return co2_;
    }
    /**
     * <code>optional .SensorData co2 = 17;</code>
     */
    public SensorDataOrBuilder getCo2OrBuilder() {
      return co2_;
    }

    // optional .SensorData so2 = 18;
    public static final int SO2_FIELD_NUMBER = 18;
    private SensorData so2_;
    /**
     * <code>optional .SensorData so2 = 18;</code>
     */
    public boolean hasSo2() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional .SensorData so2 = 18;</code>
     */
    public SensorData getSo2() {
      return so2_;
    }
    /**
     * <code>optional .SensorData so2 = 18;</code>
     */
    public SensorDataOrBuilder getSo2OrBuilder() {
      return so2_;
    }

    // optional .SensorData no2 = 19;
    public static final int NO2_FIELD_NUMBER = 19;
    private SensorData no2_;
    /**
     * <code>optional .SensorData no2 = 19;</code>
     */
    public boolean hasNo2() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional .SensorData no2 = 19;</code>
     */
    public SensorData getNo2() {
      return no2_;
    }
    /**
     * <code>optional .SensorData no2 = 19;</code>
     */
    public SensorDataOrBuilder getNo2OrBuilder() {
      return no2_;
    }

    // optional .SensorData ch4 = 20;
    public static final int CH4_FIELD_NUMBER = 20;
    private SensorData ch4_;
    /**
     * <code>optional .SensorData ch4 = 20;</code>
     */
    public boolean hasCh4() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional .SensorData ch4 = 20;</code>
     */
    public SensorData getCh4() {
      return ch4_;
    }
    /**
     * <code>optional .SensorData ch4 = 20;</code>
     */
    public SensorDataOrBuilder getCh4OrBuilder() {
      return ch4_;
    }

    // optional .SensorData ch2o = 21;
    public static final int CH2O_FIELD_NUMBER = 21;
    private SensorData ch2O_;
    /**
     * <code>optional .SensorData ch2o = 21;</code>
     */
    public boolean hasCh2O() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional .SensorData ch2o = 21;</code>
     */
    public SensorData getCh2O() {
      return ch2O_;
    }
    /**
     * <code>optional .SensorData ch2o = 21;</code>
     */
    public SensorDataOrBuilder getCh2OOrBuilder() {
      return ch2O_;
    }

    // optional .SensorData lpg = 22;
    public static final int LPG_FIELD_NUMBER = 22;
    private SensorData lpg_;
    /**
     * <code>optional .SensorData lpg = 22;</code>
     */
    public boolean hasLpg() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional .SensorData lpg = 22;</code>
     */
    public SensorData getLpg() {
      return lpg_;
    }
    /**
     * <code>optional .SensorData lpg = 22;</code>
     */
    public SensorDataOrBuilder getLpgOrBuilder() {
      return lpg_;
    }

    // optional .SensorData o3 = 23;
    public static final int O3_FIELD_NUMBER = 23;
    private SensorData o3_;
    /**
     * <code>optional .SensorData o3 = 23;</code>
     */
    public boolean hasO3() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional .SensorData o3 = 23;</code>
     */
    public SensorData getO3() {
      return o3_;
    }
    /**
     * <code>optional .SensorData o3 = 23;</code>
     */
    public SensorDataOrBuilder getO3OrBuilder() {
      return o3_;
    }

    // optional .SensorData pm1 = 24;
    public static final int PM1_FIELD_NUMBER = 24;
    private SensorData pm1_;
    /**
     * <code>optional .SensorData pm1 = 24;</code>
     */
    public boolean hasPm1() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional .SensorData pm1 = 24;</code>
     */
    public SensorData getPm1() {
      return pm1_;
    }
    /**
     * <code>optional .SensorData pm1 = 24;</code>
     */
    public SensorDataOrBuilder getPm1OrBuilder() {
      return pm1_;
    }

    // optional .SensorData pm2_5 = 25;
    public static final int PM2_5_FIELD_NUMBER = 25;
    private SensorData pm25_;
    /**
     * <code>optional .SensorData pm2_5 = 25;</code>
     */
    public boolean hasPm25() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional .SensorData pm2_5 = 25;</code>
     */
    public SensorData getPm25() {
      return pm25_;
    }
    /**
     * <code>optional .SensorData pm2_5 = 25;</code>
     */
    public SensorDataOrBuilder getPm25OrBuilder() {
      return pm25_;
    }

    // optional .SensorData pm10 = 26;
    public static final int PM10_FIELD_NUMBER = 26;
    private SensorData pm10_;
    /**
     * <code>optional .SensorData pm10 = 26;</code>
     */
    public boolean hasPm10() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional .SensorData pm10 = 26;</code>
     */
    public SensorData getPm10() {
      return pm10_;
    }
    /**
     * <code>optional .SensorData pm10 = 26;</code>
     */
    public SensorDataOrBuilder getPm10OrBuilder() {
      return pm10_;
    }

    // optional .SensorData angle = 27;
    public static final int ANGLE_FIELD_NUMBER = 27;
    private SensorData angle_;
    /**
     * <code>optional .SensorData angle = 27;</code>
     */
    public boolean hasAngle() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional .SensorData angle = 27;</code>
     */
    public SensorData getAngle() {
      return angle_;
    }
    /**
     * <code>optional .SensorData angle = 27;</code>
     */
    public SensorDataOrBuilder getAngleOrBuilder() {
      return angle_;
    }

    // optional .SensorData cover = 28;
    public static final int COVER_FIELD_NUMBER = 28;
    private SensorData cover_;
    /**
     * <code>optional .SensorData cover = 28;</code>
     */
    public boolean hasCover() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional .SensorData cover = 28;</code>
     */
    public SensorData getCover() {
      return cover_;
    }
    /**
     * <code>optional .SensorData cover = 28;</code>
     */
    public SensorDataOrBuilder getCoverOrBuilder() {
      return cover_;
    }

    // optional .SensorData level = 29;
    public static final int LEVEL_FIELD_NUMBER = 29;
    private SensorData level_;
    /**
     * <code>optional .SensorData level = 29;</code>
     */
    public boolean hasLevel() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional .SensorData level = 29;</code>
     */
    public SensorData getLevel() {
      return level_;
    }
    /**
     * <code>optional .SensorData level = 29;</code>
     */
    public SensorDataOrBuilder getLevelOrBuilder() {
      return level_;
    }

    // optional .SensorData smoke = 30;
    public static final int SMOKE_FIELD_NUMBER = 30;
    private SensorData smoke_;
    /**
     * <code>optional .SensorData smoke = 30;</code>
     */
    public boolean hasSmoke() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional .SensorData smoke = 30;</code>
     */
    public SensorData getSmoke() {
      return smoke_;
    }
    /**
     * <code>optional .SensorData smoke = 30;</code>
     */
    public SensorDataOrBuilder getSmokeOrBuilder() {
      return smoke_;
    }

    // optional .SensorData pitch = 31;
    public static final int PITCH_FIELD_NUMBER = 31;
    private SensorData pitch_;
    /**
     * <code>optional .SensorData pitch = 31;</code>
     */
    public boolean hasPitch() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional .SensorData pitch = 31;</code>
     */
    public SensorData getPitch() {
      return pitch_;
    }
    /**
     * <code>optional .SensorData pitch = 31;</code>
     */
    public SensorDataOrBuilder getPitchOrBuilder() {
      return pitch_;
    }

    // optional .SensorData roll = 32;
    public static final int ROLL_FIELD_NUMBER = 32;
    private SensorData roll_;
    /**
     * <code>optional .SensorData roll = 32;</code>
     */
    public boolean hasRoll() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional .SensorData roll = 32;</code>
     */
    public SensorData getRoll() {
      return roll_;
    }
    /**
     * <code>optional .SensorData roll = 32;</code>
     */
    public SensorDataOrBuilder getRollOrBuilder() {
      return roll_;
    }

    // optional .SensorData yaw = 33;
    public static final int YAW_FIELD_NUMBER = 33;
    private SensorData yaw_;
    /**
     * <code>optional .SensorData yaw = 33;</code>
     */
    public boolean hasYaw() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .SensorData yaw = 33;</code>
     */
    public SensorData getYaw() {
      return yaw_;
    }
    /**
     * <code>optional .SensorData yaw = 33;</code>
     */
    public SensorDataOrBuilder getYawOrBuilder() {
      return yaw_;
    }

    // optional .SensorDataInt flame = 34;
    public static final int FLAME_FIELD_NUMBER = 34;
    private SensorDataInt flame_;
    /**
     * <code>optional .SensorDataInt flame = 34;</code>
     */
    public boolean hasFlame() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .SensorDataInt flame = 34;</code>
     */
    public SensorDataInt getFlame() {
      return flame_;
    }
    /**
     * <code>optional .SensorDataInt flame = 34;</code>
     */
    public SensorDataIntOrBuilder getFlameOrBuilder() {
      return flame_;
    }

    // optional .SensorData artificialGas = 35;
    public static final int ARTIFICIALGAS_FIELD_NUMBER = 35;
    private SensorData artificialGas_;
    /**
     * <code>optional .SensorData artificialGas = 35;</code>
     */
    public boolean hasArtificialGas() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .SensorData artificialGas = 35;</code>
     */
    public SensorData getArtificialGas() {
      return artificialGas_;
    }
    /**
     * <code>optional .SensorData artificialGas = 35;</code>
     */
    public SensorDataOrBuilder getArtificialGasOrBuilder() {
      return artificialGas_;
    }

    // optional .MultiSensorDataInt multiTemp = 36;
    public static final int MULTITEMP_FIELD_NUMBER = 36;
    private MultiSensorDataInt multiTemp_;
    /**
     * <code>optional .MultiSensorDataInt multiTemp = 36;</code>
     */
    public boolean hasMultiTemp() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .MultiSensorDataInt multiTemp = 36;</code>
     */
    public MultiSensorDataInt getMultiTemp() {
      return multiTemp_;
    }
    /**
     * <code>optional .MultiSensorDataInt multiTemp = 36;</code>
     */
    public MultiSensorDataIntOrBuilder getMultiTempOrBuilder() {
      return multiTemp_;
    }

    // optional .SensorData waterPressure = 37;
    public static final int WATERPRESSURE_FIELD_NUMBER = 37;
    private SensorData waterPressure_;
    /**
     * <code>optional .SensorData waterPressure = 37;</code>
     */
    public boolean hasWaterPressure() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .SensorData waterPressure = 37;</code>
     */
    public SensorData getWaterPressure() {
      return waterPressure_;
    }
    /**
     * <code>optional .SensorData waterPressure = 37;</code>
     */
    public SensorDataOrBuilder getWaterPressureOrBuilder() {
      return waterPressure_;
    }

    // optional .iBeacon ibeacon = 38;
    public static final int IBEACON_FIELD_NUMBER = 38;
    private iBeacon ibeacon_;
    /**
     * <code>optional .iBeacon ibeacon = 38;</code>
     *
     * <pre>
     * ibeacon 配置 (上|下)
     * </pre>
     */
    public boolean hasIbeacon() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .iBeacon ibeacon = 38;</code>
     *
     * <pre>
     * ibeacon 配置 (上|下)
     * </pre>
     */
    public iBeacon getIbeacon() {
      return ibeacon_;
    }
    /**
     * <code>optional .iBeacon ibeacon = 38;</code>
     *
     * <pre>
     * ibeacon 配置 (上|下)
     * </pre>
     */
    public iBeaconOrBuilder getIbeaconOrBuilder() {
      return ibeacon_;
    }

    // repeated .SensorData sensors = 39;
    public static final int SENSORS_FIELD_NUMBER = 39;
    private java.util.List<SensorData> sensors_;
    /**
     * <code>repeated .SensorData sensors = 39;</code>
     */
    public java.util.List<SensorData> getSensorsList() {
      return sensors_;
    }
    /**
     * <code>repeated .SensorData sensors = 39;</code>
     */
    public java.util.List<? extends SensorDataOrBuilder>
        getSensorsOrBuilderList() {
      return sensors_;
    }
    /**
     * <code>repeated .SensorData sensors = 39;</code>
     */
    public int getSensorsCount() {
      return sensors_.size();
    }
    /**
     * <code>repeated .SensorData sensors = 39;</code>
     */
    public SensorData getSensors(int index) {
      return sensors_.get(index);
    }
    /**
     * <code>repeated .SensorData sensors = 39;</code>
     */
    public SensorDataOrBuilder getSensorsOrBuilder(
        int index) {
      return sensors_.get(index);
    }

    // optional bool installed = 40;
    public static final int INSTALLED_FIELD_NUMBER = 40;
    private boolean installed_;
    /**
     * <code>optional bool installed = 40;</code>
     *
     * <pre>
     * 安装状态 (上)
     * </pre>
     */
    public boolean hasInstalled() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool installed = 40;</code>
     *
     * <pre>
     * 安装状态 (上)
     * </pre>
     */
    public boolean getInstalled() {
      return installed_;
    }

    // optional .ExtSmoke extSmoke = 41;
    public static final int EXTSMOKE_FIELD_NUMBER = 41;
    private ExtSmoke extSmoke_;
    /**
     * <code>optional .ExtSmoke extSmoke = 41;</code>
     *
     * <pre>
     * H605/N16W 烟感专用字段
     * </pre>
     */
    public boolean hasExtSmoke() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .ExtSmoke extSmoke = 41;</code>
     *
     * <pre>
     * H605/N16W 烟感专用字段
     * </pre>
     */
    public ExtSmoke getExtSmoke() {
      return extSmoke_;
    }
    /**
     * <code>optional .ExtSmoke extSmoke = 41;</code>
     *
     * <pre>
     * H605/N16W 烟感专用字段
     * </pre>
     */
    public ExtSmokeOrBuilder getExtSmokeOrBuilder() {
      return extSmoke_;
    }

    // optional .ElecFireData fireData = 42;
    public static final int FIREDATA_FIELD_NUMBER = 42;
    private ElecFireData fireData_;
    /**
     * <code>optional .ElecFireData fireData = 42;</code>
     *
     * <pre>
     * FHSJ 电气火灾专用字段
     * </pre>
     */
    public boolean hasFireData() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .ElecFireData fireData = 42;</code>
     *
     * <pre>
     * FHSJ 电气火灾专用字段
     * </pre>
     */
    public ElecFireData getFireData() {
      return fireData_;
    }
    /**
     * <code>optional .ElecFireData fireData = 42;</code>
     *
     * <pre>
     * FHSJ 电气火灾专用字段
     * </pre>
     */
    public ElecFireDataOrBuilder getFireDataOrBuilder() {
      return fireData_;
    }

    // repeated .MantunData mtunData = 43;
    public static final int MTUNDATA_FIELD_NUMBER = 43;
    private java.util.List<MantunData> mtunData_;
    /**
     * <code>repeated .MantunData mtunData = 43;</code>
     *
     * <pre>
     * Mantun 空开专用字段
     * </pre>
     */
    public java.util.List<MantunData> getMtunDataList() {
      return mtunData_;
    }
    /**
     * <code>repeated .MantunData mtunData = 43;</code>
     *
     * <pre>
     * Mantun 空开专用字段
     * </pre>
     */
    public java.util.List<? extends MantunDataOrBuilder>
        getMtunDataOrBuilderList() {
      return mtunData_;
    }
    /**
     * <code>repeated .MantunData mtunData = 43;</code>
     *
     * <pre>
     * Mantun 空开专用字段
     * </pre>
     */
    public int getMtunDataCount() {
      return mtunData_.size();
    }
    /**
     * <code>repeated .MantunData mtunData = 43;</code>
     *
     * <pre>
     * Mantun 空开专用字段
     * </pre>
     */
    public MantunData getMtunData(int index) {
      return mtunData_.get(index);
    }
    /**
     * <code>repeated .MantunData mtunData = 43;</code>
     *
     * <pre>
     * Mantun 空开专用字段
     * </pre>
     */
    public MantunDataOrBuilder getMtunDataOrBuilder(
        int index) {
      return mtunData_.get(index);
    }

    // optional .AcrelData acrelData = 44;
    public static final int ACRELDATA_FIELD_NUMBER = 44;
    private AcrelData acrelData_;
    /**
     * <code>optional .AcrelData acrelData = 44;</code>
     *
     * <pre>
     * Acrel 电气火灾专用字段
     * </pre>
     */
    public boolean hasAcrelData() {
      return ((bitField1_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .AcrelData acrelData = 44;</code>
     *
     * <pre>
     * Acrel 电气火灾专用字段
     * </pre>
     */
    public AcrelData getAcrelData() {
      return acrelData_;
    }
    /**
     * <code>optional .AcrelData acrelData = 44;</code>
     *
     * <pre>
     * Acrel 电气火灾专用字段
     * </pre>
     */
    public AcrelDataOrBuilder getAcrelDataOrBuilder() {
      return acrelData_;
    }

    // optional .Cayman caymanData = 45;
    public static final int CAYMANDATA_FIELD_NUMBER = 45;
    private Cayman caymanData_;
    /**
     * <code>optional .Cayman caymanData = 45;</code>
     *
     * <pre>
     * Cayman 烟感专用字段
     * </pre>
     */
    public boolean hasCaymanData() {
      return ((bitField1_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .Cayman caymanData = 45;</code>
     *
     * <pre>
     * Cayman 烟感专用字段
     * </pre>
     */
    public Cayman getCaymanData() {
      return caymanData_;
    }
    /**
     * <code>optional .Cayman caymanData = 45;</code>
     *
     * <pre>
     * Cayman 烟感专用字段
     * </pre>
     */
    public CaymanOrBuilder getCaymanDataOrBuilder() {
      return caymanData_;
    }

    // optional .Baymax baymaxData = 46;
    public static final int BAYMAXDATA_FIELD_NUMBER = 46;
    private Baymax baymaxData_;
    /**
     * <code>optional .Baymax baymaxData = 46;</code>
     *
     * <pre>
     * Baymax 气感专用字段
     * </pre>
     */
    public boolean hasBaymaxData() {
      return ((bitField1_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .Baymax baymaxData = 46;</code>
     *
     * <pre>
     * Baymax 气感专用字段
     * </pre>
     */
    public Baymax getBaymaxData() {
      return baymaxData_;
    }
    /**
     * <code>optional .Baymax baymaxData = 46;</code>
     *
     * <pre>
     * Baymax 气感专用字段
     * </pre>
     */
    public BaymaxOrBuilder getBaymaxDataOrBuilder() {
      return baymaxData_;
    }

    private void initFields() {
      id_ = 0;
      cmd_ = 0;
      cmdRet_ = 0;
      lpwanParam_ = LpwanParam.getDefaultInstance();
      bleParam_ = BleParam.getDefaultInstance();
      appParam_ = AppParam.getDefaultInstance();
      battery_ = 0;
      gps_ = GpsData.getDefaultInstance();
      acceleration_ = AxisData.getDefaultInstance();
      magnetism_ = AxisData.getDefaultInstance();
      gyroscope_ = AxisData.getDefaultInstance();
      temperature_ = SensorData.getDefaultInstance();
      humidity_ = SensorData.getDefaultInstance();
      light_ = SensorData.getDefaultInstance();
      leak_ = SensorData.getDefaultInstance();
      co_ = SensorData.getDefaultInstance();
      co2_ = SensorData.getDefaultInstance();
      so2_ = SensorData.getDefaultInstance();
      no2_ = SensorData.getDefaultInstance();
      ch4_ = SensorData.getDefaultInstance();
      ch2O_ = SensorData.getDefaultInstance();
      lpg_ = SensorData.getDefaultInstance();
      o3_ = SensorData.getDefaultInstance();
      pm1_ = SensorData.getDefaultInstance();
      pm25_ = SensorData.getDefaultInstance();
      pm10_ = SensorData.getDefaultInstance();
      angle_ = SensorData.getDefaultInstance();
      cover_ = SensorData.getDefaultInstance();
      level_ = SensorData.getDefaultInstance();
      smoke_ = SensorData.getDefaultInstance();
      pitch_ = SensorData.getDefaultInstance();
      roll_ = SensorData.getDefaultInstance();
      yaw_ = SensorData.getDefaultInstance();
      flame_ = SensorDataInt.getDefaultInstance();
      artificialGas_ = SensorData.getDefaultInstance();
      multiTemp_ = MultiSensorDataInt.getDefaultInstance();
      waterPressure_ = SensorData.getDefaultInstance();
      ibeacon_ = iBeacon.getDefaultInstance();
      sensors_ = java.util.Collections.emptyList();
      installed_ = false;
      extSmoke_ = ExtSmoke.getDefaultInstance();
      fireData_ = ElecFireData.getDefaultInstance();
      mtunData_ = java.util.Collections.emptyList();
      acrelData_ = AcrelData.getDefaultInstance();
      caymanData_ = Cayman.getDefaultInstance();
      baymaxData_ = Baymax.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (hasLpwanParam()) {
        if (!getLpwanParam().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, cmd_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, cmdRet_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, lpwanParam_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, bleParam_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, appParam_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeSInt32(7, battery_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, gps_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, acceleration_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(10, magnetism_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(11, gyroscope_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(12, temperature_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeMessage(13, humidity_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeMessage(14, light_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeMessage(15, leak_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeMessage(16, co_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeMessage(17, co2_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeMessage(18, so2_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeMessage(19, no2_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeMessage(20, ch4_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeMessage(21, ch2O_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeMessage(22, lpg_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeMessage(23, o3_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeMessage(24, pm1_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeMessage(25, pm25_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeMessage(26, pm10_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeMessage(27, angle_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeMessage(28, cover_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeMessage(29, level_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeMessage(30, smoke_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeMessage(31, pitch_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeMessage(32, roll_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(33, yaw_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(34, flame_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(35, artificialGas_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(36, multiTemp_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(37, waterPressure_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(38, ibeacon_);
      }
      for (int i = 0; i < sensors_.size(); i++) {
        output.writeMessage(39, sensors_.get(i));
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeBool(40, installed_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(41, extSmoke_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(42, fireData_);
      }
      for (int i = 0; i < mtunData_.size(); i++) {
        output.writeMessage(43, mtunData_.get(i));
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(44, acrelData_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(45, caymanData_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(46, baymaxData_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, cmd_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, cmdRet_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, lpwanParam_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, bleParam_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, appParam_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(7, battery_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, gps_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, acceleration_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, magnetism_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, gyroscope_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, temperature_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, humidity_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, light_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, leak_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, co_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, co2_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, so2_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, no2_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, ch4_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, ch2O_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, lpg_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, o3_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, pm1_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, pm25_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(26, pm10_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(27, angle_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(28, cover_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(29, level_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(30, smoke_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(31, pitch_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(32, roll_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(33, yaw_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(34, flame_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(35, artificialGas_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(36, multiTemp_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(37, waterPressure_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(38, ibeacon_);
      }
      for (int i = 0; i < sensors_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(39, sensors_.get(i));
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(40, installed_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(41, extSmoke_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(42, fireData_);
      }
      for (int i = 0; i < mtunData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(43, mtunData_.get(i));
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(44, acrelData_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(45, caymanData_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(46, baymaxData_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static MsgNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static MsgNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static MsgNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static MsgNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static MsgNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static MsgNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static MsgNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static MsgNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static MsgNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static MsgNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(MsgNode prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code MsgNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements MsgNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_MsgNode_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_MsgNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                MsgNode.class, Builder.class);
      }

      // Construct using MsgNode1V1M32.MsgNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLpwanParamFieldBuilder();
          getBleParamFieldBuilder();
          getAppParamFieldBuilder();
          getGpsFieldBuilder();
          getAccelerationFieldBuilder();
          getMagnetismFieldBuilder();
          getGyroscopeFieldBuilder();
          getTemperatureFieldBuilder();
          getHumidityFieldBuilder();
          getLightFieldBuilder();
          getLeakFieldBuilder();
          getCoFieldBuilder();
          getCo2FieldBuilder();
          getSo2FieldBuilder();
          getNo2FieldBuilder();
          getCh4FieldBuilder();
          getCh2OFieldBuilder();
          getLpgFieldBuilder();
          getO3FieldBuilder();
          getPm1FieldBuilder();
          getPm25FieldBuilder();
          getPm10FieldBuilder();
          getAngleFieldBuilder();
          getCoverFieldBuilder();
          getLevelFieldBuilder();
          getSmokeFieldBuilder();
          getPitchFieldBuilder();
          getRollFieldBuilder();
          getYawFieldBuilder();
          getFlameFieldBuilder();
          getArtificialGasFieldBuilder();
          getMultiTempFieldBuilder();
          getWaterPressureFieldBuilder();
          getIbeaconFieldBuilder();
          getSensorsFieldBuilder();
          getExtSmokeFieldBuilder();
          getFireDataFieldBuilder();
          getMtunDataFieldBuilder();
          getAcrelDataFieldBuilder();
          getCaymanDataFieldBuilder();
          getBaymaxDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cmd_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        cmdRet_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (lpwanParamBuilder_ == null) {
          lpwanParam_ = LpwanParam.getDefaultInstance();
        } else {
          lpwanParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (bleParamBuilder_ == null) {
          bleParam_ = BleParam.getDefaultInstance();
        } else {
          bleParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (appParamBuilder_ == null) {
          appParam_ = AppParam.getDefaultInstance();
        } else {
          appParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        battery_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        if (gpsBuilder_ == null) {
          gps_ = GpsData.getDefaultInstance();
        } else {
          gpsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (accelerationBuilder_ == null) {
          acceleration_ = AxisData.getDefaultInstance();
        } else {
          accelerationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        if (magnetismBuilder_ == null) {
          magnetism_ = AxisData.getDefaultInstance();
        } else {
          magnetismBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        if (gyroscopeBuilder_ == null) {
          gyroscope_ = AxisData.getDefaultInstance();
        } else {
          gyroscopeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        if (temperatureBuilder_ == null) {
          temperature_ = SensorData.getDefaultInstance();
        } else {
          temperatureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        if (humidityBuilder_ == null) {
          humidity_ = SensorData.getDefaultInstance();
        } else {
          humidityBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        if (lightBuilder_ == null) {
          light_ = SensorData.getDefaultInstance();
        } else {
          lightBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        if (leakBuilder_ == null) {
          leak_ = SensorData.getDefaultInstance();
        } else {
          leakBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        if (coBuilder_ == null) {
          co_ = SensorData.getDefaultInstance();
        } else {
          coBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        if (co2Builder_ == null) {
          co2_ = SensorData.getDefaultInstance();
        } else {
          co2Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        if (so2Builder_ == null) {
          so2_ = SensorData.getDefaultInstance();
        } else {
          so2Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        if (no2Builder_ == null) {
          no2_ = SensorData.getDefaultInstance();
        } else {
          no2Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        if (ch4Builder_ == null) {
          ch4_ = SensorData.getDefaultInstance();
        } else {
          ch4Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        if (ch2OBuilder_ == null) {
          ch2O_ = SensorData.getDefaultInstance();
        } else {
          ch2OBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        if (lpgBuilder_ == null) {
          lpg_ = SensorData.getDefaultInstance();
        } else {
          lpgBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        if (o3Builder_ == null) {
          o3_ = SensorData.getDefaultInstance();
        } else {
          o3Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00400000);
        if (pm1Builder_ == null) {
          pm1_ = SensorData.getDefaultInstance();
        } else {
          pm1Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        if (pm25Builder_ == null) {
          pm25_ = SensorData.getDefaultInstance();
        } else {
          pm25Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x01000000);
        if (pm10Builder_ == null) {
          pm10_ = SensorData.getDefaultInstance();
        } else {
          pm10Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x02000000);
        if (angleBuilder_ == null) {
          angle_ = SensorData.getDefaultInstance();
        } else {
          angleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x04000000);
        if (coverBuilder_ == null) {
          cover_ = SensorData.getDefaultInstance();
        } else {
          coverBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x08000000);
        if (levelBuilder_ == null) {
          level_ = SensorData.getDefaultInstance();
        } else {
          levelBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x10000000);
        if (smokeBuilder_ == null) {
          smoke_ = SensorData.getDefaultInstance();
        } else {
          smokeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x20000000);
        if (pitchBuilder_ == null) {
          pitch_ = SensorData.getDefaultInstance();
        } else {
          pitchBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x40000000);
        if (rollBuilder_ == null) {
          roll_ = SensorData.getDefaultInstance();
        } else {
          rollBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x80000000);
        if (yawBuilder_ == null) {
          yaw_ = SensorData.getDefaultInstance();
        } else {
          yawBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000001);
        if (flameBuilder_ == null) {
          flame_ = SensorDataInt.getDefaultInstance();
        } else {
          flameBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000002);
        if (artificialGasBuilder_ == null) {
          artificialGas_ = SensorData.getDefaultInstance();
        } else {
          artificialGasBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000004);
        if (multiTempBuilder_ == null) {
          multiTemp_ = MultiSensorDataInt.getDefaultInstance();
        } else {
          multiTempBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000008);
        if (waterPressureBuilder_ == null) {
          waterPressure_ = SensorData.getDefaultInstance();
        } else {
          waterPressureBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000010);
        if (ibeaconBuilder_ == null) {
          ibeacon_ = iBeacon.getDefaultInstance();
        } else {
          ibeaconBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000020);
        if (sensorsBuilder_ == null) {
          sensors_ = java.util.Collections.emptyList();
          bitField1_ = (bitField1_ & ~0x00000040);
        } else {
          sensorsBuilder_.clear();
        }
        installed_ = false;
        bitField1_ = (bitField1_ & ~0x00000080);
        if (extSmokeBuilder_ == null) {
          extSmoke_ = ExtSmoke.getDefaultInstance();
        } else {
          extSmokeBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000100);
        if (fireDataBuilder_ == null) {
          fireData_ = ElecFireData.getDefaultInstance();
        } else {
          fireDataBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000200);
        if (mtunDataBuilder_ == null) {
          mtunData_ = java.util.Collections.emptyList();
          bitField1_ = (bitField1_ & ~0x00000400);
        } else {
          mtunDataBuilder_.clear();
        }
        if (acrelDataBuilder_ == null) {
          acrelData_ = AcrelData.getDefaultInstance();
        } else {
          acrelDataBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000800);
        if (caymanDataBuilder_ == null) {
          caymanData_ = Cayman.getDefaultInstance();
        } else {
          caymanDataBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00001000);
        if (baymaxDataBuilder_ == null) {
          baymaxData_ = Baymax.getDefaultInstance();
        } else {
          baymaxDataBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00002000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_MsgNode_descriptor;
      }

      public MsgNode getDefaultInstanceForType() {
        return MsgNode.getDefaultInstance();
      }

      public MsgNode build() {
        MsgNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public MsgNode buildPartial() {
        MsgNode result = new MsgNode(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cmd_ = cmd_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cmdRet_ = cmdRet_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (lpwanParamBuilder_ == null) {
          result.lpwanParam_ = lpwanParam_;
        } else {
          result.lpwanParam_ = lpwanParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (bleParamBuilder_ == null) {
          result.bleParam_ = bleParam_;
        } else {
          result.bleParam_ = bleParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (appParamBuilder_ == null) {
          result.appParam_ = appParam_;
        } else {
          result.appParam_ = appParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.battery_ = battery_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (gpsBuilder_ == null) {
          result.gps_ = gps_;
        } else {
          result.gps_ = gpsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (accelerationBuilder_ == null) {
          result.acceleration_ = acceleration_;
        } else {
          result.acceleration_ = accelerationBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        if (magnetismBuilder_ == null) {
          result.magnetism_ = magnetism_;
        } else {
          result.magnetism_ = magnetismBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (gyroscopeBuilder_ == null) {
          result.gyroscope_ = gyroscope_;
        } else {
          result.gyroscope_ = gyroscopeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        if (temperatureBuilder_ == null) {
          result.temperature_ = temperature_;
        } else {
          result.temperature_ = temperatureBuilder_.build();
        }
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        if (humidityBuilder_ == null) {
          result.humidity_ = humidity_;
        } else {
          result.humidity_ = humidityBuilder_.build();
        }
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        if (lightBuilder_ == null) {
          result.light_ = light_;
        } else {
          result.light_ = lightBuilder_.build();
        }
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        if (leakBuilder_ == null) {
          result.leak_ = leak_;
        } else {
          result.leak_ = leakBuilder_.build();
        }
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        if (coBuilder_ == null) {
          result.co_ = co_;
        } else {
          result.co_ = coBuilder_.build();
        }
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        if (co2Builder_ == null) {
          result.co2_ = co2_;
        } else {
          result.co2_ = co2Builder_.build();
        }
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        if (so2Builder_ == null) {
          result.so2_ = so2_;
        } else {
          result.so2_ = so2Builder_.build();
        }
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        if (no2Builder_ == null) {
          result.no2_ = no2_;
        } else {
          result.no2_ = no2Builder_.build();
        }
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        if (ch4Builder_ == null) {
          result.ch4_ = ch4_;
        } else {
          result.ch4_ = ch4Builder_.build();
        }
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        if (ch2OBuilder_ == null) {
          result.ch2O_ = ch2O_;
        } else {
          result.ch2O_ = ch2OBuilder_.build();
        }
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        if (lpgBuilder_ == null) {
          result.lpg_ = lpg_;
        } else {
          result.lpg_ = lpgBuilder_.build();
        }
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        if (o3Builder_ == null) {
          result.o3_ = o3_;
        } else {
          result.o3_ = o3Builder_.build();
        }
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        if (pm1Builder_ == null) {
          result.pm1_ = pm1_;
        } else {
          result.pm1_ = pm1Builder_.build();
        }
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        if (pm25Builder_ == null) {
          result.pm25_ = pm25_;
        } else {
          result.pm25_ = pm25Builder_.build();
        }
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        if (pm10Builder_ == null) {
          result.pm10_ = pm10_;
        } else {
          result.pm10_ = pm10Builder_.build();
        }
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        if (angleBuilder_ == null) {
          result.angle_ = angle_;
        } else {
          result.angle_ = angleBuilder_.build();
        }
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        if (coverBuilder_ == null) {
          result.cover_ = cover_;
        } else {
          result.cover_ = coverBuilder_.build();
        }
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        if (levelBuilder_ == null) {
          result.level_ = level_;
        } else {
          result.level_ = levelBuilder_.build();
        }
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        if (smokeBuilder_ == null) {
          result.smoke_ = smoke_;
        } else {
          result.smoke_ = smokeBuilder_.build();
        }
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x40000000;
        }
        if (pitchBuilder_ == null) {
          result.pitch_ = pitch_;
        } else {
          result.pitch_ = pitchBuilder_.build();
        }
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x80000000;
        }
        if (rollBuilder_ == null) {
          result.roll_ = roll_;
        } else {
          result.roll_ = rollBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField1_ |= 0x00000001;
        }
        if (yawBuilder_ == null) {
          result.yaw_ = yaw_;
        } else {
          result.yaw_ = yawBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField1_ |= 0x00000002;
        }
        if (flameBuilder_ == null) {
          result.flame_ = flame_;
        } else {
          result.flame_ = flameBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x00000004;
        }
        if (artificialGasBuilder_ == null) {
          result.artificialGas_ = artificialGas_;
        } else {
          result.artificialGas_ = artificialGasBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField1_ |= 0x00000008;
        }
        if (multiTempBuilder_ == null) {
          result.multiTemp_ = multiTemp_;
        } else {
          result.multiTemp_ = multiTempBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000010;
        }
        if (waterPressureBuilder_ == null) {
          result.waterPressure_ = waterPressure_;
        } else {
          result.waterPressure_ = waterPressureBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField1_ |= 0x00000020;
        }
        if (ibeaconBuilder_ == null) {
          result.ibeacon_ = ibeacon_;
        } else {
          result.ibeacon_ = ibeaconBuilder_.build();
        }
        if (sensorsBuilder_ == null) {
          if (((bitField1_ & 0x00000040) == 0x00000040)) {
            sensors_ = java.util.Collections.unmodifiableList(sensors_);
            bitField1_ = (bitField1_ & ~0x00000040);
          }
          result.sensors_ = sensors_;
        } else {
          result.sensors_ = sensorsBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000040;
        }
        result.installed_ = installed_;
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000080;
        }
        if (extSmokeBuilder_ == null) {
          result.extSmoke_ = extSmoke_;
        } else {
          result.extSmoke_ = extSmokeBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000100;
        }
        if (fireDataBuilder_ == null) {
          result.fireData_ = fireData_;
        } else {
          result.fireData_ = fireDataBuilder_.build();
        }
        if (mtunDataBuilder_ == null) {
          if (((bitField1_ & 0x00000400) == 0x00000400)) {
            mtunData_ = java.util.Collections.unmodifiableList(mtunData_);
            bitField1_ = (bitField1_ & ~0x00000400);
          }
          result.mtunData_ = mtunData_;
        } else {
          result.mtunData_ = mtunDataBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
          to_bitField1_ |= 0x00000200;
        }
        if (acrelDataBuilder_ == null) {
          result.acrelData_ = acrelData_;
        } else {
          result.acrelData_ = acrelDataBuilder_.build();
        }
        if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
          to_bitField1_ |= 0x00000400;
        }
        if (caymanDataBuilder_ == null) {
          result.caymanData_ = caymanData_;
        } else {
          result.caymanData_ = caymanDataBuilder_.build();
        }
        if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
          to_bitField1_ |= 0x00000800;
        }
        if (baymaxDataBuilder_ == null) {
          result.baymaxData_ = baymaxData_;
        } else {
          result.baymaxData_ = baymaxDataBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof MsgNode) {
          return mergeFrom((MsgNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(MsgNode other) {
        if (other == MsgNode.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasCmd()) {
          setCmd(other.getCmd());
        }
        if (other.hasCmdRet()) {
          setCmdRet(other.getCmdRet());
        }
        if (other.hasLpwanParam()) {
          mergeLpwanParam(other.getLpwanParam());
        }
        if (other.hasBleParam()) {
          mergeBleParam(other.getBleParam());
        }
        if (other.hasAppParam()) {
          mergeAppParam(other.getAppParam());
        }
        if (other.hasBattery()) {
          setBattery(other.getBattery());
        }
        if (other.hasGps()) {
          mergeGps(other.getGps());
        }
        if (other.hasAcceleration()) {
          mergeAcceleration(other.getAcceleration());
        }
        if (other.hasMagnetism()) {
          mergeMagnetism(other.getMagnetism());
        }
        if (other.hasGyroscope()) {
          mergeGyroscope(other.getGyroscope());
        }
        if (other.hasTemperature()) {
          mergeTemperature(other.getTemperature());
        }
        if (other.hasHumidity()) {
          mergeHumidity(other.getHumidity());
        }
        if (other.hasLight()) {
          mergeLight(other.getLight());
        }
        if (other.hasLeak()) {
          mergeLeak(other.getLeak());
        }
        if (other.hasCo()) {
          mergeCo(other.getCo());
        }
        if (other.hasCo2()) {
          mergeCo2(other.getCo2());
        }
        if (other.hasSo2()) {
          mergeSo2(other.getSo2());
        }
        if (other.hasNo2()) {
          mergeNo2(other.getNo2());
        }
        if (other.hasCh4()) {
          mergeCh4(other.getCh4());
        }
        if (other.hasCh2O()) {
          mergeCh2O(other.getCh2O());
        }
        if (other.hasLpg()) {
          mergeLpg(other.getLpg());
        }
        if (other.hasO3()) {
          mergeO3(other.getO3());
        }
        if (other.hasPm1()) {
          mergePm1(other.getPm1());
        }
        if (other.hasPm25()) {
          mergePm25(other.getPm25());
        }
        if (other.hasPm10()) {
          mergePm10(other.getPm10());
        }
        if (other.hasAngle()) {
          mergeAngle(other.getAngle());
        }
        if (other.hasCover()) {
          mergeCover(other.getCover());
        }
        if (other.hasLevel()) {
          mergeLevel(other.getLevel());
        }
        if (other.hasSmoke()) {
          mergeSmoke(other.getSmoke());
        }
        if (other.hasPitch()) {
          mergePitch(other.getPitch());
        }
        if (other.hasRoll()) {
          mergeRoll(other.getRoll());
        }
        if (other.hasYaw()) {
          mergeYaw(other.getYaw());
        }
        if (other.hasFlame()) {
          mergeFlame(other.getFlame());
        }
        if (other.hasArtificialGas()) {
          mergeArtificialGas(other.getArtificialGas());
        }
        if (other.hasMultiTemp()) {
          mergeMultiTemp(other.getMultiTemp());
        }
        if (other.hasWaterPressure()) {
          mergeWaterPressure(other.getWaterPressure());
        }
        if (other.hasIbeacon()) {
          mergeIbeacon(other.getIbeacon());
        }
        if (sensorsBuilder_ == null) {
          if (!other.sensors_.isEmpty()) {
            if (sensors_.isEmpty()) {
              sensors_ = other.sensors_;
              bitField1_ = (bitField1_ & ~0x00000040);
            } else {
              ensureSensorsIsMutable();
              sensors_.addAll(other.sensors_);
            }
            onChanged();
          }
        } else {
          if (!other.sensors_.isEmpty()) {
            if (sensorsBuilder_.isEmpty()) {
              sensorsBuilder_.dispose();
              sensorsBuilder_ = null;
              sensors_ = other.sensors_;
              bitField1_ = (bitField1_ & ~0x00000040);
              sensorsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSensorsFieldBuilder() : null;
            } else {
              sensorsBuilder_.addAllMessages(other.sensors_);
            }
          }
        }
        if (other.hasInstalled()) {
          setInstalled(other.getInstalled());
        }
        if (other.hasExtSmoke()) {
          mergeExtSmoke(other.getExtSmoke());
        }
        if (other.hasFireData()) {
          mergeFireData(other.getFireData());
        }
        if (mtunDataBuilder_ == null) {
          if (!other.mtunData_.isEmpty()) {
            if (mtunData_.isEmpty()) {
              mtunData_ = other.mtunData_;
              bitField1_ = (bitField1_ & ~0x00000400);
            } else {
              ensureMtunDataIsMutable();
              mtunData_.addAll(other.mtunData_);
            }
            onChanged();
          }
        } else {
          if (!other.mtunData_.isEmpty()) {
            if (mtunDataBuilder_.isEmpty()) {
              mtunDataBuilder_.dispose();
              mtunDataBuilder_ = null;
              mtunData_ = other.mtunData_;
              bitField1_ = (bitField1_ & ~0x00000400);
              mtunDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMtunDataFieldBuilder() : null;
            } else {
              mtunDataBuilder_.addAllMessages(other.mtunData_);
            }
          }
        }
        if (other.hasAcrelData()) {
          mergeAcrelData(other.getAcrelData());
        }
        if (other.hasCaymanData()) {
          mergeCaymanData(other.getCaymanData());
        }
        if (other.hasBaymaxData()) {
          mergeBaymaxData(other.getBaymaxData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasLpwanParam()) {
          if (!getLpwanParam().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        MsgNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (MsgNode) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      // optional uint32 id = 1;
      private int id_ ;
      /**
       * <code>optional uint32 id = 1;</code>
       *
       * <pre>
       * 任务id (上|下)
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 id = 1;</code>
       *
       * <pre>
       * 任务id (上|下)
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>optional uint32 id = 1;</code>
       *
       * <pre>
       * 任务id (上|下)
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 id = 1;</code>
       *
       * <pre>
       * 任务id (上|下)
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 cmd = 2;
      private int cmd_ ;
      /**
       * <code>optional uint32 cmd = 2;</code>
       *
       * <pre>
       * 任务类型(没用)
       * </pre>
       */
      public boolean hasCmd() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 cmd = 2;</code>
       *
       * <pre>
       * 任务类型(没用)
       * </pre>
       */
      public int getCmd() {
        return cmd_;
      }
      /**
       * <code>optional uint32 cmd = 2;</code>
       *
       * <pre>
       * 任务类型(没用)
       * </pre>
       */
      public Builder setCmd(int value) {
        bitField0_ |= 0x00000002;
        cmd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cmd = 2;</code>
       *
       * <pre>
       * 任务类型(没用)
       * </pre>
       */
      public Builder clearCmd() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cmd_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 cmdRet = 3;
      private int cmdRet_ ;
      /**
       * <code>optional uint32 cmdRet = 3;</code>
       *
       * <pre>
       * 任务返回 (上)
       * </pre>
       */
      public boolean hasCmdRet() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 cmdRet = 3;</code>
       *
       * <pre>
       * 任务返回 (上)
       * </pre>
       */
      public int getCmdRet() {
        return cmdRet_;
      }
      /**
       * <code>optional uint32 cmdRet = 3;</code>
       *
       * <pre>
       * 任务返回 (上)
       * </pre>
       */
      public Builder setCmdRet(int value) {
        bitField0_ |= 0x00000004;
        cmdRet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cmdRet = 3;</code>
       *
       * <pre>
       * 任务返回 (上)
       * </pre>
       */
      public Builder clearCmdRet() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cmdRet_ = 0;
        onChanged();
        return this;
      }

      // optional .LpwanParam lpwanParam = 4;
      private LpwanParam lpwanParam_ = LpwanParam.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          LpwanParam, LpwanParam.Builder, LpwanParamOrBuilder> lpwanParamBuilder_;
      /**
       * <code>optional .LpwanParam lpwanParam = 4;</code>
       *
       * <pre>
       * lpwan 参数 (上|下)
       * </pre>
       */
      public boolean hasLpwanParam() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .LpwanParam lpwanParam = 4;</code>
       *
       * <pre>
       * lpwan 参数 (上|下)
       * </pre>
       */
      public LpwanParam getLpwanParam() {
        if (lpwanParamBuilder_ == null) {
          return lpwanParam_;
        } else {
          return lpwanParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .LpwanParam lpwanParam = 4;</code>
       *
       * <pre>
       * lpwan 参数 (上|下)
       * </pre>
       */
      public Builder setLpwanParam(LpwanParam value) {
        if (lpwanParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lpwanParam_ = value;
          onChanged();
        } else {
          lpwanParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .LpwanParam lpwanParam = 4;</code>
       *
       * <pre>
       * lpwan 参数 (上|下)
       * </pre>
       */
      public Builder setLpwanParam(
          LpwanParam.Builder builderForValue) {
        if (lpwanParamBuilder_ == null) {
          lpwanParam_ = builderForValue.build();
          onChanged();
        } else {
          lpwanParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .LpwanParam lpwanParam = 4;</code>
       *
       * <pre>
       * lpwan 参数 (上|下)
       * </pre>
       */
      public Builder mergeLpwanParam(LpwanParam value) {
        if (lpwanParamBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              lpwanParam_ != LpwanParam.getDefaultInstance()) {
            lpwanParam_ =
              LpwanParam.newBuilder(lpwanParam_).mergeFrom(value).buildPartial();
          } else {
            lpwanParam_ = value;
          }
          onChanged();
        } else {
          lpwanParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .LpwanParam lpwanParam = 4;</code>
       *
       * <pre>
       * lpwan 参数 (上|下)
       * </pre>
       */
      public Builder clearLpwanParam() {
        if (lpwanParamBuilder_ == null) {
          lpwanParam_ = LpwanParam.getDefaultInstance();
          onChanged();
        } else {
          lpwanParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .LpwanParam lpwanParam = 4;</code>
       *
       * <pre>
       * lpwan 参数 (上|下)
       * </pre>
       */
      public LpwanParam.Builder getLpwanParamBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getLpwanParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .LpwanParam lpwanParam = 4;</code>
       *
       * <pre>
       * lpwan 参数 (上|下)
       * </pre>
       */
      public LpwanParamOrBuilder getLpwanParamOrBuilder() {
        if (lpwanParamBuilder_ != null) {
          return lpwanParamBuilder_.getMessageOrBuilder();
        } else {
          return lpwanParam_;
        }
      }
      /**
       * <code>optional .LpwanParam lpwanParam = 4;</code>
       *
       * <pre>
       * lpwan 参数 (上|下)
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          LpwanParam, LpwanParam.Builder, LpwanParamOrBuilder>
          getLpwanParamFieldBuilder() {
        if (lpwanParamBuilder_ == null) {
          lpwanParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              LpwanParam, LpwanParam.Builder, LpwanParamOrBuilder>(
                  lpwanParam_,
                  getParentForChildren(),
                  isClean());
          lpwanParam_ = null;
        }
        return lpwanParamBuilder_;
      }

      // optional .BleParam bleParam = 5;
      private BleParam bleParam_ = BleParam.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          BleParam, BleParam.Builder, BleParamOrBuilder> bleParamBuilder_;
      /**
       * <code>optional .BleParam bleParam = 5;</code>
       *
       * <pre>
       * ble 参数 (上|下)
       * </pre>
       */
      public boolean hasBleParam() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .BleParam bleParam = 5;</code>
       *
       * <pre>
       * ble 参数 (上|下)
       * </pre>
       */
      public BleParam getBleParam() {
        if (bleParamBuilder_ == null) {
          return bleParam_;
        } else {
          return bleParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .BleParam bleParam = 5;</code>
       *
       * <pre>
       * ble 参数 (上|下)
       * </pre>
       */
      public Builder setBleParam(BleParam value) {
        if (bleParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          bleParam_ = value;
          onChanged();
        } else {
          bleParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .BleParam bleParam = 5;</code>
       *
       * <pre>
       * ble 参数 (上|下)
       * </pre>
       */
      public Builder setBleParam(
          BleParam.Builder builderForValue) {
        if (bleParamBuilder_ == null) {
          bleParam_ = builderForValue.build();
          onChanged();
        } else {
          bleParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .BleParam bleParam = 5;</code>
       *
       * <pre>
       * ble 参数 (上|下)
       * </pre>
       */
      public Builder mergeBleParam(BleParam value) {
        if (bleParamBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              bleParam_ != BleParam.getDefaultInstance()) {
            bleParam_ =
              BleParam.newBuilder(bleParam_).mergeFrom(value).buildPartial();
          } else {
            bleParam_ = value;
          }
          onChanged();
        } else {
          bleParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .BleParam bleParam = 5;</code>
       *
       * <pre>
       * ble 参数 (上|下)
       * </pre>
       */
      public Builder clearBleParam() {
        if (bleParamBuilder_ == null) {
          bleParam_ = BleParam.getDefaultInstance();
          onChanged();
        } else {
          bleParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .BleParam bleParam = 5;</code>
       *
       * <pre>
       * ble 参数 (上|下)
       * </pre>
       */
      public BleParam.Builder getBleParamBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getBleParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .BleParam bleParam = 5;</code>
       *
       * <pre>
       * ble 参数 (上|下)
       * </pre>
       */
      public BleParamOrBuilder getBleParamOrBuilder() {
        if (bleParamBuilder_ != null) {
          return bleParamBuilder_.getMessageOrBuilder();
        } else {
          return bleParam_;
        }
      }
      /**
       * <code>optional .BleParam bleParam = 5;</code>
       *
       * <pre>
       * ble 参数 (上|下)
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          BleParam, BleParam.Builder, BleParamOrBuilder>
          getBleParamFieldBuilder() {
        if (bleParamBuilder_ == null) {
          bleParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              BleParam, BleParam.Builder, BleParamOrBuilder>(
                  bleParam_,
                  getParentForChildren(),
                  isClean());
          bleParam_ = null;
        }
        return bleParamBuilder_;
      }

      // optional .AppParam appParam = 6;
      private AppParam appParam_ = AppParam.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          AppParam, AppParam.Builder, AppParamOrBuilder> appParamBuilder_;
      /**
       * <code>optional .AppParam appParam = 6;</code>
       *
       * <pre>
       * 应用参数 (上|下)
       * </pre>
       */
      public boolean hasAppParam() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .AppParam appParam = 6;</code>
       *
       * <pre>
       * 应用参数 (上|下)
       * </pre>
       */
      public AppParam getAppParam() {
        if (appParamBuilder_ == null) {
          return appParam_;
        } else {
          return appParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .AppParam appParam = 6;</code>
       *
       * <pre>
       * 应用参数 (上|下)
       * </pre>
       */
      public Builder setAppParam(AppParam value) {
        if (appParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          appParam_ = value;
          onChanged();
        } else {
          appParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .AppParam appParam = 6;</code>
       *
       * <pre>
       * 应用参数 (上|下)
       * </pre>
       */
      public Builder setAppParam(
          AppParam.Builder builderForValue) {
        if (appParamBuilder_ == null) {
          appParam_ = builderForValue.build();
          onChanged();
        } else {
          appParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .AppParam appParam = 6;</code>
       *
       * <pre>
       * 应用参数 (上|下)
       * </pre>
       */
      public Builder mergeAppParam(AppParam value) {
        if (appParamBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              appParam_ != AppParam.getDefaultInstance()) {
            appParam_ =
              AppParam.newBuilder(appParam_).mergeFrom(value).buildPartial();
          } else {
            appParam_ = value;
          }
          onChanged();
        } else {
          appParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .AppParam appParam = 6;</code>
       *
       * <pre>
       * 应用参数 (上|下)
       * </pre>
       */
      public Builder clearAppParam() {
        if (appParamBuilder_ == null) {
          appParam_ = AppParam.getDefaultInstance();
          onChanged();
        } else {
          appParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .AppParam appParam = 6;</code>
       *
       * <pre>
       * 应用参数 (上|下)
       * </pre>
       */
      public AppParam.Builder getAppParamBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getAppParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .AppParam appParam = 6;</code>
       *
       * <pre>
       * 应用参数 (上|下)
       * </pre>
       */
      public AppParamOrBuilder getAppParamOrBuilder() {
        if (appParamBuilder_ != null) {
          return appParamBuilder_.getMessageOrBuilder();
        } else {
          return appParam_;
        }
      }
      /**
       * <code>optional .AppParam appParam = 6;</code>
       *
       * <pre>
       * 应用参数 (上|下)
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          AppParam, AppParam.Builder, AppParamOrBuilder>
          getAppParamFieldBuilder() {
        if (appParamBuilder_ == null) {
          appParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              AppParam, AppParam.Builder, AppParamOrBuilder>(
                  appParam_,
                  getParentForChildren(),
                  isClean());
          appParam_ = null;
        }
        return appParamBuilder_;
      }

      // optional sint32 battery = 7;
      private int battery_ ;
      /**
       * <code>optional sint32 battery = 7;</code>
       *
       * <pre>
       * 电量 (上)
       * </pre>
       */
      public boolean hasBattery() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional sint32 battery = 7;</code>
       *
       * <pre>
       * 电量 (上)
       * </pre>
       */
      public int getBattery() {
        return battery_;
      }
      /**
       * <code>optional sint32 battery = 7;</code>
       *
       * <pre>
       * 电量 (上)
       * </pre>
       */
      public Builder setBattery(int value) {
        bitField0_ |= 0x00000040;
        battery_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 battery = 7;</code>
       *
       * <pre>
       * 电量 (上)
       * </pre>
       */
      public Builder clearBattery() {
        bitField0_ = (bitField0_ & ~0x00000040);
        battery_ = 0;
        onChanged();
        return this;
      }

      // optional .GpsData gps = 8;
      private GpsData gps_ = GpsData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          GpsData, GpsData.Builder, GpsDataOrBuilder> gpsBuilder_;
      /**
       * <code>optional .GpsData gps = 8;</code>
       */
      public boolean hasGps() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .GpsData gps = 8;</code>
       */
      public GpsData getGps() {
        if (gpsBuilder_ == null) {
          return gps_;
        } else {
          return gpsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .GpsData gps = 8;</code>
       */
      public Builder setGps(GpsData value) {
        if (gpsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gps_ = value;
          onChanged();
        } else {
          gpsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .GpsData gps = 8;</code>
       */
      public Builder setGps(
          GpsData.Builder builderForValue) {
        if (gpsBuilder_ == null) {
          gps_ = builderForValue.build();
          onChanged();
        } else {
          gpsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .GpsData gps = 8;</code>
       */
      public Builder mergeGps(GpsData value) {
        if (gpsBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              gps_ != GpsData.getDefaultInstance()) {
            gps_ =
              GpsData.newBuilder(gps_).mergeFrom(value).buildPartial();
          } else {
            gps_ = value;
          }
          onChanged();
        } else {
          gpsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .GpsData gps = 8;</code>
       */
      public Builder clearGps() {
        if (gpsBuilder_ == null) {
          gps_ = GpsData.getDefaultInstance();
          onChanged();
        } else {
          gpsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .GpsData gps = 8;</code>
       */
      public GpsData.Builder getGpsBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getGpsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .GpsData gps = 8;</code>
       */
      public GpsDataOrBuilder getGpsOrBuilder() {
        if (gpsBuilder_ != null) {
          return gpsBuilder_.getMessageOrBuilder();
        } else {
          return gps_;
        }
      }
      /**
       * <code>optional .GpsData gps = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          GpsData, GpsData.Builder, GpsDataOrBuilder>
          getGpsFieldBuilder() {
        if (gpsBuilder_ == null) {
          gpsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              GpsData, GpsData.Builder, GpsDataOrBuilder>(
                  gps_,
                  getParentForChildren(),
                  isClean());
          gps_ = null;
        }
        return gpsBuilder_;
      }

      // optional .AxisData acceleration = 9;
      private AxisData acceleration_ = AxisData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          AxisData, AxisData.Builder, AxisDataOrBuilder> accelerationBuilder_;
      /**
       * <code>optional .AxisData acceleration = 9;</code>
       */
      public boolean hasAcceleration() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .AxisData acceleration = 9;</code>
       */
      public AxisData getAcceleration() {
        if (accelerationBuilder_ == null) {
          return acceleration_;
        } else {
          return accelerationBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .AxisData acceleration = 9;</code>
       */
      public Builder setAcceleration(AxisData value) {
        if (accelerationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          acceleration_ = value;
          onChanged();
        } else {
          accelerationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .AxisData acceleration = 9;</code>
       */
      public Builder setAcceleration(
          AxisData.Builder builderForValue) {
        if (accelerationBuilder_ == null) {
          acceleration_ = builderForValue.build();
          onChanged();
        } else {
          accelerationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .AxisData acceleration = 9;</code>
       */
      public Builder mergeAcceleration(AxisData value) {
        if (accelerationBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              acceleration_ != AxisData.getDefaultInstance()) {
            acceleration_ =
              AxisData.newBuilder(acceleration_).mergeFrom(value).buildPartial();
          } else {
            acceleration_ = value;
          }
          onChanged();
        } else {
          accelerationBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .AxisData acceleration = 9;</code>
       */
      public Builder clearAcceleration() {
        if (accelerationBuilder_ == null) {
          acceleration_ = AxisData.getDefaultInstance();
          onChanged();
        } else {
          accelerationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .AxisData acceleration = 9;</code>
       */
      public AxisData.Builder getAccelerationBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getAccelerationFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .AxisData acceleration = 9;</code>
       */
      public AxisDataOrBuilder getAccelerationOrBuilder() {
        if (accelerationBuilder_ != null) {
          return accelerationBuilder_.getMessageOrBuilder();
        } else {
          return acceleration_;
        }
      }
      /**
       * <code>optional .AxisData acceleration = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          AxisData, AxisData.Builder, AxisDataOrBuilder>
          getAccelerationFieldBuilder() {
        if (accelerationBuilder_ == null) {
          accelerationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              AxisData, AxisData.Builder, AxisDataOrBuilder>(
                  acceleration_,
                  getParentForChildren(),
                  isClean());
          acceleration_ = null;
        }
        return accelerationBuilder_;
      }

      // optional .AxisData magnetism = 10;
      private AxisData magnetism_ = AxisData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          AxisData, AxisData.Builder, AxisDataOrBuilder> magnetismBuilder_;
      /**
       * <code>optional .AxisData magnetism = 10;</code>
       */
      public boolean hasMagnetism() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .AxisData magnetism = 10;</code>
       */
      public AxisData getMagnetism() {
        if (magnetismBuilder_ == null) {
          return magnetism_;
        } else {
          return magnetismBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .AxisData magnetism = 10;</code>
       */
      public Builder setMagnetism(AxisData value) {
        if (magnetismBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          magnetism_ = value;
          onChanged();
        } else {
          magnetismBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .AxisData magnetism = 10;</code>
       */
      public Builder setMagnetism(
          AxisData.Builder builderForValue) {
        if (magnetismBuilder_ == null) {
          magnetism_ = builderForValue.build();
          onChanged();
        } else {
          magnetismBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .AxisData magnetism = 10;</code>
       */
      public Builder mergeMagnetism(AxisData value) {
        if (magnetismBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              magnetism_ != AxisData.getDefaultInstance()) {
            magnetism_ =
              AxisData.newBuilder(magnetism_).mergeFrom(value).buildPartial();
          } else {
            magnetism_ = value;
          }
          onChanged();
        } else {
          magnetismBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .AxisData magnetism = 10;</code>
       */
      public Builder clearMagnetism() {
        if (magnetismBuilder_ == null) {
          magnetism_ = AxisData.getDefaultInstance();
          onChanged();
        } else {
          magnetismBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      /**
       * <code>optional .AxisData magnetism = 10;</code>
       */
      public AxisData.Builder getMagnetismBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getMagnetismFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .AxisData magnetism = 10;</code>
       */
      public AxisDataOrBuilder getMagnetismOrBuilder() {
        if (magnetismBuilder_ != null) {
          return magnetismBuilder_.getMessageOrBuilder();
        } else {
          return magnetism_;
        }
      }
      /**
       * <code>optional .AxisData magnetism = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          AxisData, AxisData.Builder, AxisDataOrBuilder>
          getMagnetismFieldBuilder() {
        if (magnetismBuilder_ == null) {
          magnetismBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              AxisData, AxisData.Builder, AxisDataOrBuilder>(
                  magnetism_,
                  getParentForChildren(),
                  isClean());
          magnetism_ = null;
        }
        return magnetismBuilder_;
      }

      // optional .AxisData gyroscope = 11;
      private AxisData gyroscope_ = AxisData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          AxisData, AxisData.Builder, AxisDataOrBuilder> gyroscopeBuilder_;
      /**
       * <code>optional .AxisData gyroscope = 11;</code>
       */
      public boolean hasGyroscope() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .AxisData gyroscope = 11;</code>
       */
      public AxisData getGyroscope() {
        if (gyroscopeBuilder_ == null) {
          return gyroscope_;
        } else {
          return gyroscopeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .AxisData gyroscope = 11;</code>
       */
      public Builder setGyroscope(AxisData value) {
        if (gyroscopeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gyroscope_ = value;
          onChanged();
        } else {
          gyroscopeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .AxisData gyroscope = 11;</code>
       */
      public Builder setGyroscope(
          AxisData.Builder builderForValue) {
        if (gyroscopeBuilder_ == null) {
          gyroscope_ = builderForValue.build();
          onChanged();
        } else {
          gyroscopeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .AxisData gyroscope = 11;</code>
       */
      public Builder mergeGyroscope(AxisData value) {
        if (gyroscopeBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              gyroscope_ != AxisData.getDefaultInstance()) {
            gyroscope_ =
              AxisData.newBuilder(gyroscope_).mergeFrom(value).buildPartial();
          } else {
            gyroscope_ = value;
          }
          onChanged();
        } else {
          gyroscopeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .AxisData gyroscope = 11;</code>
       */
      public Builder clearGyroscope() {
        if (gyroscopeBuilder_ == null) {
          gyroscope_ = AxisData.getDefaultInstance();
          onChanged();
        } else {
          gyroscopeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .AxisData gyroscope = 11;</code>
       */
      public AxisData.Builder getGyroscopeBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getGyroscopeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .AxisData gyroscope = 11;</code>
       */
      public AxisDataOrBuilder getGyroscopeOrBuilder() {
        if (gyroscopeBuilder_ != null) {
          return gyroscopeBuilder_.getMessageOrBuilder();
        } else {
          return gyroscope_;
        }
      }
      /**
       * <code>optional .AxisData gyroscope = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          AxisData, AxisData.Builder, AxisDataOrBuilder>
          getGyroscopeFieldBuilder() {
        if (gyroscopeBuilder_ == null) {
          gyroscopeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              AxisData, AxisData.Builder, AxisDataOrBuilder>(
                  gyroscope_,
                  getParentForChildren(),
                  isClean());
          gyroscope_ = null;
        }
        return gyroscopeBuilder_;
      }

      // optional .SensorData temperature = 12;
      private SensorData temperature_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> temperatureBuilder_;
      /**
       * <code>optional .SensorData temperature = 12;</code>
       *
       * <pre>
       * 温度
       * </pre>
       */
      public boolean hasTemperature() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .SensorData temperature = 12;</code>
       *
       * <pre>
       * 温度
       * </pre>
       */
      public SensorData getTemperature() {
        if (temperatureBuilder_ == null) {
          return temperature_;
        } else {
          return temperatureBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData temperature = 12;</code>
       *
       * <pre>
       * 温度
       * </pre>
       */
      public Builder setTemperature(SensorData value) {
        if (temperatureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          temperature_ = value;
          onChanged();
        } else {
          temperatureBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .SensorData temperature = 12;</code>
       *
       * <pre>
       * 温度
       * </pre>
       */
      public Builder setTemperature(
          SensorData.Builder builderForValue) {
        if (temperatureBuilder_ == null) {
          temperature_ = builderForValue.build();
          onChanged();
        } else {
          temperatureBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .SensorData temperature = 12;</code>
       *
       * <pre>
       * 温度
       * </pre>
       */
      public Builder mergeTemperature(SensorData value) {
        if (temperatureBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              temperature_ != SensorData.getDefaultInstance()) {
            temperature_ =
              SensorData.newBuilder(temperature_).mergeFrom(value).buildPartial();
          } else {
            temperature_ = value;
          }
          onChanged();
        } else {
          temperatureBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .SensorData temperature = 12;</code>
       *
       * <pre>
       * 温度
       * </pre>
       */
      public Builder clearTemperature() {
        if (temperatureBuilder_ == null) {
          temperature_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          temperatureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      /**
       * <code>optional .SensorData temperature = 12;</code>
       *
       * <pre>
       * 温度
       * </pre>
       */
      public SensorData.Builder getTemperatureBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getTemperatureFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData temperature = 12;</code>
       *
       * <pre>
       * 温度
       * </pre>
       */
      public SensorDataOrBuilder getTemperatureOrBuilder() {
        if (temperatureBuilder_ != null) {
          return temperatureBuilder_.getMessageOrBuilder();
        } else {
          return temperature_;
        }
      }
      /**
       * <code>optional .SensorData temperature = 12;</code>
       *
       * <pre>
       * 温度
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getTemperatureFieldBuilder() {
        if (temperatureBuilder_ == null) {
          temperatureBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  temperature_,
                  getParentForChildren(),
                  isClean());
          temperature_ = null;
        }
        return temperatureBuilder_;
      }

      // optional .SensorData humidity = 13;
      private SensorData humidity_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> humidityBuilder_;
      /**
       * <code>optional .SensorData humidity = 13;</code>
       *
       * <pre>
       * 湿度
       * </pre>
       */
      public boolean hasHumidity() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .SensorData humidity = 13;</code>
       *
       * <pre>
       * 湿度
       * </pre>
       */
      public SensorData getHumidity() {
        if (humidityBuilder_ == null) {
          return humidity_;
        } else {
          return humidityBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData humidity = 13;</code>
       *
       * <pre>
       * 湿度
       * </pre>
       */
      public Builder setHumidity(SensorData value) {
        if (humidityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          humidity_ = value;
          onChanged();
        } else {
          humidityBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .SensorData humidity = 13;</code>
       *
       * <pre>
       * 湿度
       * </pre>
       */
      public Builder setHumidity(
          SensorData.Builder builderForValue) {
        if (humidityBuilder_ == null) {
          humidity_ = builderForValue.build();
          onChanged();
        } else {
          humidityBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .SensorData humidity = 13;</code>
       *
       * <pre>
       * 湿度
       * </pre>
       */
      public Builder mergeHumidity(SensorData value) {
        if (humidityBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              humidity_ != SensorData.getDefaultInstance()) {
            humidity_ =
              SensorData.newBuilder(humidity_).mergeFrom(value).buildPartial();
          } else {
            humidity_ = value;
          }
          onChanged();
        } else {
          humidityBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .SensorData humidity = 13;</code>
       *
       * <pre>
       * 湿度
       * </pre>
       */
      public Builder clearHumidity() {
        if (humidityBuilder_ == null) {
          humidity_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          humidityBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      /**
       * <code>optional .SensorData humidity = 13;</code>
       *
       * <pre>
       * 湿度
       * </pre>
       */
      public SensorData.Builder getHumidityBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getHumidityFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData humidity = 13;</code>
       *
       * <pre>
       * 湿度
       * </pre>
       */
      public SensorDataOrBuilder getHumidityOrBuilder() {
        if (humidityBuilder_ != null) {
          return humidityBuilder_.getMessageOrBuilder();
        } else {
          return humidity_;
        }
      }
      /**
       * <code>optional .SensorData humidity = 13;</code>
       *
       * <pre>
       * 湿度
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getHumidityFieldBuilder() {
        if (humidityBuilder_ == null) {
          humidityBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  humidity_,
                  getParentForChildren(),
                  isClean());
          humidity_ = null;
        }
        return humidityBuilder_;
      }

      // optional .SensorData light = 14;
      private SensorData light_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> lightBuilder_;
      /**
       * <code>optional .SensorData light = 14;</code>
       *
       * <pre>
       * 光
       * </pre>
       */
      public boolean hasLight() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .SensorData light = 14;</code>
       *
       * <pre>
       * 光
       * </pre>
       */
      public SensorData getLight() {
        if (lightBuilder_ == null) {
          return light_;
        } else {
          return lightBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData light = 14;</code>
       *
       * <pre>
       * 光
       * </pre>
       */
      public Builder setLight(SensorData value) {
        if (lightBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          light_ = value;
          onChanged();
        } else {
          lightBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .SensorData light = 14;</code>
       *
       * <pre>
       * 光
       * </pre>
       */
      public Builder setLight(
          SensorData.Builder builderForValue) {
        if (lightBuilder_ == null) {
          light_ = builderForValue.build();
          onChanged();
        } else {
          lightBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .SensorData light = 14;</code>
       *
       * <pre>
       * 光
       * </pre>
       */
      public Builder mergeLight(SensorData value) {
        if (lightBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              light_ != SensorData.getDefaultInstance()) {
            light_ =
              SensorData.newBuilder(light_).mergeFrom(value).buildPartial();
          } else {
            light_ = value;
          }
          onChanged();
        } else {
          lightBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .SensorData light = 14;</code>
       *
       * <pre>
       * 光
       * </pre>
       */
      public Builder clearLight() {
        if (lightBuilder_ == null) {
          light_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          lightBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <code>optional .SensorData light = 14;</code>
       *
       * <pre>
       * 光
       * </pre>
       */
      public SensorData.Builder getLightBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getLightFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData light = 14;</code>
       *
       * <pre>
       * 光
       * </pre>
       */
      public SensorDataOrBuilder getLightOrBuilder() {
        if (lightBuilder_ != null) {
          return lightBuilder_.getMessageOrBuilder();
        } else {
          return light_;
        }
      }
      /**
       * <code>optional .SensorData light = 14;</code>
       *
       * <pre>
       * 光
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getLightFieldBuilder() {
        if (lightBuilder_ == null) {
          lightBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  light_,
                  getParentForChildren(),
                  isClean());
          light_ = null;
        }
        return lightBuilder_;
      }

      // optional .SensorData leak = 15;
      private SensorData leak_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> leakBuilder_;
      /**
       * <code>optional .SensorData leak = 15;</code>
       */
      public boolean hasLeak() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .SensorData leak = 15;</code>
       */
      public SensorData getLeak() {
        if (leakBuilder_ == null) {
          return leak_;
        } else {
          return leakBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData leak = 15;</code>
       */
      public Builder setLeak(SensorData value) {
        if (leakBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          leak_ = value;
          onChanged();
        } else {
          leakBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .SensorData leak = 15;</code>
       */
      public Builder setLeak(
          SensorData.Builder builderForValue) {
        if (leakBuilder_ == null) {
          leak_ = builderForValue.build();
          onChanged();
        } else {
          leakBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .SensorData leak = 15;</code>
       */
      public Builder mergeLeak(SensorData value) {
        if (leakBuilder_ == null) {
          if (((bitField0_ & 0x00004000) == 0x00004000) &&
              leak_ != SensorData.getDefaultInstance()) {
            leak_ =
              SensorData.newBuilder(leak_).mergeFrom(value).buildPartial();
          } else {
            leak_ = value;
          }
          onChanged();
        } else {
          leakBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .SensorData leak = 15;</code>
       */
      public Builder clearLeak() {
        if (leakBuilder_ == null) {
          leak_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          leakBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }
      /**
       * <code>optional .SensorData leak = 15;</code>
       */
      public SensorData.Builder getLeakBuilder() {
        bitField0_ |= 0x00004000;
        onChanged();
        return getLeakFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData leak = 15;</code>
       */
      public SensorDataOrBuilder getLeakOrBuilder() {
        if (leakBuilder_ != null) {
          return leakBuilder_.getMessageOrBuilder();
        } else {
          return leak_;
        }
      }
      /**
       * <code>optional .SensorData leak = 15;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getLeakFieldBuilder() {
        if (leakBuilder_ == null) {
          leakBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  leak_,
                  getParentForChildren(),
                  isClean());
          leak_ = null;
        }
        return leakBuilder_;
      }

      // optional .SensorData co = 16;
      private SensorData co_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> coBuilder_;
      /**
       * <code>optional .SensorData co = 16;</code>
       */
      public boolean hasCo() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .SensorData co = 16;</code>
       */
      public SensorData getCo() {
        if (coBuilder_ == null) {
          return co_;
        } else {
          return coBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData co = 16;</code>
       */
      public Builder setCo(SensorData value) {
        if (coBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          co_ = value;
          onChanged();
        } else {
          coBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .SensorData co = 16;</code>
       */
      public Builder setCo(
          SensorData.Builder builderForValue) {
        if (coBuilder_ == null) {
          co_ = builderForValue.build();
          onChanged();
        } else {
          coBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .SensorData co = 16;</code>
       */
      public Builder mergeCo(SensorData value) {
        if (coBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000) &&
              co_ != SensorData.getDefaultInstance()) {
            co_ =
              SensorData.newBuilder(co_).mergeFrom(value).buildPartial();
          } else {
            co_ = value;
          }
          onChanged();
        } else {
          coBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .SensorData co = 16;</code>
       */
      public Builder clearCo() {
        if (coBuilder_ == null) {
          co_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          coBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }
      /**
       * <code>optional .SensorData co = 16;</code>
       */
      public SensorData.Builder getCoBuilder() {
        bitField0_ |= 0x00008000;
        onChanged();
        return getCoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData co = 16;</code>
       */
      public SensorDataOrBuilder getCoOrBuilder() {
        if (coBuilder_ != null) {
          return coBuilder_.getMessageOrBuilder();
        } else {
          return co_;
        }
      }
      /**
       * <code>optional .SensorData co = 16;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getCoFieldBuilder() {
        if (coBuilder_ == null) {
          coBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  co_,
                  getParentForChildren(),
                  isClean());
          co_ = null;
        }
        return coBuilder_;
      }

      // optional .SensorData co2 = 17;
      private SensorData co2_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> co2Builder_;
      /**
       * <code>optional .SensorData co2 = 17;</code>
       */
      public boolean hasCo2() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .SensorData co2 = 17;</code>
       */
      public SensorData getCo2() {
        if (co2Builder_ == null) {
          return co2_;
        } else {
          return co2Builder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData co2 = 17;</code>
       */
      public Builder setCo2(SensorData value) {
        if (co2Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          co2_ = value;
          onChanged();
        } else {
          co2Builder_.setMessage(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .SensorData co2 = 17;</code>
       */
      public Builder setCo2(
          SensorData.Builder builderForValue) {
        if (co2Builder_ == null) {
          co2_ = builderForValue.build();
          onChanged();
        } else {
          co2Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .SensorData co2 = 17;</code>
       */
      public Builder mergeCo2(SensorData value) {
        if (co2Builder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000) &&
              co2_ != SensorData.getDefaultInstance()) {
            co2_ =
              SensorData.newBuilder(co2_).mergeFrom(value).buildPartial();
          } else {
            co2_ = value;
          }
          onChanged();
        } else {
          co2Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .SensorData co2 = 17;</code>
       */
      public Builder clearCo2() {
        if (co2Builder_ == null) {
          co2_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          co2Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }
      /**
       * <code>optional .SensorData co2 = 17;</code>
       */
      public SensorData.Builder getCo2Builder() {
        bitField0_ |= 0x00010000;
        onChanged();
        return getCo2FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData co2 = 17;</code>
       */
      public SensorDataOrBuilder getCo2OrBuilder() {
        if (co2Builder_ != null) {
          return co2Builder_.getMessageOrBuilder();
        } else {
          return co2_;
        }
      }
      /**
       * <code>optional .SensorData co2 = 17;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getCo2FieldBuilder() {
        if (co2Builder_ == null) {
          co2Builder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  co2_,
                  getParentForChildren(),
                  isClean());
          co2_ = null;
        }
        return co2Builder_;
      }

      // optional .SensorData so2 = 18;
      private SensorData so2_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> so2Builder_;
      /**
       * <code>optional .SensorData so2 = 18;</code>
       */
      public boolean hasSo2() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .SensorData so2 = 18;</code>
       */
      public SensorData getSo2() {
        if (so2Builder_ == null) {
          return so2_;
        } else {
          return so2Builder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData so2 = 18;</code>
       */
      public Builder setSo2(SensorData value) {
        if (so2Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          so2_ = value;
          onChanged();
        } else {
          so2Builder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .SensorData so2 = 18;</code>
       */
      public Builder setSo2(
          SensorData.Builder builderForValue) {
        if (so2Builder_ == null) {
          so2_ = builderForValue.build();
          onChanged();
        } else {
          so2Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .SensorData so2 = 18;</code>
       */
      public Builder mergeSo2(SensorData value) {
        if (so2Builder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000) &&
              so2_ != SensorData.getDefaultInstance()) {
            so2_ =
              SensorData.newBuilder(so2_).mergeFrom(value).buildPartial();
          } else {
            so2_ = value;
          }
          onChanged();
        } else {
          so2Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .SensorData so2 = 18;</code>
       */
      public Builder clearSo2() {
        if (so2Builder_ == null) {
          so2_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          so2Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }
      /**
       * <code>optional .SensorData so2 = 18;</code>
       */
      public SensorData.Builder getSo2Builder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getSo2FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData so2 = 18;</code>
       */
      public SensorDataOrBuilder getSo2OrBuilder() {
        if (so2Builder_ != null) {
          return so2Builder_.getMessageOrBuilder();
        } else {
          return so2_;
        }
      }
      /**
       * <code>optional .SensorData so2 = 18;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getSo2FieldBuilder() {
        if (so2Builder_ == null) {
          so2Builder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  so2_,
                  getParentForChildren(),
                  isClean());
          so2_ = null;
        }
        return so2Builder_;
      }

      // optional .SensorData no2 = 19;
      private SensorData no2_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> no2Builder_;
      /**
       * <code>optional .SensorData no2 = 19;</code>
       */
      public boolean hasNo2() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional .SensorData no2 = 19;</code>
       */
      public SensorData getNo2() {
        if (no2Builder_ == null) {
          return no2_;
        } else {
          return no2Builder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData no2 = 19;</code>
       */
      public Builder setNo2(SensorData value) {
        if (no2Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          no2_ = value;
          onChanged();
        } else {
          no2Builder_.setMessage(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .SensorData no2 = 19;</code>
       */
      public Builder setNo2(
          SensorData.Builder builderForValue) {
        if (no2Builder_ == null) {
          no2_ = builderForValue.build();
          onChanged();
        } else {
          no2Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .SensorData no2 = 19;</code>
       */
      public Builder mergeNo2(SensorData value) {
        if (no2Builder_ == null) {
          if (((bitField0_ & 0x00040000) == 0x00040000) &&
              no2_ != SensorData.getDefaultInstance()) {
            no2_ =
              SensorData.newBuilder(no2_).mergeFrom(value).buildPartial();
          } else {
            no2_ = value;
          }
          onChanged();
        } else {
          no2Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .SensorData no2 = 19;</code>
       */
      public Builder clearNo2() {
        if (no2Builder_ == null) {
          no2_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          no2Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }
      /**
       * <code>optional .SensorData no2 = 19;</code>
       */
      public SensorData.Builder getNo2Builder() {
        bitField0_ |= 0x00040000;
        onChanged();
        return getNo2FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData no2 = 19;</code>
       */
      public SensorDataOrBuilder getNo2OrBuilder() {
        if (no2Builder_ != null) {
          return no2Builder_.getMessageOrBuilder();
        } else {
          return no2_;
        }
      }
      /**
       * <code>optional .SensorData no2 = 19;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getNo2FieldBuilder() {
        if (no2Builder_ == null) {
          no2Builder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  no2_,
                  getParentForChildren(),
                  isClean());
          no2_ = null;
        }
        return no2Builder_;
      }

      // optional .SensorData ch4 = 20;
      private SensorData ch4_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> ch4Builder_;
      /**
       * <code>optional .SensorData ch4 = 20;</code>
       */
      public boolean hasCh4() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional .SensorData ch4 = 20;</code>
       */
      public SensorData getCh4() {
        if (ch4Builder_ == null) {
          return ch4_;
        } else {
          return ch4Builder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData ch4 = 20;</code>
       */
      public Builder setCh4(SensorData value) {
        if (ch4Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ch4_ = value;
          onChanged();
        } else {
          ch4Builder_.setMessage(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .SensorData ch4 = 20;</code>
       */
      public Builder setCh4(
          SensorData.Builder builderForValue) {
        if (ch4Builder_ == null) {
          ch4_ = builderForValue.build();
          onChanged();
        } else {
          ch4Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .SensorData ch4 = 20;</code>
       */
      public Builder mergeCh4(SensorData value) {
        if (ch4Builder_ == null) {
          if (((bitField0_ & 0x00080000) == 0x00080000) &&
              ch4_ != SensorData.getDefaultInstance()) {
            ch4_ =
              SensorData.newBuilder(ch4_).mergeFrom(value).buildPartial();
          } else {
            ch4_ = value;
          }
          onChanged();
        } else {
          ch4Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .SensorData ch4 = 20;</code>
       */
      public Builder clearCh4() {
        if (ch4Builder_ == null) {
          ch4_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          ch4Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        return this;
      }
      /**
       * <code>optional .SensorData ch4 = 20;</code>
       */
      public SensorData.Builder getCh4Builder() {
        bitField0_ |= 0x00080000;
        onChanged();
        return getCh4FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData ch4 = 20;</code>
       */
      public SensorDataOrBuilder getCh4OrBuilder() {
        if (ch4Builder_ != null) {
          return ch4Builder_.getMessageOrBuilder();
        } else {
          return ch4_;
        }
      }
      /**
       * <code>optional .SensorData ch4 = 20;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getCh4FieldBuilder() {
        if (ch4Builder_ == null) {
          ch4Builder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  ch4_,
                  getParentForChildren(),
                  isClean());
          ch4_ = null;
        }
        return ch4Builder_;
      }

      // optional .SensorData ch2o = 21;
      private SensorData ch2O_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> ch2OBuilder_;
      /**
       * <code>optional .SensorData ch2o = 21;</code>
       */
      public boolean hasCh2O() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional .SensorData ch2o = 21;</code>
       */
      public SensorData getCh2O() {
        if (ch2OBuilder_ == null) {
          return ch2O_;
        } else {
          return ch2OBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData ch2o = 21;</code>
       */
      public Builder setCh2O(SensorData value) {
        if (ch2OBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ch2O_ = value;
          onChanged();
        } else {
          ch2OBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .SensorData ch2o = 21;</code>
       */
      public Builder setCh2O(
          SensorData.Builder builderForValue) {
        if (ch2OBuilder_ == null) {
          ch2O_ = builderForValue.build();
          onChanged();
        } else {
          ch2OBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .SensorData ch2o = 21;</code>
       */
      public Builder mergeCh2O(SensorData value) {
        if (ch2OBuilder_ == null) {
          if (((bitField0_ & 0x00100000) == 0x00100000) &&
              ch2O_ != SensorData.getDefaultInstance()) {
            ch2O_ =
              SensorData.newBuilder(ch2O_).mergeFrom(value).buildPartial();
          } else {
            ch2O_ = value;
          }
          onChanged();
        } else {
          ch2OBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .SensorData ch2o = 21;</code>
       */
      public Builder clearCh2O() {
        if (ch2OBuilder_ == null) {
          ch2O_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          ch2OBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        return this;
      }
      /**
       * <code>optional .SensorData ch2o = 21;</code>
       */
      public SensorData.Builder getCh2OBuilder() {
        bitField0_ |= 0x00100000;
        onChanged();
        return getCh2OFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData ch2o = 21;</code>
       */
      public SensorDataOrBuilder getCh2OOrBuilder() {
        if (ch2OBuilder_ != null) {
          return ch2OBuilder_.getMessageOrBuilder();
        } else {
          return ch2O_;
        }
      }
      /**
       * <code>optional .SensorData ch2o = 21;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getCh2OFieldBuilder() {
        if (ch2OBuilder_ == null) {
          ch2OBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  ch2O_,
                  getParentForChildren(),
                  isClean());
          ch2O_ = null;
        }
        return ch2OBuilder_;
      }

      // optional .SensorData lpg = 22;
      private SensorData lpg_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> lpgBuilder_;
      /**
       * <code>optional .SensorData lpg = 22;</code>
       */
      public boolean hasLpg() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional .SensorData lpg = 22;</code>
       */
      public SensorData getLpg() {
        if (lpgBuilder_ == null) {
          return lpg_;
        } else {
          return lpgBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData lpg = 22;</code>
       */
      public Builder setLpg(SensorData value) {
        if (lpgBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lpg_ = value;
          onChanged();
        } else {
          lpgBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .SensorData lpg = 22;</code>
       */
      public Builder setLpg(
          SensorData.Builder builderForValue) {
        if (lpgBuilder_ == null) {
          lpg_ = builderForValue.build();
          onChanged();
        } else {
          lpgBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .SensorData lpg = 22;</code>
       */
      public Builder mergeLpg(SensorData value) {
        if (lpgBuilder_ == null) {
          if (((bitField0_ & 0x00200000) == 0x00200000) &&
              lpg_ != SensorData.getDefaultInstance()) {
            lpg_ =
              SensorData.newBuilder(lpg_).mergeFrom(value).buildPartial();
          } else {
            lpg_ = value;
          }
          onChanged();
        } else {
          lpgBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .SensorData lpg = 22;</code>
       */
      public Builder clearLpg() {
        if (lpgBuilder_ == null) {
          lpg_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          lpgBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        return this;
      }
      /**
       * <code>optional .SensorData lpg = 22;</code>
       */
      public SensorData.Builder getLpgBuilder() {
        bitField0_ |= 0x00200000;
        onChanged();
        return getLpgFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData lpg = 22;</code>
       */
      public SensorDataOrBuilder getLpgOrBuilder() {
        if (lpgBuilder_ != null) {
          return lpgBuilder_.getMessageOrBuilder();
        } else {
          return lpg_;
        }
      }
      /**
       * <code>optional .SensorData lpg = 22;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getLpgFieldBuilder() {
        if (lpgBuilder_ == null) {
          lpgBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  lpg_,
                  getParentForChildren(),
                  isClean());
          lpg_ = null;
        }
        return lpgBuilder_;
      }

      // optional .SensorData o3 = 23;
      private SensorData o3_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> o3Builder_;
      /**
       * <code>optional .SensorData o3 = 23;</code>
       */
      public boolean hasO3() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional .SensorData o3 = 23;</code>
       */
      public SensorData getO3() {
        if (o3Builder_ == null) {
          return o3_;
        } else {
          return o3Builder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData o3 = 23;</code>
       */
      public Builder setO3(SensorData value) {
        if (o3Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          o3_ = value;
          onChanged();
        } else {
          o3Builder_.setMessage(value);
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .SensorData o3 = 23;</code>
       */
      public Builder setO3(
          SensorData.Builder builderForValue) {
        if (o3Builder_ == null) {
          o3_ = builderForValue.build();
          onChanged();
        } else {
          o3Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .SensorData o3 = 23;</code>
       */
      public Builder mergeO3(SensorData value) {
        if (o3Builder_ == null) {
          if (((bitField0_ & 0x00400000) == 0x00400000) &&
              o3_ != SensorData.getDefaultInstance()) {
            o3_ =
              SensorData.newBuilder(o3_).mergeFrom(value).buildPartial();
          } else {
            o3_ = value;
          }
          onChanged();
        } else {
          o3Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .SensorData o3 = 23;</code>
       */
      public Builder clearO3() {
        if (o3Builder_ == null) {
          o3_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          o3Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }
      /**
       * <code>optional .SensorData o3 = 23;</code>
       */
      public SensorData.Builder getO3Builder() {
        bitField0_ |= 0x00400000;
        onChanged();
        return getO3FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData o3 = 23;</code>
       */
      public SensorDataOrBuilder getO3OrBuilder() {
        if (o3Builder_ != null) {
          return o3Builder_.getMessageOrBuilder();
        } else {
          return o3_;
        }
      }
      /**
       * <code>optional .SensorData o3 = 23;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getO3FieldBuilder() {
        if (o3Builder_ == null) {
          o3Builder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  o3_,
                  getParentForChildren(),
                  isClean());
          o3_ = null;
        }
        return o3Builder_;
      }

      // optional .SensorData pm1 = 24;
      private SensorData pm1_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> pm1Builder_;
      /**
       * <code>optional .SensorData pm1 = 24;</code>
       */
      public boolean hasPm1() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional .SensorData pm1 = 24;</code>
       */
      public SensorData getPm1() {
        if (pm1Builder_ == null) {
          return pm1_;
        } else {
          return pm1Builder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData pm1 = 24;</code>
       */
      public Builder setPm1(SensorData value) {
        if (pm1Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pm1_ = value;
          onChanged();
        } else {
          pm1Builder_.setMessage(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .SensorData pm1 = 24;</code>
       */
      public Builder setPm1(
          SensorData.Builder builderForValue) {
        if (pm1Builder_ == null) {
          pm1_ = builderForValue.build();
          onChanged();
        } else {
          pm1Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .SensorData pm1 = 24;</code>
       */
      public Builder mergePm1(SensorData value) {
        if (pm1Builder_ == null) {
          if (((bitField0_ & 0x00800000) == 0x00800000) &&
              pm1_ != SensorData.getDefaultInstance()) {
            pm1_ =
              SensorData.newBuilder(pm1_).mergeFrom(value).buildPartial();
          } else {
            pm1_ = value;
          }
          onChanged();
        } else {
          pm1Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .SensorData pm1 = 24;</code>
       */
      public Builder clearPm1() {
        if (pm1Builder_ == null) {
          pm1_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          pm1Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        return this;
      }
      /**
       * <code>optional .SensorData pm1 = 24;</code>
       */
      public SensorData.Builder getPm1Builder() {
        bitField0_ |= 0x00800000;
        onChanged();
        return getPm1FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData pm1 = 24;</code>
       */
      public SensorDataOrBuilder getPm1OrBuilder() {
        if (pm1Builder_ != null) {
          return pm1Builder_.getMessageOrBuilder();
        } else {
          return pm1_;
        }
      }
      /**
       * <code>optional .SensorData pm1 = 24;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getPm1FieldBuilder() {
        if (pm1Builder_ == null) {
          pm1Builder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  pm1_,
                  getParentForChildren(),
                  isClean());
          pm1_ = null;
        }
        return pm1Builder_;
      }

      // optional .SensorData pm2_5 = 25;
      private SensorData pm25_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> pm25Builder_;
      /**
       * <code>optional .SensorData pm2_5 = 25;</code>
       */
      public boolean hasPm25() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional .SensorData pm2_5 = 25;</code>
       */
      public SensorData getPm25() {
        if (pm25Builder_ == null) {
          return pm25_;
        } else {
          return pm25Builder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData pm2_5 = 25;</code>
       */
      public Builder setPm25(SensorData value) {
        if (pm25Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pm25_ = value;
          onChanged();
        } else {
          pm25Builder_.setMessage(value);
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .SensorData pm2_5 = 25;</code>
       */
      public Builder setPm25(
          SensorData.Builder builderForValue) {
        if (pm25Builder_ == null) {
          pm25_ = builderForValue.build();
          onChanged();
        } else {
          pm25Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .SensorData pm2_5 = 25;</code>
       */
      public Builder mergePm25(SensorData value) {
        if (pm25Builder_ == null) {
          if (((bitField0_ & 0x01000000) == 0x01000000) &&
              pm25_ != SensorData.getDefaultInstance()) {
            pm25_ =
              SensorData.newBuilder(pm25_).mergeFrom(value).buildPartial();
          } else {
            pm25_ = value;
          }
          onChanged();
        } else {
          pm25Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .SensorData pm2_5 = 25;</code>
       */
      public Builder clearPm25() {
        if (pm25Builder_ == null) {
          pm25_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          pm25Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x01000000);
        return this;
      }
      /**
       * <code>optional .SensorData pm2_5 = 25;</code>
       */
      public SensorData.Builder getPm25Builder() {
        bitField0_ |= 0x01000000;
        onChanged();
        return getPm25FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData pm2_5 = 25;</code>
       */
      public SensorDataOrBuilder getPm25OrBuilder() {
        if (pm25Builder_ != null) {
          return pm25Builder_.getMessageOrBuilder();
        } else {
          return pm25_;
        }
      }
      /**
       * <code>optional .SensorData pm2_5 = 25;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getPm25FieldBuilder() {
        if (pm25Builder_ == null) {
          pm25Builder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  pm25_,
                  getParentForChildren(),
                  isClean());
          pm25_ = null;
        }
        return pm25Builder_;
      }

      // optional .SensorData pm10 = 26;
      private SensorData pm10_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> pm10Builder_;
      /**
       * <code>optional .SensorData pm10 = 26;</code>
       */
      public boolean hasPm10() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional .SensorData pm10 = 26;</code>
       */
      public SensorData getPm10() {
        if (pm10Builder_ == null) {
          return pm10_;
        } else {
          return pm10Builder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData pm10 = 26;</code>
       */
      public Builder setPm10(SensorData value) {
        if (pm10Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pm10_ = value;
          onChanged();
        } else {
          pm10Builder_.setMessage(value);
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .SensorData pm10 = 26;</code>
       */
      public Builder setPm10(
          SensorData.Builder builderForValue) {
        if (pm10Builder_ == null) {
          pm10_ = builderForValue.build();
          onChanged();
        } else {
          pm10Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .SensorData pm10 = 26;</code>
       */
      public Builder mergePm10(SensorData value) {
        if (pm10Builder_ == null) {
          if (((bitField0_ & 0x02000000) == 0x02000000) &&
              pm10_ != SensorData.getDefaultInstance()) {
            pm10_ =
              SensorData.newBuilder(pm10_).mergeFrom(value).buildPartial();
          } else {
            pm10_ = value;
          }
          onChanged();
        } else {
          pm10Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .SensorData pm10 = 26;</code>
       */
      public Builder clearPm10() {
        if (pm10Builder_ == null) {
          pm10_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          pm10Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x02000000);
        return this;
      }
      /**
       * <code>optional .SensorData pm10 = 26;</code>
       */
      public SensorData.Builder getPm10Builder() {
        bitField0_ |= 0x02000000;
        onChanged();
        return getPm10FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData pm10 = 26;</code>
       */
      public SensorDataOrBuilder getPm10OrBuilder() {
        if (pm10Builder_ != null) {
          return pm10Builder_.getMessageOrBuilder();
        } else {
          return pm10_;
        }
      }
      /**
       * <code>optional .SensorData pm10 = 26;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getPm10FieldBuilder() {
        if (pm10Builder_ == null) {
          pm10Builder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  pm10_,
                  getParentForChildren(),
                  isClean());
          pm10_ = null;
        }
        return pm10Builder_;
      }

      // optional .SensorData angle = 27;
      private SensorData angle_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> angleBuilder_;
      /**
       * <code>optional .SensorData angle = 27;</code>
       */
      public boolean hasAngle() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional .SensorData angle = 27;</code>
       */
      public SensorData getAngle() {
        if (angleBuilder_ == null) {
          return angle_;
        } else {
          return angleBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData angle = 27;</code>
       */
      public Builder setAngle(SensorData value) {
        if (angleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          angle_ = value;
          onChanged();
        } else {
          angleBuilder_.setMessage(value);
        }
        bitField0_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .SensorData angle = 27;</code>
       */
      public Builder setAngle(
          SensorData.Builder builderForValue) {
        if (angleBuilder_ == null) {
          angle_ = builderForValue.build();
          onChanged();
        } else {
          angleBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .SensorData angle = 27;</code>
       */
      public Builder mergeAngle(SensorData value) {
        if (angleBuilder_ == null) {
          if (((bitField0_ & 0x04000000) == 0x04000000) &&
              angle_ != SensorData.getDefaultInstance()) {
            angle_ =
              SensorData.newBuilder(angle_).mergeFrom(value).buildPartial();
          } else {
            angle_ = value;
          }
          onChanged();
        } else {
          angleBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .SensorData angle = 27;</code>
       */
      public Builder clearAngle() {
        if (angleBuilder_ == null) {
          angle_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          angleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x04000000);
        return this;
      }
      /**
       * <code>optional .SensorData angle = 27;</code>
       */
      public SensorData.Builder getAngleBuilder() {
        bitField0_ |= 0x04000000;
        onChanged();
        return getAngleFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData angle = 27;</code>
       */
      public SensorDataOrBuilder getAngleOrBuilder() {
        if (angleBuilder_ != null) {
          return angleBuilder_.getMessageOrBuilder();
        } else {
          return angle_;
        }
      }
      /**
       * <code>optional .SensorData angle = 27;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getAngleFieldBuilder() {
        if (angleBuilder_ == null) {
          angleBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  angle_,
                  getParentForChildren(),
                  isClean());
          angle_ = null;
        }
        return angleBuilder_;
      }

      // optional .SensorData cover = 28;
      private SensorData cover_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> coverBuilder_;
      /**
       * <code>optional .SensorData cover = 28;</code>
       */
      public boolean hasCover() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional .SensorData cover = 28;</code>
       */
      public SensorData getCover() {
        if (coverBuilder_ == null) {
          return cover_;
        } else {
          return coverBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData cover = 28;</code>
       */
      public Builder setCover(SensorData value) {
        if (coverBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          cover_ = value;
          onChanged();
        } else {
          coverBuilder_.setMessage(value);
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .SensorData cover = 28;</code>
       */
      public Builder setCover(
          SensorData.Builder builderForValue) {
        if (coverBuilder_ == null) {
          cover_ = builderForValue.build();
          onChanged();
        } else {
          coverBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .SensorData cover = 28;</code>
       */
      public Builder mergeCover(SensorData value) {
        if (coverBuilder_ == null) {
          if (((bitField0_ & 0x08000000) == 0x08000000) &&
              cover_ != SensorData.getDefaultInstance()) {
            cover_ =
              SensorData.newBuilder(cover_).mergeFrom(value).buildPartial();
          } else {
            cover_ = value;
          }
          onChanged();
        } else {
          coverBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .SensorData cover = 28;</code>
       */
      public Builder clearCover() {
        if (coverBuilder_ == null) {
          cover_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          coverBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x08000000);
        return this;
      }
      /**
       * <code>optional .SensorData cover = 28;</code>
       */
      public SensorData.Builder getCoverBuilder() {
        bitField0_ |= 0x08000000;
        onChanged();
        return getCoverFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData cover = 28;</code>
       */
      public SensorDataOrBuilder getCoverOrBuilder() {
        if (coverBuilder_ != null) {
          return coverBuilder_.getMessageOrBuilder();
        } else {
          return cover_;
        }
      }
      /**
       * <code>optional .SensorData cover = 28;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getCoverFieldBuilder() {
        if (coverBuilder_ == null) {
          coverBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  cover_,
                  getParentForChildren(),
                  isClean());
          cover_ = null;
        }
        return coverBuilder_;
      }

      // optional .SensorData level = 29;
      private SensorData level_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> levelBuilder_;
      /**
       * <code>optional .SensorData level = 29;</code>
       */
      public boolean hasLevel() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional .SensorData level = 29;</code>
       */
      public SensorData getLevel() {
        if (levelBuilder_ == null) {
          return level_;
        } else {
          return levelBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData level = 29;</code>
       */
      public Builder setLevel(SensorData value) {
        if (levelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          level_ = value;
          onChanged();
        } else {
          levelBuilder_.setMessage(value);
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .SensorData level = 29;</code>
       */
      public Builder setLevel(
          SensorData.Builder builderForValue) {
        if (levelBuilder_ == null) {
          level_ = builderForValue.build();
          onChanged();
        } else {
          levelBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .SensorData level = 29;</code>
       */
      public Builder mergeLevel(SensorData value) {
        if (levelBuilder_ == null) {
          if (((bitField0_ & 0x10000000) == 0x10000000) &&
              level_ != SensorData.getDefaultInstance()) {
            level_ =
              SensorData.newBuilder(level_).mergeFrom(value).buildPartial();
          } else {
            level_ = value;
          }
          onChanged();
        } else {
          levelBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .SensorData level = 29;</code>
       */
      public Builder clearLevel() {
        if (levelBuilder_ == null) {
          level_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          levelBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x10000000);
        return this;
      }
      /**
       * <code>optional .SensorData level = 29;</code>
       */
      public SensorData.Builder getLevelBuilder() {
        bitField0_ |= 0x10000000;
        onChanged();
        return getLevelFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData level = 29;</code>
       */
      public SensorDataOrBuilder getLevelOrBuilder() {
        if (levelBuilder_ != null) {
          return levelBuilder_.getMessageOrBuilder();
        } else {
          return level_;
        }
      }
      /**
       * <code>optional .SensorData level = 29;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getLevelFieldBuilder() {
        if (levelBuilder_ == null) {
          levelBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  level_,
                  getParentForChildren(),
                  isClean());
          level_ = null;
        }
        return levelBuilder_;
      }

      // optional .SensorData smoke = 30;
      private SensorData smoke_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> smokeBuilder_;
      /**
       * <code>optional .SensorData smoke = 30;</code>
       */
      public boolean hasSmoke() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional .SensorData smoke = 30;</code>
       */
      public SensorData getSmoke() {
        if (smokeBuilder_ == null) {
          return smoke_;
        } else {
          return smokeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData smoke = 30;</code>
       */
      public Builder setSmoke(SensorData value) {
        if (smokeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          smoke_ = value;
          onChanged();
        } else {
          smokeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .SensorData smoke = 30;</code>
       */
      public Builder setSmoke(
          SensorData.Builder builderForValue) {
        if (smokeBuilder_ == null) {
          smoke_ = builderForValue.build();
          onChanged();
        } else {
          smokeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .SensorData smoke = 30;</code>
       */
      public Builder mergeSmoke(SensorData value) {
        if (smokeBuilder_ == null) {
          if (((bitField0_ & 0x20000000) == 0x20000000) &&
              smoke_ != SensorData.getDefaultInstance()) {
            smoke_ =
              SensorData.newBuilder(smoke_).mergeFrom(value).buildPartial();
          } else {
            smoke_ = value;
          }
          onChanged();
        } else {
          smokeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .SensorData smoke = 30;</code>
       */
      public Builder clearSmoke() {
        if (smokeBuilder_ == null) {
          smoke_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          smokeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x20000000);
        return this;
      }
      /**
       * <code>optional .SensorData smoke = 30;</code>
       */
      public SensorData.Builder getSmokeBuilder() {
        bitField0_ |= 0x20000000;
        onChanged();
        return getSmokeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData smoke = 30;</code>
       */
      public SensorDataOrBuilder getSmokeOrBuilder() {
        if (smokeBuilder_ != null) {
          return smokeBuilder_.getMessageOrBuilder();
        } else {
          return smoke_;
        }
      }
      /**
       * <code>optional .SensorData smoke = 30;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getSmokeFieldBuilder() {
        if (smokeBuilder_ == null) {
          smokeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  smoke_,
                  getParentForChildren(),
                  isClean());
          smoke_ = null;
        }
        return smokeBuilder_;
      }

      // optional .SensorData pitch = 31;
      private SensorData pitch_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> pitchBuilder_;
      /**
       * <code>optional .SensorData pitch = 31;</code>
       */
      public boolean hasPitch() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional .SensorData pitch = 31;</code>
       */
      public SensorData getPitch() {
        if (pitchBuilder_ == null) {
          return pitch_;
        } else {
          return pitchBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData pitch = 31;</code>
       */
      public Builder setPitch(SensorData value) {
        if (pitchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pitch_ = value;
          onChanged();
        } else {
          pitchBuilder_.setMessage(value);
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .SensorData pitch = 31;</code>
       */
      public Builder setPitch(
          SensorData.Builder builderForValue) {
        if (pitchBuilder_ == null) {
          pitch_ = builderForValue.build();
          onChanged();
        } else {
          pitchBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .SensorData pitch = 31;</code>
       */
      public Builder mergePitch(SensorData value) {
        if (pitchBuilder_ == null) {
          if (((bitField0_ & 0x40000000) == 0x40000000) &&
              pitch_ != SensorData.getDefaultInstance()) {
            pitch_ =
              SensorData.newBuilder(pitch_).mergeFrom(value).buildPartial();
          } else {
            pitch_ = value;
          }
          onChanged();
        } else {
          pitchBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .SensorData pitch = 31;</code>
       */
      public Builder clearPitch() {
        if (pitchBuilder_ == null) {
          pitch_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          pitchBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x40000000);
        return this;
      }
      /**
       * <code>optional .SensorData pitch = 31;</code>
       */
      public SensorData.Builder getPitchBuilder() {
        bitField0_ |= 0x40000000;
        onChanged();
        return getPitchFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData pitch = 31;</code>
       */
      public SensorDataOrBuilder getPitchOrBuilder() {
        if (pitchBuilder_ != null) {
          return pitchBuilder_.getMessageOrBuilder();
        } else {
          return pitch_;
        }
      }
      /**
       * <code>optional .SensorData pitch = 31;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getPitchFieldBuilder() {
        if (pitchBuilder_ == null) {
          pitchBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  pitch_,
                  getParentForChildren(),
                  isClean());
          pitch_ = null;
        }
        return pitchBuilder_;
      }

      // optional .SensorData roll = 32;
      private SensorData roll_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> rollBuilder_;
      /**
       * <code>optional .SensorData roll = 32;</code>
       */
      public boolean hasRoll() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional .SensorData roll = 32;</code>
       */
      public SensorData getRoll() {
        if (rollBuilder_ == null) {
          return roll_;
        } else {
          return rollBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData roll = 32;</code>
       */
      public Builder setRoll(SensorData value) {
        if (rollBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roll_ = value;
          onChanged();
        } else {
          rollBuilder_.setMessage(value);
        }
        bitField0_ |= 0x80000000;
        return this;
      }
      /**
       * <code>optional .SensorData roll = 32;</code>
       */
      public Builder setRoll(
          SensorData.Builder builderForValue) {
        if (rollBuilder_ == null) {
          roll_ = builderForValue.build();
          onChanged();
        } else {
          rollBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x80000000;
        return this;
      }
      /**
       * <code>optional .SensorData roll = 32;</code>
       */
      public Builder mergeRoll(SensorData value) {
        if (rollBuilder_ == null) {
          if (((bitField0_ & 0x80000000) == 0x80000000) &&
              roll_ != SensorData.getDefaultInstance()) {
            roll_ =
              SensorData.newBuilder(roll_).mergeFrom(value).buildPartial();
          } else {
            roll_ = value;
          }
          onChanged();
        } else {
          rollBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x80000000;
        return this;
      }
      /**
       * <code>optional .SensorData roll = 32;</code>
       */
      public Builder clearRoll() {
        if (rollBuilder_ == null) {
          roll_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          rollBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x80000000);
        return this;
      }
      /**
       * <code>optional .SensorData roll = 32;</code>
       */
      public SensorData.Builder getRollBuilder() {
        bitField0_ |= 0x80000000;
        onChanged();
        return getRollFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData roll = 32;</code>
       */
      public SensorDataOrBuilder getRollOrBuilder() {
        if (rollBuilder_ != null) {
          return rollBuilder_.getMessageOrBuilder();
        } else {
          return roll_;
        }
      }
      /**
       * <code>optional .SensorData roll = 32;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getRollFieldBuilder() {
        if (rollBuilder_ == null) {
          rollBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  roll_,
                  getParentForChildren(),
                  isClean());
          roll_ = null;
        }
        return rollBuilder_;
      }

      // optional .SensorData yaw = 33;
      private SensorData yaw_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> yawBuilder_;
      /**
       * <code>optional .SensorData yaw = 33;</code>
       */
      public boolean hasYaw() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .SensorData yaw = 33;</code>
       */
      public SensorData getYaw() {
        if (yawBuilder_ == null) {
          return yaw_;
        } else {
          return yawBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData yaw = 33;</code>
       */
      public Builder setYaw(SensorData value) {
        if (yawBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          yaw_ = value;
          onChanged();
        } else {
          yawBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SensorData yaw = 33;</code>
       */
      public Builder setYaw(
          SensorData.Builder builderForValue) {
        if (yawBuilder_ == null) {
          yaw_ = builderForValue.build();
          onChanged();
        } else {
          yawBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SensorData yaw = 33;</code>
       */
      public Builder mergeYaw(SensorData value) {
        if (yawBuilder_ == null) {
          if (((bitField1_ & 0x00000001) == 0x00000001) &&
              yaw_ != SensorData.getDefaultInstance()) {
            yaw_ =
              SensorData.newBuilder(yaw_).mergeFrom(value).buildPartial();
          } else {
            yaw_ = value;
          }
          onChanged();
        } else {
          yawBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SensorData yaw = 33;</code>
       */
      public Builder clearYaw() {
        if (yawBuilder_ == null) {
          yaw_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          yawBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .SensorData yaw = 33;</code>
       */
      public SensorData.Builder getYawBuilder() {
        bitField1_ |= 0x00000001;
        onChanged();
        return getYawFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData yaw = 33;</code>
       */
      public SensorDataOrBuilder getYawOrBuilder() {
        if (yawBuilder_ != null) {
          return yawBuilder_.getMessageOrBuilder();
        } else {
          return yaw_;
        }
      }
      /**
       * <code>optional .SensorData yaw = 33;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getYawFieldBuilder() {
        if (yawBuilder_ == null) {
          yawBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  yaw_,
                  getParentForChildren(),
                  isClean());
          yaw_ = null;
        }
        return yawBuilder_;
      }

      // optional .SensorDataInt flame = 34;
      private SensorDataInt flame_ = SensorDataInt.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorDataInt, SensorDataInt.Builder, SensorDataIntOrBuilder> flameBuilder_;
      /**
       * <code>optional .SensorDataInt flame = 34;</code>
       */
      public boolean hasFlame() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .SensorDataInt flame = 34;</code>
       */
      public SensorDataInt getFlame() {
        if (flameBuilder_ == null) {
          return flame_;
        } else {
          return flameBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorDataInt flame = 34;</code>
       */
      public Builder setFlame(SensorDataInt value) {
        if (flameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          flame_ = value;
          onChanged();
        } else {
          flameBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .SensorDataInt flame = 34;</code>
       */
      public Builder setFlame(
          SensorDataInt.Builder builderForValue) {
        if (flameBuilder_ == null) {
          flame_ = builderForValue.build();
          onChanged();
        } else {
          flameBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .SensorDataInt flame = 34;</code>
       */
      public Builder mergeFlame(SensorDataInt value) {
        if (flameBuilder_ == null) {
          if (((bitField1_ & 0x00000002) == 0x00000002) &&
              flame_ != SensorDataInt.getDefaultInstance()) {
            flame_ =
              SensorDataInt.newBuilder(flame_).mergeFrom(value).buildPartial();
          } else {
            flame_ = value;
          }
          onChanged();
        } else {
          flameBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .SensorDataInt flame = 34;</code>
       */
      public Builder clearFlame() {
        if (flameBuilder_ == null) {
          flame_ = SensorDataInt.getDefaultInstance();
          onChanged();
        } else {
          flameBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .SensorDataInt flame = 34;</code>
       */
      public SensorDataInt.Builder getFlameBuilder() {
        bitField1_ |= 0x00000002;
        onChanged();
        return getFlameFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorDataInt flame = 34;</code>
       */
      public SensorDataIntOrBuilder getFlameOrBuilder() {
        if (flameBuilder_ != null) {
          return flameBuilder_.getMessageOrBuilder();
        } else {
          return flame_;
        }
      }
      /**
       * <code>optional .SensorDataInt flame = 34;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorDataInt, SensorDataInt.Builder, SensorDataIntOrBuilder>
          getFlameFieldBuilder() {
        if (flameBuilder_ == null) {
          flameBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorDataInt, SensorDataInt.Builder, SensorDataIntOrBuilder>(
                  flame_,
                  getParentForChildren(),
                  isClean());
          flame_ = null;
        }
        return flameBuilder_;
      }

      // optional .SensorData artificialGas = 35;
      private SensorData artificialGas_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> artificialGasBuilder_;
      /**
       * <code>optional .SensorData artificialGas = 35;</code>
       */
      public boolean hasArtificialGas() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .SensorData artificialGas = 35;</code>
       */
      public SensorData getArtificialGas() {
        if (artificialGasBuilder_ == null) {
          return artificialGas_;
        } else {
          return artificialGasBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData artificialGas = 35;</code>
       */
      public Builder setArtificialGas(SensorData value) {
        if (artificialGasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          artificialGas_ = value;
          onChanged();
        } else {
          artificialGasBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .SensorData artificialGas = 35;</code>
       */
      public Builder setArtificialGas(
          SensorData.Builder builderForValue) {
        if (artificialGasBuilder_ == null) {
          artificialGas_ = builderForValue.build();
          onChanged();
        } else {
          artificialGasBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .SensorData artificialGas = 35;</code>
       */
      public Builder mergeArtificialGas(SensorData value) {
        if (artificialGasBuilder_ == null) {
          if (((bitField1_ & 0x00000004) == 0x00000004) &&
              artificialGas_ != SensorData.getDefaultInstance()) {
            artificialGas_ =
              SensorData.newBuilder(artificialGas_).mergeFrom(value).buildPartial();
          } else {
            artificialGas_ = value;
          }
          onChanged();
        } else {
          artificialGasBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .SensorData artificialGas = 35;</code>
       */
      public Builder clearArtificialGas() {
        if (artificialGasBuilder_ == null) {
          artificialGas_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          artificialGasBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .SensorData artificialGas = 35;</code>
       */
      public SensorData.Builder getArtificialGasBuilder() {
        bitField1_ |= 0x00000004;
        onChanged();
        return getArtificialGasFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData artificialGas = 35;</code>
       */
      public SensorDataOrBuilder getArtificialGasOrBuilder() {
        if (artificialGasBuilder_ != null) {
          return artificialGasBuilder_.getMessageOrBuilder();
        } else {
          return artificialGas_;
        }
      }
      /**
       * <code>optional .SensorData artificialGas = 35;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getArtificialGasFieldBuilder() {
        if (artificialGasBuilder_ == null) {
          artificialGasBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  artificialGas_,
                  getParentForChildren(),
                  isClean());
          artificialGas_ = null;
        }
        return artificialGasBuilder_;
      }

      // optional .MultiSensorDataInt multiTemp = 36;
      private MultiSensorDataInt multiTemp_ = MultiSensorDataInt.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          MultiSensorDataInt, MultiSensorDataInt.Builder, MultiSensorDataIntOrBuilder> multiTempBuilder_;
      /**
       * <code>optional .MultiSensorDataInt multiTemp = 36;</code>
       */
      public boolean hasMultiTemp() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .MultiSensorDataInt multiTemp = 36;</code>
       */
      public MultiSensorDataInt getMultiTemp() {
        if (multiTempBuilder_ == null) {
          return multiTemp_;
        } else {
          return multiTempBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .MultiSensorDataInt multiTemp = 36;</code>
       */
      public Builder setMultiTemp(MultiSensorDataInt value) {
        if (multiTempBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          multiTemp_ = value;
          onChanged();
        } else {
          multiTempBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .MultiSensorDataInt multiTemp = 36;</code>
       */
      public Builder setMultiTemp(
          MultiSensorDataInt.Builder builderForValue) {
        if (multiTempBuilder_ == null) {
          multiTemp_ = builderForValue.build();
          onChanged();
        } else {
          multiTempBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .MultiSensorDataInt multiTemp = 36;</code>
       */
      public Builder mergeMultiTemp(MultiSensorDataInt value) {
        if (multiTempBuilder_ == null) {
          if (((bitField1_ & 0x00000008) == 0x00000008) &&
              multiTemp_ != MultiSensorDataInt.getDefaultInstance()) {
            multiTemp_ =
              MultiSensorDataInt.newBuilder(multiTemp_).mergeFrom(value).buildPartial();
          } else {
            multiTemp_ = value;
          }
          onChanged();
        } else {
          multiTempBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .MultiSensorDataInt multiTemp = 36;</code>
       */
      public Builder clearMultiTemp() {
        if (multiTempBuilder_ == null) {
          multiTemp_ = MultiSensorDataInt.getDefaultInstance();
          onChanged();
        } else {
          multiTempBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .MultiSensorDataInt multiTemp = 36;</code>
       */
      public MultiSensorDataInt.Builder getMultiTempBuilder() {
        bitField1_ |= 0x00000008;
        onChanged();
        return getMultiTempFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .MultiSensorDataInt multiTemp = 36;</code>
       */
      public MultiSensorDataIntOrBuilder getMultiTempOrBuilder() {
        if (multiTempBuilder_ != null) {
          return multiTempBuilder_.getMessageOrBuilder();
        } else {
          return multiTemp_;
        }
      }
      /**
       * <code>optional .MultiSensorDataInt multiTemp = 36;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          MultiSensorDataInt, MultiSensorDataInt.Builder, MultiSensorDataIntOrBuilder>
          getMultiTempFieldBuilder() {
        if (multiTempBuilder_ == null) {
          multiTempBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              MultiSensorDataInt, MultiSensorDataInt.Builder, MultiSensorDataIntOrBuilder>(
                  multiTemp_,
                  getParentForChildren(),
                  isClean());
          multiTemp_ = null;
        }
        return multiTempBuilder_;
      }

      // optional .SensorData waterPressure = 37;
      private SensorData waterPressure_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> waterPressureBuilder_;
      /**
       * <code>optional .SensorData waterPressure = 37;</code>
       */
      public boolean hasWaterPressure() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .SensorData waterPressure = 37;</code>
       */
      public SensorData getWaterPressure() {
        if (waterPressureBuilder_ == null) {
          return waterPressure_;
        } else {
          return waterPressureBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData waterPressure = 37;</code>
       */
      public Builder setWaterPressure(SensorData value) {
        if (waterPressureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          waterPressure_ = value;
          onChanged();
        } else {
          waterPressureBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .SensorData waterPressure = 37;</code>
       */
      public Builder setWaterPressure(
          SensorData.Builder builderForValue) {
        if (waterPressureBuilder_ == null) {
          waterPressure_ = builderForValue.build();
          onChanged();
        } else {
          waterPressureBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .SensorData waterPressure = 37;</code>
       */
      public Builder mergeWaterPressure(SensorData value) {
        if (waterPressureBuilder_ == null) {
          if (((bitField1_ & 0x00000010) == 0x00000010) &&
              waterPressure_ != SensorData.getDefaultInstance()) {
            waterPressure_ =
              SensorData.newBuilder(waterPressure_).mergeFrom(value).buildPartial();
          } else {
            waterPressure_ = value;
          }
          onChanged();
        } else {
          waterPressureBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .SensorData waterPressure = 37;</code>
       */
      public Builder clearWaterPressure() {
        if (waterPressureBuilder_ == null) {
          waterPressure_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          waterPressureBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .SensorData waterPressure = 37;</code>
       */
      public SensorData.Builder getWaterPressureBuilder() {
        bitField1_ |= 0x00000010;
        onChanged();
        return getWaterPressureFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData waterPressure = 37;</code>
       */
      public SensorDataOrBuilder getWaterPressureOrBuilder() {
        if (waterPressureBuilder_ != null) {
          return waterPressureBuilder_.getMessageOrBuilder();
        } else {
          return waterPressure_;
        }
      }
      /**
       * <code>optional .SensorData waterPressure = 37;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getWaterPressureFieldBuilder() {
        if (waterPressureBuilder_ == null) {
          waterPressureBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  waterPressure_,
                  getParentForChildren(),
                  isClean());
          waterPressure_ = null;
        }
        return waterPressureBuilder_;
      }

      // optional .iBeacon ibeacon = 38;
      private iBeacon ibeacon_ = iBeacon.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          iBeacon, iBeacon.Builder, iBeaconOrBuilder> ibeaconBuilder_;
      /**
       * <code>optional .iBeacon ibeacon = 38;</code>
       *
       * <pre>
       * ibeacon 配置 (上|下)
       * </pre>
       */
      public boolean hasIbeacon() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .iBeacon ibeacon = 38;</code>
       *
       * <pre>
       * ibeacon 配置 (上|下)
       * </pre>
       */
      public iBeacon getIbeacon() {
        if (ibeaconBuilder_ == null) {
          return ibeacon_;
        } else {
          return ibeaconBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .iBeacon ibeacon = 38;</code>
       *
       * <pre>
       * ibeacon 配置 (上|下)
       * </pre>
       */
      public Builder setIbeacon(iBeacon value) {
        if (ibeaconBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ibeacon_ = value;
          onChanged();
        } else {
          ibeaconBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .iBeacon ibeacon = 38;</code>
       *
       * <pre>
       * ibeacon 配置 (上|下)
       * </pre>
       */
      public Builder setIbeacon(
          iBeacon.Builder builderForValue) {
        if (ibeaconBuilder_ == null) {
          ibeacon_ = builderForValue.build();
          onChanged();
        } else {
          ibeaconBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .iBeacon ibeacon = 38;</code>
       *
       * <pre>
       * ibeacon 配置 (上|下)
       * </pre>
       */
      public Builder mergeIbeacon(iBeacon value) {
        if (ibeaconBuilder_ == null) {
          if (((bitField1_ & 0x00000020) == 0x00000020) &&
              ibeacon_ != iBeacon.getDefaultInstance()) {
            ibeacon_ =
              iBeacon.newBuilder(ibeacon_).mergeFrom(value).buildPartial();
          } else {
            ibeacon_ = value;
          }
          onChanged();
        } else {
          ibeaconBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .iBeacon ibeacon = 38;</code>
       *
       * <pre>
       * ibeacon 配置 (上|下)
       * </pre>
       */
      public Builder clearIbeacon() {
        if (ibeaconBuilder_ == null) {
          ibeacon_ = iBeacon.getDefaultInstance();
          onChanged();
        } else {
          ibeaconBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .iBeacon ibeacon = 38;</code>
       *
       * <pre>
       * ibeacon 配置 (上|下)
       * </pre>
       */
      public iBeacon.Builder getIbeaconBuilder() {
        bitField1_ |= 0x00000020;
        onChanged();
        return getIbeaconFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .iBeacon ibeacon = 38;</code>
       *
       * <pre>
       * ibeacon 配置 (上|下)
       * </pre>
       */
      public iBeaconOrBuilder getIbeaconOrBuilder() {
        if (ibeaconBuilder_ != null) {
          return ibeaconBuilder_.getMessageOrBuilder();
        } else {
          return ibeacon_;
        }
      }
      /**
       * <code>optional .iBeacon ibeacon = 38;</code>
       *
       * <pre>
       * ibeacon 配置 (上|下)
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          iBeacon, iBeacon.Builder, iBeaconOrBuilder>
          getIbeaconFieldBuilder() {
        if (ibeaconBuilder_ == null) {
          ibeaconBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              iBeacon, iBeacon.Builder, iBeaconOrBuilder>(
                  ibeacon_,
                  getParentForChildren(),
                  isClean());
          ibeacon_ = null;
        }
        return ibeaconBuilder_;
      }

      // repeated .SensorData sensors = 39;
      private java.util.List<SensorData> sensors_ =
        java.util.Collections.emptyList();
      private void ensureSensorsIsMutable() {
        if (!((bitField1_ & 0x00000040) == 0x00000040)) {
          sensors_ = new java.util.ArrayList<SensorData>(sensors_);
          bitField1_ |= 0x00000040;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> sensorsBuilder_;

      /**
       * <code>repeated .SensorData sensors = 39;</code>
       */
      public java.util.List<SensorData> getSensorsList() {
        if (sensorsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sensors_);
        } else {
          return sensorsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .SensorData sensors = 39;</code>
       */
      public int getSensorsCount() {
        if (sensorsBuilder_ == null) {
          return sensors_.size();
        } else {
          return sensorsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .SensorData sensors = 39;</code>
       */
      public SensorData getSensors(int index) {
        if (sensorsBuilder_ == null) {
          return sensors_.get(index);
        } else {
          return sensorsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .SensorData sensors = 39;</code>
       */
      public Builder setSensors(
          int index, SensorData value) {
        if (sensorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSensorsIsMutable();
          sensors_.set(index, value);
          onChanged();
        } else {
          sensorsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SensorData sensors = 39;</code>
       */
      public Builder setSensors(
          int index, SensorData.Builder builderForValue) {
        if (sensorsBuilder_ == null) {
          ensureSensorsIsMutable();
          sensors_.set(index, builderForValue.build());
          onChanged();
        } else {
          sensorsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SensorData sensors = 39;</code>
       */
      public Builder addSensors(SensorData value) {
        if (sensorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSensorsIsMutable();
          sensors_.add(value);
          onChanged();
        } else {
          sensorsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .SensorData sensors = 39;</code>
       */
      public Builder addSensors(
          int index, SensorData value) {
        if (sensorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSensorsIsMutable();
          sensors_.add(index, value);
          onChanged();
        } else {
          sensorsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SensorData sensors = 39;</code>
       */
      public Builder addSensors(
          SensorData.Builder builderForValue) {
        if (sensorsBuilder_ == null) {
          ensureSensorsIsMutable();
          sensors_.add(builderForValue.build());
          onChanged();
        } else {
          sensorsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SensorData sensors = 39;</code>
       */
      public Builder addSensors(
          int index, SensorData.Builder builderForValue) {
        if (sensorsBuilder_ == null) {
          ensureSensorsIsMutable();
          sensors_.add(index, builderForValue.build());
          onChanged();
        } else {
          sensorsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SensorData sensors = 39;</code>
       */
      public Builder addAllSensors(
          Iterable<? extends SensorData> values) {
        if (sensorsBuilder_ == null) {
          ensureSensorsIsMutable();
          super.addAll(values, sensors_);
          onChanged();
        } else {
          sensorsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .SensorData sensors = 39;</code>
       */
      public Builder clearSensors() {
        if (sensorsBuilder_ == null) {
          sensors_ = java.util.Collections.emptyList();
          bitField1_ = (bitField1_ & ~0x00000040);
          onChanged();
        } else {
          sensorsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .SensorData sensors = 39;</code>
       */
      public Builder removeSensors(int index) {
        if (sensorsBuilder_ == null) {
          ensureSensorsIsMutable();
          sensors_.remove(index);
          onChanged();
        } else {
          sensorsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .SensorData sensors = 39;</code>
       */
      public SensorData.Builder getSensorsBuilder(
          int index) {
        return getSensorsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .SensorData sensors = 39;</code>
       */
      public SensorDataOrBuilder getSensorsOrBuilder(
          int index) {
        if (sensorsBuilder_ == null) {
          return sensors_.get(index);  } else {
          return sensorsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .SensorData sensors = 39;</code>
       */
      public java.util.List<? extends SensorDataOrBuilder>
           getSensorsOrBuilderList() {
        if (sensorsBuilder_ != null) {
          return sensorsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sensors_);
        }
      }
      /**
       * <code>repeated .SensorData sensors = 39;</code>
       */
      public SensorData.Builder addSensorsBuilder() {
        return getSensorsFieldBuilder().addBuilder(
            SensorData.getDefaultInstance());
      }
      /**
       * <code>repeated .SensorData sensors = 39;</code>
       */
      public SensorData.Builder addSensorsBuilder(
          int index) {
        return getSensorsFieldBuilder().addBuilder(
            index, SensorData.getDefaultInstance());
      }
      /**
       * <code>repeated .SensorData sensors = 39;</code>
       */
      public java.util.List<SensorData.Builder>
           getSensorsBuilderList() {
        return getSensorsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getSensorsFieldBuilder() {
        if (sensorsBuilder_ == null) {
          sensorsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  sensors_,
                  ((bitField1_ & 0x00000040) == 0x00000040),
                  getParentForChildren(),
                  isClean());
          sensors_ = null;
        }
        return sensorsBuilder_;
      }

      // optional bool installed = 40;
      private boolean installed_ ;
      /**
       * <code>optional bool installed = 40;</code>
       *
       * <pre>
       * 安装状态 (上)
       * </pre>
       */
      public boolean hasInstalled() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bool installed = 40;</code>
       *
       * <pre>
       * 安装状态 (上)
       * </pre>
       */
      public boolean getInstalled() {
        return installed_;
      }
      /**
       * <code>optional bool installed = 40;</code>
       *
       * <pre>
       * 安装状态 (上)
       * </pre>
       */
      public Builder setInstalled(boolean value) {
        bitField1_ |= 0x00000080;
        installed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool installed = 40;</code>
       *
       * <pre>
       * 安装状态 (上)
       * </pre>
       */
      public Builder clearInstalled() {
        bitField1_ = (bitField1_ & ~0x00000080);
        installed_ = false;
        onChanged();
        return this;
      }

      // optional .ExtSmoke extSmoke = 41;
      private ExtSmoke extSmoke_ = ExtSmoke.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          ExtSmoke, ExtSmoke.Builder, ExtSmokeOrBuilder> extSmokeBuilder_;
      /**
       * <code>optional .ExtSmoke extSmoke = 41;</code>
       *
       * <pre>
       * H605/N16W 烟感专用字段
       * </pre>
       */
      public boolean hasExtSmoke() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .ExtSmoke extSmoke = 41;</code>
       *
       * <pre>
       * H605/N16W 烟感专用字段
       * </pre>
       */
      public ExtSmoke getExtSmoke() {
        if (extSmokeBuilder_ == null) {
          return extSmoke_;
        } else {
          return extSmokeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .ExtSmoke extSmoke = 41;</code>
       *
       * <pre>
       * H605/N16W 烟感专用字段
       * </pre>
       */
      public Builder setExtSmoke(ExtSmoke value) {
        if (extSmokeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          extSmoke_ = value;
          onChanged();
        } else {
          extSmokeBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .ExtSmoke extSmoke = 41;</code>
       *
       * <pre>
       * H605/N16W 烟感专用字段
       * </pre>
       */
      public Builder setExtSmoke(
          ExtSmoke.Builder builderForValue) {
        if (extSmokeBuilder_ == null) {
          extSmoke_ = builderForValue.build();
          onChanged();
        } else {
          extSmokeBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .ExtSmoke extSmoke = 41;</code>
       *
       * <pre>
       * H605/N16W 烟感专用字段
       * </pre>
       */
      public Builder mergeExtSmoke(ExtSmoke value) {
        if (extSmokeBuilder_ == null) {
          if (((bitField1_ & 0x00000100) == 0x00000100) &&
              extSmoke_ != ExtSmoke.getDefaultInstance()) {
            extSmoke_ =
              ExtSmoke.newBuilder(extSmoke_).mergeFrom(value).buildPartial();
          } else {
            extSmoke_ = value;
          }
          onChanged();
        } else {
          extSmokeBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .ExtSmoke extSmoke = 41;</code>
       *
       * <pre>
       * H605/N16W 烟感专用字段
       * </pre>
       */
      public Builder clearExtSmoke() {
        if (extSmokeBuilder_ == null) {
          extSmoke_ = ExtSmoke.getDefaultInstance();
          onChanged();
        } else {
          extSmokeBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .ExtSmoke extSmoke = 41;</code>
       *
       * <pre>
       * H605/N16W 烟感专用字段
       * </pre>
       */
      public ExtSmoke.Builder getExtSmokeBuilder() {
        bitField1_ |= 0x00000100;
        onChanged();
        return getExtSmokeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .ExtSmoke extSmoke = 41;</code>
       *
       * <pre>
       * H605/N16W 烟感专用字段
       * </pre>
       */
      public ExtSmokeOrBuilder getExtSmokeOrBuilder() {
        if (extSmokeBuilder_ != null) {
          return extSmokeBuilder_.getMessageOrBuilder();
        } else {
          return extSmoke_;
        }
      }
      /**
       * <code>optional .ExtSmoke extSmoke = 41;</code>
       *
       * <pre>
       * H605/N16W 烟感专用字段
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          ExtSmoke, ExtSmoke.Builder, ExtSmokeOrBuilder>
          getExtSmokeFieldBuilder() {
        if (extSmokeBuilder_ == null) {
          extSmokeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              ExtSmoke, ExtSmoke.Builder, ExtSmokeOrBuilder>(
                  extSmoke_,
                  getParentForChildren(),
                  isClean());
          extSmoke_ = null;
        }
        return extSmokeBuilder_;
      }

      // optional .ElecFireData fireData = 42;
      private ElecFireData fireData_ = ElecFireData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          ElecFireData, ElecFireData.Builder, ElecFireDataOrBuilder> fireDataBuilder_;
      /**
       * <code>optional .ElecFireData fireData = 42;</code>
       *
       * <pre>
       * FHSJ 电气火灾专用字段
       * </pre>
       */
      public boolean hasFireData() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .ElecFireData fireData = 42;</code>
       *
       * <pre>
       * FHSJ 电气火灾专用字段
       * </pre>
       */
      public ElecFireData getFireData() {
        if (fireDataBuilder_ == null) {
          return fireData_;
        } else {
          return fireDataBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .ElecFireData fireData = 42;</code>
       *
       * <pre>
       * FHSJ 电气火灾专用字段
       * </pre>
       */
      public Builder setFireData(ElecFireData value) {
        if (fireDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fireData_ = value;
          onChanged();
        } else {
          fireDataBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .ElecFireData fireData = 42;</code>
       *
       * <pre>
       * FHSJ 电气火灾专用字段
       * </pre>
       */
      public Builder setFireData(
          ElecFireData.Builder builderForValue) {
        if (fireDataBuilder_ == null) {
          fireData_ = builderForValue.build();
          onChanged();
        } else {
          fireDataBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .ElecFireData fireData = 42;</code>
       *
       * <pre>
       * FHSJ 电气火灾专用字段
       * </pre>
       */
      public Builder mergeFireData(ElecFireData value) {
        if (fireDataBuilder_ == null) {
          if (((bitField1_ & 0x00000200) == 0x00000200) &&
              fireData_ != ElecFireData.getDefaultInstance()) {
            fireData_ =
              ElecFireData.newBuilder(fireData_).mergeFrom(value).buildPartial();
          } else {
            fireData_ = value;
          }
          onChanged();
        } else {
          fireDataBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .ElecFireData fireData = 42;</code>
       *
       * <pre>
       * FHSJ 电气火灾专用字段
       * </pre>
       */
      public Builder clearFireData() {
        if (fireDataBuilder_ == null) {
          fireData_ = ElecFireData.getDefaultInstance();
          onChanged();
        } else {
          fireDataBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000200);
        return this;
      }
      /**
       * <code>optional .ElecFireData fireData = 42;</code>
       *
       * <pre>
       * FHSJ 电气火灾专用字段
       * </pre>
       */
      public ElecFireData.Builder getFireDataBuilder() {
        bitField1_ |= 0x00000200;
        onChanged();
        return getFireDataFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .ElecFireData fireData = 42;</code>
       *
       * <pre>
       * FHSJ 电气火灾专用字段
       * </pre>
       */
      public ElecFireDataOrBuilder getFireDataOrBuilder() {
        if (fireDataBuilder_ != null) {
          return fireDataBuilder_.getMessageOrBuilder();
        } else {
          return fireData_;
        }
      }
      /**
       * <code>optional .ElecFireData fireData = 42;</code>
       *
       * <pre>
       * FHSJ 电气火灾专用字段
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          ElecFireData, ElecFireData.Builder, ElecFireDataOrBuilder>
          getFireDataFieldBuilder() {
        if (fireDataBuilder_ == null) {
          fireDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              ElecFireData, ElecFireData.Builder, ElecFireDataOrBuilder>(
                  fireData_,
                  getParentForChildren(),
                  isClean());
          fireData_ = null;
        }
        return fireDataBuilder_;
      }

      // repeated .MantunData mtunData = 43;
      private java.util.List<MantunData> mtunData_ =
        java.util.Collections.emptyList();
      private void ensureMtunDataIsMutable() {
        if (!((bitField1_ & 0x00000400) == 0x00000400)) {
          mtunData_ = new java.util.ArrayList<MantunData>(mtunData_);
          bitField1_ |= 0x00000400;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          MantunData, MantunData.Builder, MantunDataOrBuilder> mtunDataBuilder_;

      /**
       * <code>repeated .MantunData mtunData = 43;</code>
       *
       * <pre>
       * Mantun 空开专用字段
       * </pre>
       */
      public java.util.List<MantunData> getMtunDataList() {
        if (mtunDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mtunData_);
        } else {
          return mtunDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .MantunData mtunData = 43;</code>
       *
       * <pre>
       * Mantun 空开专用字段
       * </pre>
       */
      public int getMtunDataCount() {
        if (mtunDataBuilder_ == null) {
          return mtunData_.size();
        } else {
          return mtunDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .MantunData mtunData = 43;</code>
       *
       * <pre>
       * Mantun 空开专用字段
       * </pre>
       */
      public MantunData getMtunData(int index) {
        if (mtunDataBuilder_ == null) {
          return mtunData_.get(index);
        } else {
          return mtunDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .MantunData mtunData = 43;</code>
       *
       * <pre>
       * Mantun 空开专用字段
       * </pre>
       */
      public Builder setMtunData(
          int index, MantunData value) {
        if (mtunDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMtunDataIsMutable();
          mtunData_.set(index, value);
          onChanged();
        } else {
          mtunDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .MantunData mtunData = 43;</code>
       *
       * <pre>
       * Mantun 空开专用字段
       * </pre>
       */
      public Builder setMtunData(
          int index, MantunData.Builder builderForValue) {
        if (mtunDataBuilder_ == null) {
          ensureMtunDataIsMutable();
          mtunData_.set(index, builderForValue.build());
          onChanged();
        } else {
          mtunDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .MantunData mtunData = 43;</code>
       *
       * <pre>
       * Mantun 空开专用字段
       * </pre>
       */
      public Builder addMtunData(MantunData value) {
        if (mtunDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMtunDataIsMutable();
          mtunData_.add(value);
          onChanged();
        } else {
          mtunDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .MantunData mtunData = 43;</code>
       *
       * <pre>
       * Mantun 空开专用字段
       * </pre>
       */
      public Builder addMtunData(
          int index, MantunData value) {
        if (mtunDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMtunDataIsMutable();
          mtunData_.add(index, value);
          onChanged();
        } else {
          mtunDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .MantunData mtunData = 43;</code>
       *
       * <pre>
       * Mantun 空开专用字段
       * </pre>
       */
      public Builder addMtunData(
          MantunData.Builder builderForValue) {
        if (mtunDataBuilder_ == null) {
          ensureMtunDataIsMutable();
          mtunData_.add(builderForValue.build());
          onChanged();
        } else {
          mtunDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .MantunData mtunData = 43;</code>
       *
       * <pre>
       * Mantun 空开专用字段
       * </pre>
       */
      public Builder addMtunData(
          int index, MantunData.Builder builderForValue) {
        if (mtunDataBuilder_ == null) {
          ensureMtunDataIsMutable();
          mtunData_.add(index, builderForValue.build());
          onChanged();
        } else {
          mtunDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .MantunData mtunData = 43;</code>
       *
       * <pre>
       * Mantun 空开专用字段
       * </pre>
       */
      public Builder addAllMtunData(
          Iterable<? extends MantunData> values) {
        if (mtunDataBuilder_ == null) {
          ensureMtunDataIsMutable();
          super.addAll(values, mtunData_);
          onChanged();
        } else {
          mtunDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .MantunData mtunData = 43;</code>
       *
       * <pre>
       * Mantun 空开专用字段
       * </pre>
       */
      public Builder clearMtunData() {
        if (mtunDataBuilder_ == null) {
          mtunData_ = java.util.Collections.emptyList();
          bitField1_ = (bitField1_ & ~0x00000400);
          onChanged();
        } else {
          mtunDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .MantunData mtunData = 43;</code>
       *
       * <pre>
       * Mantun 空开专用字段
       * </pre>
       */
      public Builder removeMtunData(int index) {
        if (mtunDataBuilder_ == null) {
          ensureMtunDataIsMutable();
          mtunData_.remove(index);
          onChanged();
        } else {
          mtunDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .MantunData mtunData = 43;</code>
       *
       * <pre>
       * Mantun 空开专用字段
       * </pre>
       */
      public MantunData.Builder getMtunDataBuilder(
          int index) {
        return getMtunDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .MantunData mtunData = 43;</code>
       *
       * <pre>
       * Mantun 空开专用字段
       * </pre>
       */
      public MantunDataOrBuilder getMtunDataOrBuilder(
          int index) {
        if (mtunDataBuilder_ == null) {
          return mtunData_.get(index);  } else {
          return mtunDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .MantunData mtunData = 43;</code>
       *
       * <pre>
       * Mantun 空开专用字段
       * </pre>
       */
      public java.util.List<? extends MantunDataOrBuilder>
           getMtunDataOrBuilderList() {
        if (mtunDataBuilder_ != null) {
          return mtunDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mtunData_);
        }
      }
      /**
       * <code>repeated .MantunData mtunData = 43;</code>
       *
       * <pre>
       * Mantun 空开专用字段
       * </pre>
       */
      public MantunData.Builder addMtunDataBuilder() {
        return getMtunDataFieldBuilder().addBuilder(
            MantunData.getDefaultInstance());
      }
      /**
       * <code>repeated .MantunData mtunData = 43;</code>
       *
       * <pre>
       * Mantun 空开专用字段
       * </pre>
       */
      public MantunData.Builder addMtunDataBuilder(
          int index) {
        return getMtunDataFieldBuilder().addBuilder(
            index, MantunData.getDefaultInstance());
      }
      /**
       * <code>repeated .MantunData mtunData = 43;</code>
       *
       * <pre>
       * Mantun 空开专用字段
       * </pre>
       */
      public java.util.List<MantunData.Builder>
           getMtunDataBuilderList() {
        return getMtunDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          MantunData, MantunData.Builder, MantunDataOrBuilder>
          getMtunDataFieldBuilder() {
        if (mtunDataBuilder_ == null) {
          mtunDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              MantunData, MantunData.Builder, MantunDataOrBuilder>(
                  mtunData_,
                  ((bitField1_ & 0x00000400) == 0x00000400),
                  getParentForChildren(),
                  isClean());
          mtunData_ = null;
        }
        return mtunDataBuilder_;
      }

      // optional .AcrelData acrelData = 44;
      private AcrelData acrelData_ = AcrelData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          AcrelData, AcrelData.Builder, AcrelDataOrBuilder> acrelDataBuilder_;
      /**
       * <code>optional .AcrelData acrelData = 44;</code>
       *
       * <pre>
       * Acrel 电气火灾专用字段
       * </pre>
       */
      public boolean hasAcrelData() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .AcrelData acrelData = 44;</code>
       *
       * <pre>
       * Acrel 电气火灾专用字段
       * </pre>
       */
      public AcrelData getAcrelData() {
        if (acrelDataBuilder_ == null) {
          return acrelData_;
        } else {
          return acrelDataBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .AcrelData acrelData = 44;</code>
       *
       * <pre>
       * Acrel 电气火灾专用字段
       * </pre>
       */
      public Builder setAcrelData(AcrelData value) {
        if (acrelDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          acrelData_ = value;
          onChanged();
        } else {
          acrelDataBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .AcrelData acrelData = 44;</code>
       *
       * <pre>
       * Acrel 电气火灾专用字段
       * </pre>
       */
      public Builder setAcrelData(
          AcrelData.Builder builderForValue) {
        if (acrelDataBuilder_ == null) {
          acrelData_ = builderForValue.build();
          onChanged();
        } else {
          acrelDataBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .AcrelData acrelData = 44;</code>
       *
       * <pre>
       * Acrel 电气火灾专用字段
       * </pre>
       */
      public Builder mergeAcrelData(AcrelData value) {
        if (acrelDataBuilder_ == null) {
          if (((bitField1_ & 0x00000800) == 0x00000800) &&
              acrelData_ != AcrelData.getDefaultInstance()) {
            acrelData_ =
              AcrelData.newBuilder(acrelData_).mergeFrom(value).buildPartial();
          } else {
            acrelData_ = value;
          }
          onChanged();
        } else {
          acrelDataBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .AcrelData acrelData = 44;</code>
       *
       * <pre>
       * Acrel 电气火灾专用字段
       * </pre>
       */
      public Builder clearAcrelData() {
        if (acrelDataBuilder_ == null) {
          acrelData_ = AcrelData.getDefaultInstance();
          onChanged();
        } else {
          acrelDataBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000800);
        return this;
      }
      /**
       * <code>optional .AcrelData acrelData = 44;</code>
       *
       * <pre>
       * Acrel 电气火灾专用字段
       * </pre>
       */
      public AcrelData.Builder getAcrelDataBuilder() {
        bitField1_ |= 0x00000800;
        onChanged();
        return getAcrelDataFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .AcrelData acrelData = 44;</code>
       *
       * <pre>
       * Acrel 电气火灾专用字段
       * </pre>
       */
      public AcrelDataOrBuilder getAcrelDataOrBuilder() {
        if (acrelDataBuilder_ != null) {
          return acrelDataBuilder_.getMessageOrBuilder();
        } else {
          return acrelData_;
        }
      }
      /**
       * <code>optional .AcrelData acrelData = 44;</code>
       *
       * <pre>
       * Acrel 电气火灾专用字段
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          AcrelData, AcrelData.Builder, AcrelDataOrBuilder>
          getAcrelDataFieldBuilder() {
        if (acrelDataBuilder_ == null) {
          acrelDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              AcrelData, AcrelData.Builder, AcrelDataOrBuilder>(
                  acrelData_,
                  getParentForChildren(),
                  isClean());
          acrelData_ = null;
        }
        return acrelDataBuilder_;
      }

      // optional .Cayman caymanData = 45;
      private Cayman caymanData_ = Cayman.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          Cayman, Cayman.Builder, CaymanOrBuilder> caymanDataBuilder_;
      /**
       * <code>optional .Cayman caymanData = 45;</code>
       *
       * <pre>
       * Cayman 烟感专用字段
       * </pre>
       */
      public boolean hasCaymanData() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .Cayman caymanData = 45;</code>
       *
       * <pre>
       * Cayman 烟感专用字段
       * </pre>
       */
      public Cayman getCaymanData() {
        if (caymanDataBuilder_ == null) {
          return caymanData_;
        } else {
          return caymanDataBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .Cayman caymanData = 45;</code>
       *
       * <pre>
       * Cayman 烟感专用字段
       * </pre>
       */
      public Builder setCaymanData(Cayman value) {
        if (caymanDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          caymanData_ = value;
          onChanged();
        } else {
          caymanDataBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .Cayman caymanData = 45;</code>
       *
       * <pre>
       * Cayman 烟感专用字段
       * </pre>
       */
      public Builder setCaymanData(
          Cayman.Builder builderForValue) {
        if (caymanDataBuilder_ == null) {
          caymanData_ = builderForValue.build();
          onChanged();
        } else {
          caymanDataBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .Cayman caymanData = 45;</code>
       *
       * <pre>
       * Cayman 烟感专用字段
       * </pre>
       */
      public Builder mergeCaymanData(Cayman value) {
        if (caymanDataBuilder_ == null) {
          if (((bitField1_ & 0x00001000) == 0x00001000) &&
              caymanData_ != Cayman.getDefaultInstance()) {
            caymanData_ =
              Cayman.newBuilder(caymanData_).mergeFrom(value).buildPartial();
          } else {
            caymanData_ = value;
          }
          onChanged();
        } else {
          caymanDataBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .Cayman caymanData = 45;</code>
       *
       * <pre>
       * Cayman 烟感专用字段
       * </pre>
       */
      public Builder clearCaymanData() {
        if (caymanDataBuilder_ == null) {
          caymanData_ = Cayman.getDefaultInstance();
          onChanged();
        } else {
          caymanDataBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00001000);
        return this;
      }
      /**
       * <code>optional .Cayman caymanData = 45;</code>
       *
       * <pre>
       * Cayman 烟感专用字段
       * </pre>
       */
      public Cayman.Builder getCaymanDataBuilder() {
        bitField1_ |= 0x00001000;
        onChanged();
        return getCaymanDataFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Cayman caymanData = 45;</code>
       *
       * <pre>
       * Cayman 烟感专用字段
       * </pre>
       */
      public CaymanOrBuilder getCaymanDataOrBuilder() {
        if (caymanDataBuilder_ != null) {
          return caymanDataBuilder_.getMessageOrBuilder();
        } else {
          return caymanData_;
        }
      }
      /**
       * <code>optional .Cayman caymanData = 45;</code>
       *
       * <pre>
       * Cayman 烟感专用字段
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          Cayman, Cayman.Builder, CaymanOrBuilder>
          getCaymanDataFieldBuilder() {
        if (caymanDataBuilder_ == null) {
          caymanDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              Cayman, Cayman.Builder, CaymanOrBuilder>(
                  caymanData_,
                  getParentForChildren(),
                  isClean());
          caymanData_ = null;
        }
        return caymanDataBuilder_;
      }

      // optional .Baymax baymaxData = 46;
      private Baymax baymaxData_ = Baymax.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          Baymax, Baymax.Builder, BaymaxOrBuilder> baymaxDataBuilder_;
      /**
       * <code>optional .Baymax baymaxData = 46;</code>
       *
       * <pre>
       * Baymax 气感专用字段
       * </pre>
       */
      public boolean hasBaymaxData() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .Baymax baymaxData = 46;</code>
       *
       * <pre>
       * Baymax 气感专用字段
       * </pre>
       */
      public Baymax getBaymaxData() {
        if (baymaxDataBuilder_ == null) {
          return baymaxData_;
        } else {
          return baymaxDataBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .Baymax baymaxData = 46;</code>
       *
       * <pre>
       * Baymax 气感专用字段
       * </pre>
       */
      public Builder setBaymaxData(Baymax value) {
        if (baymaxDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          baymaxData_ = value;
          onChanged();
        } else {
          baymaxDataBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .Baymax baymaxData = 46;</code>
       *
       * <pre>
       * Baymax 气感专用字段
       * </pre>
       */
      public Builder setBaymaxData(
          Baymax.Builder builderForValue) {
        if (baymaxDataBuilder_ == null) {
          baymaxData_ = builderForValue.build();
          onChanged();
        } else {
          baymaxDataBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .Baymax baymaxData = 46;</code>
       *
       * <pre>
       * Baymax 气感专用字段
       * </pre>
       */
      public Builder mergeBaymaxData(Baymax value) {
        if (baymaxDataBuilder_ == null) {
          if (((bitField1_ & 0x00002000) == 0x00002000) &&
              baymaxData_ != Baymax.getDefaultInstance()) {
            baymaxData_ =
              Baymax.newBuilder(baymaxData_).mergeFrom(value).buildPartial();
          } else {
            baymaxData_ = value;
          }
          onChanged();
        } else {
          baymaxDataBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .Baymax baymaxData = 46;</code>
       *
       * <pre>
       * Baymax 气感专用字段
       * </pre>
       */
      public Builder clearBaymaxData() {
        if (baymaxDataBuilder_ == null) {
          baymaxData_ = Baymax.getDefaultInstance();
          onChanged();
        } else {
          baymaxDataBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00002000);
        return this;
      }
      /**
       * <code>optional .Baymax baymaxData = 46;</code>
       *
       * <pre>
       * Baymax 气感专用字段
       * </pre>
       */
      public Baymax.Builder getBaymaxDataBuilder() {
        bitField1_ |= 0x00002000;
        onChanged();
        return getBaymaxDataFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Baymax baymaxData = 46;</code>
       *
       * <pre>
       * Baymax 气感专用字段
       * </pre>
       */
      public BaymaxOrBuilder getBaymaxDataOrBuilder() {
        if (baymaxDataBuilder_ != null) {
          return baymaxDataBuilder_.getMessageOrBuilder();
        } else {
          return baymaxData_;
        }
      }
      /**
       * <code>optional .Baymax baymaxData = 46;</code>
       *
       * <pre>
       * Baymax 气感专用字段
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          Baymax, Baymax.Builder, BaymaxOrBuilder>
          getBaymaxDataFieldBuilder() {
        if (baymaxDataBuilder_ == null) {
          baymaxDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              Baymax, Baymax.Builder, BaymaxOrBuilder>(
                  baymaxData_,
                  getParentForChildren(),
                  isClean());
          baymaxData_ = null;
        }
        return baymaxDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:MsgNode)
    }

    static {
      defaultInstance = new MsgNode(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:MsgNode)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Channel_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Channel_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_LpwanParam_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_LpwanParam_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_BleParam_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_BleParam_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_SensorData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_SensorData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_SensorDataInt_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_SensorDataInt_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_SensorDataFloat_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_SensorDataFloat_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_MultiSensorData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_MultiSensorData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_MultiSensorDataInt_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_MultiSensorDataInt_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_GpsData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_GpsData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_AxisData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AxisData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_iBeacon_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_iBeacon_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ExtSmoke_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ExtSmoke_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_AppParam_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AppParam_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ElecFireData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ElecFireData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_MantunData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_MantunData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Cayman_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Cayman_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_AcrelData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AcrelData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Baymax_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Baymax_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_MsgNode_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_MsgNode_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\025MsgNode_1v1_m32.proto\"2\n\007Channel\022\021\n\tfr" +
      "equency\030\001 \002(\r\022\024\n\014rx1Frequency\030\002 \001(\r\"\301\003\n\n" +
      "LpwanParam\022\016\n\006devEui\030\001 \001(\014\022\016\n\006appEui\030\002 \001" +
      "(\014\022\016\n\006appKey\030\003 \001(\014\022\017\n\007appSkey\030\004 \001(\014\022\017\n\007n" +
      "wkSkey\030\005 \001(\014\022\017\n\007devAddr\030\006 \001(\r\022\020\n\010datarat" +
      "e\030\007 \001(\r\022\017\n\007txPower\030\010 \001(\021\022\013\n\003adr\030\t \001(\r\022\036\n" +
      "\nactivition\030\n \001(\0162\n.Activtion\022\035\n\tclassTy" +
      "pe\030\013 \001(\0162\n.ClassType\022\r\n\005delay\030\014 \001(\r\022\023\n\013c" +
      "hannelMask\030\r \003(\r\022\017\n\007maxEIRP\030\016 \001(\r\022\021\n\tsgl" +
      "Status\030\017 \001(\r\022\024\n\014sglFrequency\030\020 \001(\r\022\023\n\013sg",
      "lDatarate\030\021 \001(\r\022\021\n\tlbtStatus\030\022 \001(\r\022\024\n\014lb" +
      "tThreshold\030\023 \001(\021\022\032\n\010channels\030\024 \003(\0132\010.Cha" +
      "nnel\022\024\n\014rx2Frequency\030\025 \001(\r\022\023\n\013rx2Datarat" +
      "e\030\026 \001(\r\"h\n\010BleParam\022\023\n\013bleInterval\030\001 \001(\002" +
      "\022\016\n\006bleTxp\030\002 \001(\021\022\021\n\tbleOnTime\030\003 \001(\r\022\022\n\nb" +
      "leOffTime\030\004 \001(\r\022\020\n\010bleOnOff\030\005 \001(\r\"\343\001\n\nSe" +
      "nsorData\022\031\n\004type\030\t \001(\0162\013.SensorType\022\014\n\004d" +
      "ata\030\001 \001(\002\022\021\n\talarmHigh\030\002 \001(\002\022\020\n\010alarmLow" +
      "\030\003 \001(\002\022\023\n\013calibration\030\004 \001(\r\022\033\n\005error\030\005 \001" +
      "(\0162\014.SensorError\022\016\n\006status\030\006 \001(\r\022\025\n\ralar",
      "mStepHigh\030\007 \001(\002\022\024\n\014alarmStepLow\030\010 \001(\002\022\030\n" +
      "\020fluctuationRange\030\n \001(\002\"\314\001\n\rSensorDataIn" +
      "t\022\031\n\004type\030\001 \001(\0162\013.SensorType\022\014\n\004data\030\002 \001" +
      "(\021\022\021\n\talarmHigh\030\003 \001(\021\022\020\n\010alarmLow\030\004 \001(\021\022" +
      "\023\n\013calibration\030\005 \001(\021\022\033\n\005error\030\006 \001(\0162\014.Se" +
      "nsorError\022\016\n\006status\030\007 \001(\r\022\025\n\ralarmStepHi" +
      "gh\030\010 \001(\021\022\024\n\014alarmStepLow\030\t \001(\021\"\316\001\n\017Senso" +
      "rDataFloat\022\031\n\004type\030\001 \001(\0162\013.SensorType\022\014\n" +
      "\004data\030\002 \001(\002\022\021\n\talarmHigh\030\003 \001(\002\022\020\n\010alarmL" +
      "ow\030\004 \001(\002\022\023\n\013calibration\030\005 \001(\021\022\033\n\005error\030\006",
      " \001(\0162\014.SensorError\022\016\n\006status\030\007 \001(\r\022\025\n\ral" +
      "armStepHigh\030\010 \001(\002\022\024\n\014alarmStepLow\030\t \001(\002\"" +
      "\263\001\n\017MultiSensorData\022\014\n\004data\030\001 \003(\002\022\021\n\tala" +
      "rmHigh\030\002 \001(\002\022\020\n\010alarmLow\030\003 \001(\002\022\023\n\013calibr" +
      "ation\030\004 \001(\r\022\033\n\005error\030\005 \001(\0162\014.SensorError" +
      "\022\016\n\006status\030\006 \001(\r\022\025\n\ralarmStepHigh\030\007 \001(\002\022" +
      "\024\n\014alarmStepLow\030\010 \001(\002\"\266\001\n\022MultiSensorDat" +
      "aInt\022\014\n\004data\030\001 \003(\021\022\021\n\talarmHigh\030\002 \001(\021\022\020\n" +
      "\010alarmLow\030\003 \001(\021\022\023\n\013calibration\030\004 \001(\r\022\033\n\005" +
      "error\030\005 \001(\0162\014.SensorError\022\016\n\006status\030\006 \001(",
      "\r\022\025\n\ralarmStepHigh\030\007 \001(\021\022\024\n\014alarmStepLow" +
      "\030\010 \001(\021\"@\n\007GpsData\022\020\n\010latitude\030\001 \001(\001\022\021\n\tl" +
      "ongitude\030\002 \001(\001\022\020\n\010altitude\030\003 \001(\001\"+\n\010Axis" +
      "Data\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"D\n" +
      "\007iBeacon\022\014\n\004uuid\030\001 \001(\014\022\r\n\005major\030\002 \001(\r\022\r\n" +
      "\005minor\030\003 \001(\r\022\r\n\005mrssi\030\004 \001(\021\"T\n\010ExtSmoke\022" +
      "\020\n\010bgSignal\030\001 \001(\r\022\031\n\021bgSignalThreshold\030\002" +
      " \001(\r\022\033\n\023bgSignalCalibration\030\003 \001(\r\"\372\004\n\010Ap" +
      "pParam\022\024\n\003cmd\030\001 \001(\0162\007.AppCmd\022\026\n\016uploadIn" +
      "terval\030\002 \001(\r\022\020\n\010syncTime\030\003 \001(\r\022\035\n\tnodeSt",
      "ate\030\004 \001(\0162\n.NodeState\022\035\n\tnodeAlarm\030\005 \001(\016" +
      "2\n.NodeAlarm\022\024\n\014nodeAlarmSet\030\006 \001(\r\022\017\n\007co" +
      "nfirm\030\007 \001(\r\022\035\n\tsmokeCtrl\030\010 \001(\0162\n.SmokeCt" +
      "rl\022\024\n\014uploadRepeat\030\t \001(\r\022\033\n\023alarmUploadI" +
      "nterval\030\n \001(\r\022\025\n\ralarmUploadNb\030\013 \001(\r\022!\n\013" +
      "trackerCtrl\030\014 \001(\0162\014.TrackerCtrl\022\034\n\024track" +
      "erEmergencyTime\030\r \001(\r\022\020\n\010demoMode\030\016 \001(\r\022" +
      "\026\n\016lowBatteryBeep\030\017 \001(\r\022\024\n\014beepMuteTime\030" +
      "\020 \001(\r\022\021\n\tledStatus\030\021 \001(\r\022\027\n\017alertModeSta" +
      "tus\030\022 \001(\r\022\034\n\013supportCmds\030\023 \003(\0162\007.AppCmd\022",
      "\031\n\021alarmShieldSwitch\030\024 \001(\r\022\027\n\017alarmShiel" +
      "dTime\030\025 \001(\r\022\033\n\023errorInsulateSwitch\030\026 \001(\r" +
      "\022\025\n\rwarningSwitch\030\027 \001(\r\022\024\n\014deployStatus\030" +
      "\030 \001(\r\022\027\n\017insuranceStatus\030\031 \001(\r\"\321\002\n\014ElecF" +
      "ireData\022\017\n\007vol_val\030\001 \001(\021\022\020\n\010curr_val\030\002 \001" +
      "(\r\022\023\n\013leakage_val\030\003 \001(\021\022\021\n\tpower_val\030\004 \001" +
      "(\r\022\027\n\017elec_energy_val\030\005 \001(\r\022\020\n\010temp_val\030" +
      "\006 \001(\r\022\016\n\006status\030\007 \001(\r\022\r\n\005alarm\030\010 \001(\r\022\r\n\005" +
      "error\030\t \001(\r\022\021\n\tsensorPwd\030\n \001(\r\022\021\n\tleakag" +
      "eTh\030\013 \001(\r\022\016\n\006tempTh\030\014 \001(\r\022\021\n\tcurrentTh\030\r",
      " \001(\r\022\016\n\006loadTh\030\016 \001(\r\022\021\n\tvolHighTh\030\017 \001(\r\022" +
      "\020\n\010volLowTh\030\020 \001(\r\022\013\n\003cmd\030\021 \001(\r\022\022\n\nautoSw" +
      "itch\030\022 \001(\r\"\243\003\n\nMantunData\022\016\n\006volVal\030\001 \001(" +
      "\r\022\022\n\nleakageVal\030\002 \001(\r\022\020\n\010powerVal\030\003 \001(\r\022" +
      "\017\n\007tempVal\030\004 \001(\r\022\017\n\007currVal\030\005 \001(\r\022\016\n\006sta" +
      "tus\030\006 \001(\r\022\016\n\006kwhVal\030\007 \001(\r\022\017\n\007swOnOff\030\010 \001" +
      "(\r\022\021\n\tvolHighTh\030\t \001(\r\022\020\n\010volLowTh\030\n \001(\r\022" +
      "\021\n\tleakageTh\030\013 \001(\r\022\016\n\006tempTh\030\014 \001(\r\022\021\n\tcu" +
      "rrentTh\030\r \001(\r\022\017\n\007powerTh\030\016 \001(\r\022\021\n\tattrib" +
      "ute\030\017 \001(\r\022\013\n\003cmd\030\020 \001(\r\022\020\n\010devError\030\021 \001(\r",
      "\022\017\n\007version\030\022 \001(\r\022\n\n\002id\030\023 \001(\r\022\021\n\ttaskClo" +
      "ud\030\024 \001(\r\022\023\n\013volHwarning\030\025 \001(\r\022\023\n\013volLwar" +
      "ning\030\026 \001(\r\022\024\n\014currHwarning\030\027 \001(\r\"\346\005\n\006Cay" +
      "man\022\017\n\007isSmoke\030\001 \001(\r\022\017\n\007isMoved\030\002 \001(\r\022\022\n" +
      "\nvalueOfTem\030\003 \001(\021\022\022\n\nvalueOfHum\030\004 \001(\r\022\024\n" +
      "\014valueOfSmoke\030\005 \001(\r\022\026\n\016standarOfSmoke\030\006 " +
      "\001(\r\022\026\n\016alarmOfHighTem\030\007 \001(\021\022\025\n\ralarmOfLo" +
      "wTem\030\010 \001(\021\022\026\n\016alarmOfHighHum\030\t \001(\r\022\025\n\ral" +
      "armOfLowHum\030\n \001(\r\022\013\n\003cmd\030\013 \001(\r\022\025\n\rvalueO" +
      "fphotor\030\014 \001(\r\022\022\n\ndevceState\030\r \001(\r\022\022\n\nble",
      "AdvType\030\016 \001(\r\022\027\n\017bleAdvStartTime\030\017 \001(\r\022\025" +
      "\n\rbleAdvEndTime\030\020 \001(\r\022\023\n\013valueOfBatb\030\021 \001" +
      "(\r\022\024\n\014levelOfAlarm\030\022 \001(\r\022\023\n\013isSelfCheck\030" +
      "\023 \001(\r\022\032\n\022calibrationOfSmoke\030\024 \001(\r\022\024\n\014ala" +
      "rmOfSmoke\030\025 \001(\r\022\032\n\022humanDetectionTime\030\026 " +
      "\001(\r\022\023\n\013defenseMode\030\027 \001(\r\022\030\n\020defenseTimer" +
      "Mode\030\030 \001(\r\022\034\n\024defenseModeStartTime\030\031 \001(\r" +
      "\022\033\n\023defenseModeStopTime\030\032 \001(\r\022\023\n\013invadeA" +
      "larm\030\033 \001(\r\022\021\n\tcdsSwitch\030\034 \001(\r\022\030\n\020nightLi" +
      "ghtSwitch\030\035 \001(\r\022\034\n\024humanDetectionSwitch\030",
      "\036 \001(\r\022\032\n\022humanDetectionSync\030\037 \001(\r\022\026\n\016voi" +
      "cePlayIndex\030  \001(\r\"\333\007\n\tAcrelData\022\023\n\013chann" +
      "elType\030\001 \001(\r\022\024\n\014shortCircuit\030\002 \001(\r\022\023\n\013op" +
      "enCircuit\030\003 \001(\r\022\020\n\010chStatus\030\004 \001(\r\022\022\n\nlea" +
      "kageVal\030\005 \001(\021\022\r\n\005t1Val\030\006 \001(\021\022\r\n\005t2Val\030\007 " +
      "\001(\021\022\r\n\005t3Val\030\010 \001(\021\022\r\n\005t4Val\030\t \001(\021\022\021\n\tcon" +
      "nectSw\030\n \001(\r\022\020\n\010chEnable\030\013 \001(\r\022\021\n\tleakag" +
      "eTh\030\014 \001(\r\022\014\n\004t1Th\030\r \001(\r\022\014\n\004t2Th\030\016 \001(\r\022\014\n" +
      "\004t3Th\030\017 \001(\r\022\014\n\004t4Th\030\020 \001(\r\022\016\n\006passwd\030\021 \001(" +
      "\r\022\014\n\004aVal\030\022 \001(\r\022\014\n\004bVal\030\023 \001(\r\022\014\n\004cVal\030\024 ",
      "\001(\r\022\021\n\tvalStatus\030\025 \001(\r\022\r\n\005aCurr\030\026 \001(\r\022\r\n" +
      "\005bCurr\030\027 \001(\r\022\r\n\005cCurr\030\030 \001(\r\022\022\n\ncurrStatu" +
      "s\030\031 \001(\r\022\017\n\007totalYg\030\032 \001(\r\022\017\n\007totalWg\030\033 \001(" +
      "\r\022\017\n\007totalSz\030\034 \001(\r\022\023\n\013totalFactor\030\035 \001(\r\022" +
      "\022\n\nvalHighSet\030\036 \001(\r\022\021\n\tvalLowSet\030\037 \001(\r\022\023" +
      "\n\013currHighSet\030  \001(\r\022\021\n\tenergyKwh\030! \001(\r\022\013" +
      "\n\003cmd\030# \001(\r\022\020\n\010devError\030$ \001(\r\022\n\n\002ct\030% \001(" +
      "\r\022\020\n\010outputSw\030& \001(\r\022\021\n\tselfCheck\030\' \001(\r\022\023" +
      "\n\013valHighType\030( \001(\r\022\022\n\nvalLowType\030) \001(\r\022" +
      "\024\n\014currHighType\030* \001(\r\022\013\n\003ict\030+ \001(\r\022\n\n\002un",
      "\030, \001(\r\022\n\n\002in\030- \001(\r\022\n\n\002pt\030. \001(\r\022\020\n\010lineMo" +
      "de\030/ \001(\r\022\021\n\tlineOrder\0300 \001(\r\022\017\n\007volFreq\0301" +
      " \001(\r\022\024\n\014leakageDelay\0302 \001(\r\022\017\n\007T1Delay\0303 " +
      "\001(\r\022\017\n\007T2Delay\0304 \001(\r\022\017\n\007T3Delay\0305 \001(\r\022\017\n" +
      "\007T4Delay\0306 \001(\r\022\021\n\tvolHDelay\0307 \001(\r\022\021\n\tvol" +
      "LDelay\0308 \001(\r\022\021\n\tcurrDelay\0309 \001(\r\022\016\n\006buzze" +
      "r\030: \001(\r\"\264\002\n\006Baymax\022\023\n\013gasDevClass\030\001 \001(\r\022" +
      "\022\n\ngasDensity\030\002 \001(\r\022\024\n\014gasDensityL1\030\003 \001(" +
      "\r\022\024\n\014gasDensityL2\030\004 \001(\r\022\024\n\014gasDensityL3\030" +
      "\005 \001(\r\022\026\n\016gasDisassembly\030\006 \001(\r\022\022\n\ngasLose",
      "Pwr\030\007 \001(\r\022\022\n\ngasEMValve\030\010 \001(\r\022\027\n\017gasDevi" +
      "ceStatus\030\t \001(\r\022\030\n\020gasDeviceOpState\030\n \001(\r" +
      "\022\031\n\021gasDeviceComsDown\030\013 \001(\r\022\024\n\014gasDevice" +
      "CMD\030\014 \001(\r\022\033\n\023gasDeviceSilentMode\030\r \001(\r\"\374" +
      "\t\n\007MsgNode\022\n\n\002id\030\001 \001(\r\022\013\n\003cmd\030\002 \001(\r\022\016\n\006c" +
      "mdRet\030\003 \001(\r\022\037\n\nlpwanParam\030\004 \001(\0132\013.LpwanP" +
      "aram\022\033\n\010bleParam\030\005 \001(\0132\t.BleParam\022\033\n\010app" +
      "Param\030\006 \001(\0132\t.AppParam\022\017\n\007battery\030\007 \001(\021\022" +
      "\025\n\003gps\030\010 \001(\0132\010.GpsData\022\037\n\014acceleration\030\t" +
      " \001(\0132\t.AxisData\022\034\n\tmagnetism\030\n \001(\0132\t.Axi",
      "sData\022\034\n\tgyroscope\030\013 \001(\0132\t.AxisData\022 \n\013t" +
      "emperature\030\014 \001(\0132\013.SensorData\022\035\n\010humidit" +
      "y\030\r \001(\0132\013.SensorData\022\032\n\005light\030\016 \001(\0132\013.Se" +
      "nsorData\022\031\n\004leak\030\017 \001(\0132\013.SensorData\022\027\n\002c" +
      "o\030\020 \001(\0132\013.SensorData\022\030\n\003co2\030\021 \001(\0132\013.Sens" +
      "orData\022\030\n\003so2\030\022 \001(\0132\013.SensorData\022\030\n\003no2\030" +
      "\023 \001(\0132\013.SensorData\022\030\n\003ch4\030\024 \001(\0132\013.Sensor" +
      "Data\022\031\n\004ch2o\030\025 \001(\0132\013.SensorData\022\030\n\003lpg\030\026" +
      " \001(\0132\013.SensorData\022\027\n\002o3\030\027 \001(\0132\013.SensorDa" +
      "ta\022\030\n\003pm1\030\030 \001(\0132\013.SensorData\022\032\n\005pm2_5\030\031 ",
      "\001(\0132\013.SensorData\022\031\n\004pm10\030\032 \001(\0132\013.SensorD" +
      "ata\022\032\n\005angle\030\033 \001(\0132\013.SensorData\022\032\n\005cover" +
      "\030\034 \001(\0132\013.SensorData\022\032\n\005level\030\035 \001(\0132\013.Sen" +
      "sorData\022\032\n\005smoke\030\036 \001(\0132\013.SensorData\022\032\n\005p" +
      "itch\030\037 \001(\0132\013.SensorData\022\031\n\004roll\030  \001(\0132\013." +
      "SensorData\022\030\n\003yaw\030! \001(\0132\013.SensorData\022\035\n\005" +
      "flame\030\" \001(\0132\016.SensorDataInt\022\"\n\rartificia" +
      "lGas\030# \001(\0132\013.SensorData\022&\n\tmultiTemp\030$ \001" +
      "(\0132\023.MultiSensorDataInt\022\"\n\rwaterPressure" +
      "\030% \001(\0132\013.SensorData\022\031\n\007ibeacon\030& \001(\0132\010.i",
      "Beacon\022\034\n\007sensors\030\' \003(\0132\013.SensorData\022\021\n\t" +
      "installed\030( \001(\010\022\033\n\010extSmoke\030) \001(\0132\t.ExtS" +
      "moke\022\037\n\010fireData\030* \001(\0132\r.ElecFireData\022\035\n" +
      "\010mtunData\030+ \003(\0132\013.MantunData\022\035\n\tacrelDat" +
      "a\030, \001(\0132\n.AcrelData\022\033\n\ncaymanData\030- \001(\0132" +
      "\007.Cayman\022\033\n\nbaymaxData\030. \001(\0132\007.Baymax*\035\n" +
      "\tActivtion\022\007\n\003ABP\020\000\022\007\n\003OTA\020\001*2\n\tClassTyp" +
      "e\022\013\n\007CLASS_A\020\000\022\013\n\007CLASS_B\020\001\022\013\n\007CLASS_C\020\002" +
      "*\334\001\n\013SensorError\022\023\n\017SENSOR_ERR_NONE\020\000\022\026\n" +
      "\022SENSOR_ERR_NO_DATA\020\001\022\022\n\016SENSOR_ERR_CRC\020",
      "\002\022\023\n\017SENSOR_ERR_DATA\020\003\022\024\n\020SENSOR_ERR_FAU" +
      "LT\020\004\022\024\n\020SENSOR_ERR_ALARM\020\005\022\031\n\025SENSOR_ERR" +
      "_ALARM_HIGH\020\006\022\030\n\024SENSOR_ERR_ALARM_LOW\020\007\022" +
      "\026\n\022SENSOR_ERR_UNKNOWN\020\177*\222\003\n\nSensorType\022\024" +
      "\n\020SENSOR_TYPE_TEMP\020\000\022\024\n\020SENSOR_TYPE_HUMI" +
      "\020\001\022\025\n\021SENSOR_TYPE_LIGHT\020\002\022\023\n\017SENSOR_TYPE" +
      "_GPS\020\003\022\025\n\021SENSOR_TYPE_ANGLE\020\004\022\025\n\021SENSOR_" +
      "TYPE_PM2_5\020\005\022\024\n\020SENSOR_TYPE_PM10\020\006\022\024\n\020SE" +
      "NSOR_TYPE_LEAK\020\007\022\022\n\016SENSOR_TYPE_CO\020\010\022\023\n\017" +
      "SENSOR_TYPE_CO2\020\t\022\023\n\017SENSOR_TYPE_NO2\020\n\022\023",
      "\n\017SENSOR_TYPE_CH4\020\013\022\023\n\017SENSOR_TYPE_LPG\020\014" +
      "\022\025\n\021SENSOR_TYPE_FLAME\020\r\022\036\n\032SENSOR_TYPE_A" +
      "RTIFICIAL_GAS\020\016\022\032\n\026SENSOR_TYPE_WATER_GAG" +
      "E\020\017\022\027\n\023SENSOR_TYPE_TRACKER\020\020*\341\001\n\014SensorS" +
      "tatus\022\027\n\023SENSORO_STATUS_NONE\020\000\022\"\n\036SENSOR" +
      "O_STATUS_SELF_INSPECTION\020\001\022\030\n\024SENSORO_ST" +
      "ATUS_ALARM\020\002\022\031\n\025SENSORO_STATUS_IMPACT\020\003\022" +
      "\034\n\030SENSORO_STATUS_DISCHARGE\020\004\022\'\n#SENSORO" +
      "_STATUS_DISCHARGE_AND_IMPACT\020\005\022\030\n\024SENSOR" +
      "O_STATUS_MOVED\020\006*\205\003\n\006AppCmd\022\020\n\014APP_CMD_N",
      "ONE\020\000\022\021\n\rAPP_CMD_RESET\020\001\022\025\n\021APP_CMD_FAC_" +
      "RESET\020\002\022\017\n\013APP_CMD_DFU\020\003\022\026\n\022APP_CMD_DATA" +
      "_QUERY\020\n\022\022\n\016APP_CMD_REBOOT\020\013\022\025\n\021APP_CMD_" +
      "SELF_TEST\020\014\022\025\n\021APP_CMD_LONG_MUTE\020\r\022\020\n\014AP" +
      "P_CMD_MUTE\020\016\022\032\n\026APP_CMD_SWITCH_OPENING\020\017" +
      "\022\032\n\026APP_CMD_SWITCH_CLOSING\020\020\022\031\n\025APP_CMD_" +
      "VALVE_CLOSING\020\021\022\027\n\023APP_CMD_TIMING_MUTE\020\024" +
      "\022\031\n\025APP_CMD_ALARM_TRIGGER\020\025\022\037\n\033APP_CMD_R" +
      "EMOTE_CONTROL_PAIR\020\026\022\032\n\026APP_CMD_CHANNEL_" +
      "SEARCH\020\027*O\n\tNodeState\022\026\n\022NODE_STATE_UNKN",
      "OWN\020\000\022\025\n\021NODE_STATE_STATIC\020\001\022\023\n\017NODE_STA" +
      "TE_MOVE\020\002*\251\001\n\tNodeAlarm\022\023\n\017NODE_ALARM_NO" +
      "NE\020\000\022\025\n\021NODE_ALARM_STATIC\020\001\022\023\n\017NODE_ALAR" +
      "M_MOVE\020\002\022\030\n\024NODE_ALARM_COLLISION\020\003\022\023\n\017NO" +
      "DE_ALARM_ROLL\020\004\022\027\n\023NODE_ALARM_INVERTED\020\005" +
      "\022\023\n\017NODE_ALARM_FALL\020\006*\201\001\n\tSmokeCtrl\022\023\n\017S" +
      "MOKE_CTRL_NONE\020\000\022\021\n\rSMOKE_ERASURE\020\001\022\031\n\025S" +
      "MOKE_INSPECTION_TEST\020\002\022\031\n\025SMOKE_INSPECTI" +
      "ON_OVER\020\003\022\026\n\022SMOKE_ERASURE_LONE\020\004*\255\001\n\013Tr" +
      "ackerCtrl\022\020\n\014TRACKER_Ctrl\020\000\022\020\n\014TRACKER_B",
      "OOT\020\001\022\024\n\020TRACKER_SHUTDOWN\020\002\022\026\n\022TRACKER_C" +
      "ALL_START\020\003\022\024\n\020TRACKER_CALL_END\020\004\022\033\n\027TRA" +
      "CKER_EMERGENCE_START\020\005\022\031\n\025TRACKER_EMERGE" +
      "NCE_END\020\006"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_Channel_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_Channel_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Channel_descriptor,
              new String[] { "Frequency", "Rx1Frequency", });
          internal_static_LpwanParam_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_LpwanParam_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_LpwanParam_descriptor,
              new String[] { "DevEui", "AppEui", "AppKey", "AppSkey", "NwkSkey", "DevAddr", "Datarate", "TxPower", "Adr", "Activition", "ClassType", "Delay", "ChannelMask", "MaxEIRP", "SglStatus", "SglFrequency", "SglDatarate", "LbtStatus", "LbtThreshold", "Channels", "Rx2Frequency", "Rx2Datarate", });
          internal_static_BleParam_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_BleParam_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_BleParam_descriptor,
              new String[] { "BleInterval", "BleTxp", "BleOnTime", "BleOffTime", "BleOnOff", });
          internal_static_SensorData_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_SensorData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_SensorData_descriptor,
              new String[] { "Type", "Data", "AlarmHigh", "AlarmLow", "Calibration", "Error", "Status", "AlarmStepHigh", "AlarmStepLow", "FluctuationRange", });
          internal_static_SensorDataInt_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_SensorDataInt_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_SensorDataInt_descriptor,
              new String[] { "Type", "Data", "AlarmHigh", "AlarmLow", "Calibration", "Error", "Status", "AlarmStepHigh", "AlarmStepLow", });
          internal_static_SensorDataFloat_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_SensorDataFloat_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_SensorDataFloat_descriptor,
              new String[] { "Type", "Data", "AlarmHigh", "AlarmLow", "Calibration", "Error", "Status", "AlarmStepHigh", "AlarmStepLow", });
          internal_static_MultiSensorData_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_MultiSensorData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_MultiSensorData_descriptor,
              new String[] { "Data", "AlarmHigh", "AlarmLow", "Calibration", "Error", "Status", "AlarmStepHigh", "AlarmStepLow", });
          internal_static_MultiSensorDataInt_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_MultiSensorDataInt_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_MultiSensorDataInt_descriptor,
              new String[] { "Data", "AlarmHigh", "AlarmLow", "Calibration", "Error", "Status", "AlarmStepHigh", "AlarmStepLow", });
          internal_static_GpsData_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_GpsData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_GpsData_descriptor,
              new String[] { "Latitude", "Longitude", "Altitude", });
          internal_static_AxisData_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_AxisData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_AxisData_descriptor,
              new String[] { "X", "Y", "Z", });
          internal_static_iBeacon_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_iBeacon_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_iBeacon_descriptor,
              new String[] { "Uuid", "Major", "Minor", "Mrssi", });
          internal_static_ExtSmoke_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_ExtSmoke_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ExtSmoke_descriptor,
              new String[] { "BgSignal", "BgSignalThreshold", "BgSignalCalibration", });
          internal_static_AppParam_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_AppParam_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_AppParam_descriptor,
              new String[] { "Cmd", "UploadInterval", "SyncTime", "NodeState", "NodeAlarm", "NodeAlarmSet", "Confirm", "SmokeCtrl", "UploadRepeat", "AlarmUploadInterval", "AlarmUploadNb", "TrackerCtrl", "TrackerEmergencyTime", "DemoMode", "LowBatteryBeep", "BeepMuteTime", "LedStatus", "AlertModeStatus", "SupportCmds", "AlarmShieldSwitch", "AlarmShieldTime", "ErrorInsulateSwitch", "WarningSwitch", "DeployStatus", "InsuranceStatus", });
          internal_static_ElecFireData_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_ElecFireData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ElecFireData_descriptor,
              new String[] { "VolVal", "CurrVal", "LeakageVal", "PowerVal", "ElecEnergyVal", "TempVal", "Status", "Alarm", "Error", "SensorPwd", "LeakageTh", "TempTh", "CurrentTh", "LoadTh", "VolHighTh", "VolLowTh", "Cmd", "AutoSwitch", });
          internal_static_MantunData_descriptor =
            getDescriptor().getMessageTypes().get(14);
          internal_static_MantunData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_MantunData_descriptor,
              new String[] { "VolVal", "LeakageVal", "PowerVal", "TempVal", "CurrVal", "Status", "KwhVal", "SwOnOff", "VolHighTh", "VolLowTh", "LeakageTh", "TempTh", "CurrentTh", "PowerTh", "Attribute", "Cmd", "DevError", "Version", "Id", "TaskCloud", "VolHwarning", "VolLwarning", "CurrHwarning", });
          internal_static_Cayman_descriptor =
            getDescriptor().getMessageTypes().get(15);
          internal_static_Cayman_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Cayman_descriptor,
              new String[] { "IsSmoke", "IsMoved", "ValueOfTem", "ValueOfHum", "ValueOfSmoke", "StandarOfSmoke", "AlarmOfHighTem", "AlarmOfLowTem", "AlarmOfHighHum", "AlarmOfLowHum", "Cmd", "ValueOfphotor", "DevceState", "BleAdvType", "BleAdvStartTime", "BleAdvEndTime", "ValueOfBatb", "LevelOfAlarm", "IsSelfCheck", "CalibrationOfSmoke", "AlarmOfSmoke", "HumanDetectionTime", "DefenseMode", "DefenseTimerMode", "DefenseModeStartTime", "DefenseModeStopTime", "InvadeAlarm", "CdsSwitch", "NightLightSwitch", "HumanDetectionSwitch", "HumanDetectionSync", "VoicePlayIndex", });
          internal_static_AcrelData_descriptor =
            getDescriptor().getMessageTypes().get(16);
          internal_static_AcrelData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_AcrelData_descriptor,
              new String[] { "ChannelType", "ShortCircuit", "OpenCircuit", "ChStatus", "LeakageVal", "T1Val", "T2Val", "T3Val", "T4Val", "ConnectSw", "ChEnable", "LeakageTh", "T1Th", "T2Th", "T3Th", "T4Th", "Passwd", "AVal", "BVal", "CVal", "ValStatus", "ACurr", "BCurr", "CCurr", "CurrStatus", "TotalYg", "TotalWg", "TotalSz", "TotalFactor", "ValHighSet", "ValLowSet", "CurrHighSet", "EnergyKwh", "Cmd", "DevError", "Ct", "OutputSw", "SelfCheck", "ValHighType", "ValLowType", "CurrHighType", "Ict", "Un", "In", "Pt", "LineMode", "LineOrder", "VolFreq", "LeakageDelay", "T1Delay", "T2Delay", "T3Delay", "T4Delay", "VolHDelay", "VolLDelay", "CurrDelay", "Buzzer", });
          internal_static_Baymax_descriptor =
            getDescriptor().getMessageTypes().get(17);
          internal_static_Baymax_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Baymax_descriptor,
              new String[] { "GasDevClass", "GasDensity", "GasDensityL1", "GasDensityL2", "GasDensityL3", "GasDisassembly", "GasLosePwr", "GasEMValve", "GasDeviceStatus", "GasDeviceOpState", "GasDeviceComsDown", "GasDeviceCMD", "GasDeviceSilentMode", });
          internal_static_MsgNode_descriptor =
            getDescriptor().getMessageTypes().get(18);
          internal_static_MsgNode_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_MsgNode_descriptor,
              new String[] { "Id", "Cmd", "CmdRet", "LpwanParam", "BleParam", "AppParam", "Battery", "Gps", "Acceleration", "Magnetism", "Gyroscope", "Temperature", "Humidity", "Light", "Leak", "Co", "Co2", "So2", "No2", "Ch4", "Ch2O", "Lpg", "O3", "Pm1", "Pm25", "Pm10", "Angle", "Cover", "Level", "Smoke", "Pitch", "Roll", "Yaw", "Flame", "ArtificialGas", "MultiTemp", "WaterPressure", "Ibeacon", "Sensors", "Installed", "ExtSmoke", "FireData", "MtunData", "AcrelData", "CaymanData", "BaymaxData", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
